<element name ='sdf' required ='1'>
  <description>SDF base element.</description>
  <attribute name ='version' type ='string' default ='1.6' required ='1'>
    <description>Version number of the SDF format.</description>
  </attribute>
  <element name ='world' required ='*'>
    <description>The world element encapsulates an entire world description including: models, scene, physics, joints, and plugins</description>
    <attribute name ='name' type ='string' default ='__default__' required ='1'>
      <description>Unique name of the world</description>
    </attribute>
    <element name ='audio' required ='0'>
      <description>Global audio properties.</description>
      <element name ='device' required ='1' type ='string' default ='default'>
        <description>Device to use for audio playback. A value of "default" will use the system's default audio device. Otherwise, specify a an audio device file"</description>
      </element>
    </element>
    <element name ='wind' required ='0'>
      <description>The wind tag specifies the type and properties of the wind.</description>
      <element name ='linear_velocity' required ='0' type ='vector3' default ='0 0 0'>
        <description>Linear velocity of the wind.</description>
      </element>
    </element>
    <element name ='include' required ='*'>
      <description>Include resources from a URI</description>
      <element name ='uri' required ='1' type ='string' default ='__default__'>
        <description>URI to a resource, such as a model</description>
      </element>
      <element name ='name' required ='0' type ='string' default =''>
        <description>Override the name of the included model.</description>
      </element>
      <element name ='static' required ='0' type ='bool' default ='0'>
        <description>Override the static value of the included model.</description>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
    </element>
    <element name ='gravity' required ='1' type ='vector3' default ='0 0 -9.8'>
      <description>The gravity vector in m/s^2, expressed in a coordinate frame defined by the spherical_coordinates tag.</description>
    </element>
    <element name ='magnetic_field' required ='1' type ='vector3' default ='6e-06 2.3e-05 -4.2e-05'>
      <description>The magnetic vector in Tesla, expressed in a coordinate frame defined by the spherical_coordinates tag.</description>
    </element>
    <element name ='atmosphere' required ='1'>
      <description>The atmosphere tag specifies the type and properties of the atmosphere model.</description>
      <attribute name ='type' type ='string' default ='adiabatic' required ='1'>
        <description>The type of the atmosphere engine. Current options are adiabatic. Defaults to adiabatic if left unspecified.</description>
      </attribute>
      <element name ='temperature' required ='0' type ='double' default ='288.15'>
        <description>Temperature at sea level in kelvins.</description>
      </element>
      <element name ='pressure' required ='0' type ='double' default ='101325'>
        <description>Pressure at sea level in pascals.</description>
      </element>
      <element name ='temperature_gradient' required ='0' type ='double' default ='-0.0065'>
        <description>Temperature gradient with respect to increasing altitude at sea level in units of K/m.</description>
      </element>
    </element>
    <element name ='gui' required ='0'>
      <description></description>
      <attribute name ='fullscreen' type ='bool' default ='0' required ='0'>
        <description></description>
      </attribute>
      <element name ='camera' required ='0'>
        <description></description>
        <attribute name ='name' type ='string' default ='user_camera' required ='1'>
          <description></description>
        </attribute>
        <element name ='view_controller' required ='0' type ='string' default ='orbit'>
          <description></description>
        </element>
        <element name ='projection_type' required ='0' type ='string' default ='perspective'>
          <description>Set the type of projection for the camera. Valid values are "perspective" and "orthographic".</description>
        </element>
        <element name ='track_visual' required ='0'>
          <description></description>
          <element name ='name' required ='0' type ='string' default ='__default__'>
            <description>Name of the tracked visual. If no name is provided, the remaining settings will be applied whenever tracking is triggered in the GUI.</description>
          </element>
          <element name ='min_dist' required ='0' type ='double' default ='0'>
            <description>Minimum distance between the camera and the tracked visual. This parameter is only used if static is set to false.</description>
          </element>
          <element name ='max_dist' required ='0' type ='double' default ='0'>
            <description>Maximum distance between the camera and the tracked visual. This parameter is only used if static is set to false.</description>
          </element>
          <element name ='static' required ='0' type ='bool' default ='0'>
            <description>If set to true, the position of the camera is fixed relatively to the model or to the world, depending on the value of the use_model_frame element. Otherwise, the position of the camera may vary but the distance between the camera and the model will depend on the value of the min_dist and max_dist elements. In any case, the camera will always follow the model by changing its orientation.</description>
          </element>
          <element name ='use_model_frame' required ='0' type ='bool' default ='1'>
            <description>If set to true, the position of the camera is relative to the model reference frame, which means that its position relative to the model will not change. Otherwise, the position of the camera is relative to the world reference frame, which means that its position relative to the world will not change. This parameter is only used if static is set to true.</description>
          </element>
          <element name ='xyz' required ='0' type ='vector3' default ='-5 0 3'>
            <description>The position of the camera's reference frame. This parameter is only used if static is set to true. If use_model_frame is set to true, the position is relative to the model reference frame, otherwise it represents world coordinates.</description>
          </element>
          <element name ='inherit_yaw' required ='0' type ='bool' default ='0'>
            <description>If set to true, the camera will inherit the yaw rotation of the tracked model. This parameter is only used if static and use_model_frame are set to true.</description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='plugin' required ='*'>
        <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the plugin, scoped to its parent.</description>
        </attribute>
        <attribute name ='filename' type ='string' default ='__default__' required ='1'>
          <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
        </attribute>
        <element copy_data ='true' required ='*'/>
      </element>
    </element>
    <element name ='physics' required ='1'>
      <description>The physics tag specifies the type and properties of the dynamics engine.</description>
      <attribute name ='name' type ='string' default ='default_physics' required ='0'>
        <description>The name of this set of physics parameters.</description>
      </attribute>
      <attribute name ='default' type ='bool' default ='0' required ='0'>
        <description>If true, this physics element is set as the default physics profile for the world. If multiple default physics elements exist, the first element marked as default is chosen. If no default physics element exists, the first physics element is chosen.</description>
      </attribute>
      <attribute name ='type' type ='string' default ='ode' required ='1'>
        <description>The type of the dynamics engine. Current options are ode, bullet, simbody and dart. Defaults to ode if left unspecified.</description>
      </attribute>
      <element name ='max_step_size' required ='1' type ='double' default ='0.001'>
        <description>Maximum time step size at which every system in simulation can interact with the states of the world. (was physics.sdf's dt).</description>
      </element>
      <element name ='real_time_factor' required ='1' type ='double' default ='1'>
        <description>target simulation speedup factor, defined by ratio of simulation time to real-time.</description>
      </element>
      <element name ='real_time_update_rate' required ='1' type ='double' default ='1000'>
        <description>Rate at which to update the physics engine (UpdatePhysics calls per real-time second). (was physics.sdf's update_rate).</description>
      </element>
      <element name ='max_contacts' required ='0' type ='int' default ='20'>
        <description>Maximum number of contacts allowed between two entities. This value can be over ridden by a max_contacts element in a collision element.</description>
      </element>
      <element name ='dart' required ='0'>
        <description>DART specific physics properties</description>
        <element name ='solver' required ='1'>
          <description></description>
          <element name ='solver_type' required ='1' type ='string' default ='dantzig'>
            <description>One of the following types: pgs, dantzig. PGS stands for Projected Gauss-Seidel.</description>
          </element>
        </element>
        <element name ='collision_detector' required ='0' type ='string' default ='fcl'>
          <description>Specify collision detector for DART to use. Can be dart, fcl, bullet or ode.</description>
        </element>
      </element>
      <element name ='simbody' required ='0'>
        <description>Simbody specific physics properties</description>
        <element name ='min_step_size' required ='0' type ='double' default ='0.0001'>
          <description>(Currently not used in simbody) The time duration which advances with each iteration of the dynamics engine, this has to be no bigger than max_step_size under physics block. If left unspecified, min_step_size defaults to max_step_size.</description>
        </element>
        <element name ='accuracy' required ='0' type ='double' default ='0.001'>
          <description>Roughly the relative error of the system. -LOG(accuracy) is roughly the number of significant digits.</description>
        </element>
        <element name ='max_transient_velocity' required ='0' type ='double' default ='0.01'>
          <description>Tolerable "slip" velocity allowed by the solver when static friction is supposed to hold object in place.</description>
        </element>
        <element name ='contact' required ='0'>
          <description>
        Relationship among dissipation, coef. restitution, etc.
        d = dissipation coefficient (1/velocity)
        vc = capture velocity (velocity where e=e_max)
        vp = plastic velocity (smallest v where e=e_min) > vc
        Assume real COR=1 when v=0.
        e_min = given minimum COR, at v >= vp (a.k.a. plastic_coef_restitution)
        d = slope = (1-e_min)/vp
        OR, e_min = 1 - d*vp
        e_max = maximum COR = 1-d*vc, reached at v=vc
        e = 0,                       v <= vc
          = 1 - d*v,               vc < v < vp
          = e_min,                   v >= vp

        dissipation factor = d*min(v,vp)   [compliant]
        cor = e                            [rigid]

        Combining rule e = 0,               e1==e2==0
                         = 2*e1*e2/(e1+e2), otherwise</description>
          <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
            <description>Default contact material stiffness (force/dist or torque/radian).</description>
          </element>
          <element name ='dissipation' required ='0' type ='double' default ='100'>
            <description>dissipation coefficient to be used in compliant contact; if not given it is (1-min_cor)/plastic_impact_velocity</description>
          </element>
          <element name ='plastic_coef_restitution' required ='0' type ='double' default ='0.5'>
            <description>this is the COR to be used at high velocities for rigid impacts; if not given it is 1 - dissipation*plastic_impact_velocity</description>
          </element>
          <element name ='plastic_impact_velocity' required ='0' type ='double' default ='0.5'>
            <description>smallest impact velocity at which min COR is reached; set to zero if you want the min COR always to be used</description>
          </element>
          <element name ='static_friction' required ='0' type ='double' default ='0.9'>
            <description>static friction (mu_s) as described by this plot: http://gazebosim.org/wiki/File:Stribeck_friction.png</description>
          </element>
          <element name ='dynamic_friction' required ='0' type ='double' default ='0.9'>
            <description>dynamic friction (mu_d) as described by this plot: http://gazebosim.org/wiki/File:Stribeck_friction.png</description>
          </element>
          <element name ='viscous_friction' required ='0' type ='double' default ='0'>
            <description>viscous friction (mu_v) with units of (1/velocity) as described by this plot: http://gazebosim.org/wiki/File:Stribeck_friction.png</description>
          </element>
          <element name ='override_impact_capture_velocity' required ='0' type ='double' default ='0.001'>
            <description>for rigid impacts only, impact velocity at which COR is set to zero; normally inherited from global default but can be overridden here. Combining rule: use larger velocity</description>
          </element>
          <element name ='override_stiction_transition_velocity' required ='0' type ='double' default ='0.001'>
            <description>This is the largest slip velocity at which we'll consider a transition to stiction. Normally inherited from a global default setting. For a continuous friction model this is the velocity at which the max static friction force is reached. Combining rule: use larger velocity</description>
          </element>
        </element>
      </element>
      <element name ='bullet' required ='0'>
        <description>Bullet specific physics properties</description>
        <element name ='solver' required ='1'>
          <description></description>
          <element name ='type' required ='1' type ='string' default ='sequential_impulse'>
            <description>One of the following types: sequential_impulse only.</description>
          </element>
          <element name ='min_step_size' required ='0' type ='double' default ='0.0001'>
            <description>The time duration which advances with each iteration of the dynamics engine, this has to be no bigger than max_step_size under physics block. If left unspecified, min_step_size defaults to max_step_size.</description>
          </element>
          <element name ='iters' required ='1' type ='int' default ='50'>
            <description>Number of iterations for each step. A higher number produces greater accuracy at a performance cost.</description>
          </element>
          <element name ='sor' required ='1' type ='double' default ='1.3'>
            <description>Set the successive over-relaxation parameter.</description>
          </element>
        </element>
        <element name ='constraints' required ='1'>
          <description>Bullet constraint parameters.</description>
          <element name ='cfm' required ='1' type ='double' default ='0'>
            <description>Constraint force mixing parameter. See the ODE page for more information.</description>
          </element>
          <element name ='erp' required ='1' type ='double' default ='0.2'>
            <description>Error reduction parameter. See the ODE page for more information.</description>
          </element>
          <element name ='contact_surface_layer' required ='1' type ='double' default ='0.001'>
            <description>The depth of the surface layer around all geometry objects. Contacts are allowed to sink into the surface layer up to the given depth before coming to rest. The default value is zero. Increasing this to some small value (e.g. 0.001) can help prevent jittering problems due to contacts being repeatedly made and broken.</description>
          </element>
          <element name ='split_impulse' required ='1' type ='bool' default ='1'>
            <description>Similar to ODE's max_vel implementation. See http://web.archive.org/web/20120430155635/http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
          </element>
          <element name ='split_impulse_penetration_threshold' required ='1' type ='double' default ='-0.01'>
            <description>Similar to ODE's max_vel implementation. See http://web.archive.org/web/20120430155635/http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
          </element>
        </element>
      </element>
      <element name ='ode' required ='0'>
        <description>ODE specific physics properties</description>
        <element name ='solver' required ='1'>
          <description></description>
          <element name ='type' required ='1' type ='string' default ='quick'>
            <description>One of the following types: world, quick</description>
          </element>
          <element name ='min_step_size' required ='0' type ='double' default ='0.0001'>
            <description>The time duration which advances with each iteration of the dynamics engine, this has to be no bigger than max_step_size under physics block. If left unspecified, min_step_size defaults to max_step_size.</description>
          </element>
          <element name ='island_threads' required ='0' type ='int' default ='0'>
            <description>Number of threads to use for "islands" of disconnected models.</description>
          </element>
          <element name ='iters' required ='1' type ='int' default ='50'>
            <description>Number of iterations for each step. A higher number produces greater accuracy at a performance cost.</description>
          </element>
          <element name ='precon_iters' required ='0' type ='int' default ='0'>
            <description>Experimental parameter.</description>
          </element>
          <element name ='sor' required ='1' type ='double' default ='1.3'>
            <description>Set the successive over-relaxation parameter.</description>
          </element>
          <element name ='thread_position_correction' required ='0' type ='bool' default ='0'>
            <description>Flag to use threading to speed up position correction computation.</description>
          </element>
          <element name ='use_dynamic_moi_rescaling' required ='1' type ='bool' default ='0'>
            <description>Flag to enable dynamic rescaling of moment of inertia in constrained directions. See gazebo pull request 1114 for the implementation of this feature. https://bitbucket.org/osrf/gazebo/pull-request/1114</description>
          </element>
          <element name ='friction_model' required ='0' type ='string' default ='pyramid_model'>
            <description>Name of ODE friction model to use. Valid values include: pyramid_model: (default) friction forces limited in two directions in proportion to normal force. box_model: friction forces limited to constant in two directions. cone_model: friction force magnitude limited in proportion to normal force. See gazebo pull request 1522 for the implementation of this feature. https://bitbucket.org/osrf/gazebo/pull-request/1522 https://bitbucket.org/osrf/gazebo/commits/8c05ad64967c</description>
          </element>
        </element>
        <element name ='constraints' required ='1'>
          <description>ODE constraint parameters.</description>
          <element name ='cfm' required ='1' type ='double' default ='0'>
            <description>Constraint force mixing parameter. See the ODE page for more information.</description>
          </element>
          <element name ='erp' required ='1' type ='double' default ='0.2'>
            <description>Error reduction parameter. See the ODE page for more information.</description>
          </element>
          <element name ='contact_max_correcting_vel' required ='1' type ='double' default ='100'>
            <description>The maximum correcting velocities allowed when resolving contacts.</description>
          </element>
          <element name ='contact_surface_layer' required ='1' type ='double' default ='0.001'>
            <description>The depth of the surface layer around all geometry objects. Contacts are allowed to sink into the surface layer up to the given depth before coming to rest. The default value is zero. Increasing this to some small value (e.g. 0.001) can help prevent jittering problems due to contacts being repeatedly made and broken.</description>
          </element>
        </element>
      </element>
    </element>
    <element name ='scene' required ='1'>
      <description>Specifies the look of the environment.</description>
      <element name ='ambient' required ='1' type ='color' default ='0.4 0.4 0.4 1'>
        <description>Color of the ambient light.</description>
      </element>
      <element name ='background' required ='1' type ='color' default ='0.7 0.7 0.7 1'>
        <description>Color of the background.</description>
      </element>
      <element name ='sky' required ='0'>
        <description>Properties for the sky</description>
        <element name ='time' required ='0' type ='double' default ='10'>
          <description>Time of day [0..24]</description>
        </element>
        <element name ='sunrise' required ='0' type ='double' default ='6'>
          <description>Sunrise time [0..24]</description>
        </element>
        <element name ='sunset' required ='0' type ='double' default ='20'>
          <description>Sunset time [0..24]</description>
        </element>
        <element name ='clouds' required ='0'>
          <description>Sunset time [0..24]</description>
          <element name ='speed' required ='0' type ='double' default ='0.6'>
            <description>Speed of the clouds</description>
          </element>
          <element name ='direction' required ='0' type ='double' default ='0'>
            <description>Direction of the cloud movement</description>
          </element>
          <element name ='humidity' required ='0' type ='double' default ='0.5'>
            <description>Density of clouds</description>
          </element>
          <element name ='mean_size' required ='0' type ='double' default ='0.5'>
            <description>Average size of the clouds</description>
          </element>
          <element name ='ambient' required ='0' type ='color' default ='0.8 0.8 0.8 1'>
            <description>Ambient cloud color</description>
          </element>
        </element>
      </element>
      <element name ='shadows' required ='1' type ='bool' default ='1'>
        <description>Enable/disable shadows</description>
      </element>
      <element name ='fog' required ='0'>
        <description>Controls fog</description>
        <element name ='color' required ='0' type ='color' default ='1 1 1 1'>
          <description>Fog color</description>
        </element>
        <element name ='type' required ='0' type ='string' default ='none'>
          <description>Fog type: constant, linear, quadratic</description>
        </element>
        <element name ='start' required ='0' type ='double' default ='1'>
          <description>Distance to start of fog</description>
        </element>
        <element name ='end' required ='0' type ='double' default ='100'>
          <description>Distance to end of fog</description>
        </element>
        <element name ='density' required ='0' type ='double' default ='1'>
          <description>Density of fog</description>
        </element>
      </element>
      <element name ='grid' required ='0' type ='bool' default ='1'>
        <description>Enable/disable the grid</description>
      </element>
      <element name ='origin_visual' required ='0' type ='bool' default ='1'>
        <description>Show/hide world origin indicator</description>
      </element>
    </element>
    <element name ='light' required ='*'>
      <description>The light element describes a light source.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='0'>
        <description>A unique name for the light.</description>
      </attribute>
      <attribute name ='type' type ='string' default ='point' required ='1'>
        <description>The light type: point, directional, spot.</description>
      </attribute>
      <element name ='cast_shadows' required ='0' type ='bool' default ='0'>
        <description>When true, the light will cast shadows.</description>
      </element>
      <element name ='diffuse' required ='1' type ='color' default ='1 1 1 1'>
        <description>Diffuse light color</description>
      </element>
      <element name ='specular' required ='1' type ='color' default ='0.1 0.1 0.1 1'>
        <description>Specular light color</description>
      </element>
      <element name ='attenuation' required ='0'>
        <description>Light attenuation</description>
        <element name ='range' required ='1' type ='double' default ='10'>
          <description>Range of the light</description>
        </element>
        <element name ='linear' required ='0' type ='double' default ='1'>
          <description>The linear attenuation factor: 1 means attenuate evenly over the distance.</description>
        </element>
        <element name ='constant' required ='0' type ='double' default ='1'>
          <description>The constant attenuation factor: 1.0 means never attenuate, 0.0 is complete attenutation.</description>
        </element>
        <element name ='quadratic' required ='0' type ='double' default ='0'>
          <description>The quadratic attenuation factor: adds a curvature to the attenuation.</description>
        </element>
      </element>
      <element name ='direction' required ='1' type ='vector3' default ='0 0 -1'>
        <description>Direction of the light, only applicable for spot and directional lights.</description>
      </element>
      <element name ='spot' required ='0'>
        <description>Spot light parameters</description>
        <element name ='inner_angle' required ='1' type ='double' default ='0'>
          <description>Angle covered by the bright inner cone</description>
        </element>
        <element name ='outer_angle' required ='1' type ='double' default ='0'>
          <description>Angle covered by the outer cone</description>
        </element>
        <element name ='falloff' required ='1' type ='double' default ='0'>
          <description>The rate of falloff between the inner and outer cones. 1.0 means a linear falloff, less means slower falloff, higher means faster falloff.</description>
        </element>
      </element>
      <element name ='frame' required ='*'>
        <description>A frame of reference to which a pose is relative.</description>
        <attribute name ='name' type ='string' default ='' required ='1'>
          <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
        </attribute>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
    </element>
    <element name ='model' required ='*'>
      <description>The model element defines a complete robot or any other physical object.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the model. This name must not match another model in the world.</description>
      </attribute>
      <element name ='static' required ='0' type ='bool' default ='0'>
        <description>If set to true, the model is immovable. Otherwise the model is simulated in the dynamics engine.</description>
      </element>
      <element name ='self_collide' required ='0' type ='bool' default ='0'>
        <description>If set to true, all links in the model will collide with each other (except those connected by a joint). Can be overridden by the link or collision element self_collide property. Two links within a model will collide if link1.self_collide OR link2.self_collide. Links connected by a joint will never collide.</description>
      </element>
      <element name ='allow_auto_disable' required ='0' type ='bool' default ='1'>
        <description>Allows a model to auto-disable, which is means the physics engine can skip updating the model when the model is at rest. This parameter is only used by models with no joints.</description>
      </element>
      <element name ='include' required ='*'>
        <description>Include resources from a URI. This can be used to nest models.</description>
        <element name ='uri' required ='1' type ='string' default ='__default__'>
          <description>URI to a resource, such as a model</description>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>Override the pose of the included model. A position and orientation in the global coordinate frame for the model. Position(x,y,z) and rotation (roll, pitch yaw) in the global coordinate frame.</description>
        </element>
        <element name ='name' required ='0' type ='string' default =''>
          <description>Override the name of the included model.</description>
        </element>
        <element name ='static' required ='0' type ='bool' default ='0'>
          <description>Override the static value of the included model.</description>
        </element>
      </element>
      <element name ='model' required ='*'>
        <description>A nested model element</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the model. This name must not match another nested model in the same level as this model.</description>
        </attribute>
        <element ref ='model' required ='*'/>
      </element>
      <element name ='enable_wind' required ='0' type ='bool' default ='0'>
        <description>If set to true, all links in the model will be affected by the wind. Can be overriden by the link wind property.</description>
      </element>
      <element name ='frame' required ='*'>
        <description>A frame of reference to which a pose is relative.</description>
        <attribute name ='name' type ='string' default ='' required ='1'>
          <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
        </attribute>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
      <element name ='link' required ='*'>
        <description>A physical link with inertia, collision, and visual properties. A link must be a child of a model, and any number of links may exist in a model.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the link within the scope of the model.</description>
        </attribute>
        <element name ='gravity' required ='0' type ='bool' default ='1'>
          <description>If true, the link is affected by gravity.</description>
        </element>
        <element name ='enable_wind' required ='0' type ='bool' default ='0'>
          <description>If true, the link is affected by the wind.</description>
        </element>
        <element name ='self_collide' required ='0' type ='bool' default ='0'>
          <description>If true, the link can collide with other links in the model. Two links within a model will collide if link1.self_collide OR link2.self_collide. Links connected by a joint will never collide.</description>
        </element>
        <element name ='kinematic' required ='0' type ='bool' default ='0'>
          <description>If true, the link is kinematic only</description>
        </element>
        <element name ='must_be_base_link' required ='0' type ='bool' default ='0'>
          <description>If true, the link will have 6DOF and be a direct child of world.</description>
        </element>
        <element name ='velocity_decay' required ='0'>
          <description>Exponential damping of the link's velocity.</description>
          <element name ='linear' required ='0' type ='double' default ='0'>
            <description>Linear damping</description>
          </element>
          <element name ='angular' required ='0' type ='double' default ='0'>
            <description>Angular damping</description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='inertial' required ='0'>
          <description>The inertial properties of the link.</description>
          <element name ='mass' required ='0' type ='double' default ='1'>
            <description>The mass of the link.</description>
          </element>
          <element name ='inertia' required ='0'>
            <description>The 3x3 rotational inertia matrix. Because the rotational inertia matrix is symmetric, only 6 above-diagonal elements of this matrix are specified here, using the attributes ixx, ixy, ixz, iyy, iyz, izz.</description>
            <element name ='ixx' required ='1' type ='double' default ='1'>
              <description></description>
            </element>
            <element name ='ixy' required ='1' type ='double' default ='0'>
              <description></description>
            </element>
            <element name ='ixz' required ='1' type ='double' default ='0'>
              <description></description>
            </element>
            <element name ='iyy' required ='1' type ='double' default ='1'>
              <description></description>
            </element>
            <element name ='iyz' required ='1' type ='double' default ='0'>
              <description></description>
            </element>
            <element name ='izz' required ='1' type ='double' default ='1'>
              <description></description>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>This is the pose of the inertial reference frame, relative to the specified reference frame. The origin of the inertial reference frame needs to be at the center of gravity. The axes of the inertial reference frame do not need to be aligned with the principal axes of the inertia.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='collision' required ='*'>
          <description>The collision properties of a link. Note that this can be different from the visual properties of a link, for example, simpler collision models are often used to reduce computation time.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Unique name for the collision element within the scope of the parent link.</description>
          </attribute>
          <element name ='laser_retro' required ='0' type ='double' default ='0'>
            <description>intensity value returned by laser sensor.</description>
          </element>
          <element name ='max_contacts' required ='0' type ='int' default ='10'>
            <description>Maximum number of contacts allowed between two entities. This value overrides the max_contacts element defined in physics.</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='geometry' required ='1'>
            <description>The shape of the visual or collision object.</description>
            <element name ='empty' required ='0'>
              <description>You can use the empty tag to make empty geometries.</description>
            </element>
            <element name ='box' required ='0'>
              <description>Box shape</description>
              <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
                <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
              </element>
            </element>
            <element name ='cylinder' required ='0'>
              <description>Cylinder shape</description>
              <element name ='radius' required ='1' type ='double' default ='1'>
                <description>Radius of the cylinder</description>
              </element>
              <element name ='length' required ='1' type ='double' default ='1'>
                <description>Length of the cylinder</description>
              </element>
            </element>
            <element name ='heightmap' required ='0'>
              <description>A heightmap based on a 2d grayscale image.</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>URI to a grayscale image file</description>
              </element>
              <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
                <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
              </element>
              <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
                <description>A position offset.</description>
              </element>
              <element name ='texture' required ='*'>
                <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
                <element name ='size' required ='1' type ='double' default ='10'>
                  <description>Size of the applied texture in meters.</description>
                </element>
                <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                  <description>Diffuse texture image filename</description>
                </element>
                <element name ='normal' required ='1' type ='string' default ='__default__'>
                  <description>Normalmap texture image filename</description>
                </element>
              </element>
              <element name ='blend' required ='*'>
                <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
                <element name ='min_height' required ='1' type ='double' default ='0'>
                  <description>Min height of a blend layer</description>
                </element>
                <element name ='fade_dist' required ='1' type ='double' default ='0'>
                  <description>Distance over which the blend occurs</description>
                </element>
              </element>
              <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
                <description>Set if the rendering engine will use terrain paging</description>
              </element>
              <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
                <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
              </element>
            </element>
            <element name ='image' required ='0'>
              <description>Extrude a set of boxes from a grayscale image.</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>URI of the grayscale image file</description>
              </element>
              <element name ='scale' required ='1' type ='double' default ='1'>
                <description>Scaling factor applied to the image</description>
              </element>
              <element name ='threshold' required ='1' type ='int' default ='200'>
                <description>Grayscale threshold</description>
              </element>
              <element name ='height' required ='1' type ='double' default ='1'>
                <description>Height of the extruded boxes</description>
              </element>
              <element name ='granularity' required ='1' type ='int' default ='1'>
                <description>The amount of error in the model</description>
              </element>
            </element>
            <element name ='mesh' required ='0'>
              <description>Mesh shape</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>Mesh uri</description>
              </element>
              <element name ='submesh' required ='0'>
                <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
                <element name ='name' required ='1' type ='string' default ='__default__'>
                  <description>Name of the submesh within the parent mesh</description>
                </element>
                <element name ='center' required ='0' type ='bool' default ='0'>
                  <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
                </element>
              </element>
              <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
                <description>Scaling factor applied to the mesh</description>
              </element>
            </element>
            <element name ='plane' required ='0'>
              <description>Plane shape</description>
              <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
                <description>Normal direction for the plane</description>
              </element>
              <element name ='size' required ='1' type ='vector2d' default ='1 1'>
                <description>Length of each side of the plane</description>
              </element>
            </element>
            <element name ='polyline' required ='0'>
              <description>Defines an extruded polyline shape</description>
              <element name ='point' required ='+' type ='vector2d' default ='0 0'>
                <description>A series of points that define the path of the polyline.</description>
              </element>
              <element name ='height' required ='1' type ='double' default ='1'>
                <description>Height of the polyline</description>
              </element>
            </element>
            <element name ='sphere' required ='0'>
              <description>Sphere shape</description>
              <element name ='radius' required ='1' type ='double' default ='1'>
                <description>radius of the sphere</description>
              </element>
            </element>
          </element>
          <element name ='surface' required ='0'>
            <description>The surface parameters</description>
            <element name ='bounce' required ='0'>
              <description></description>
              <element name ='restitution_coefficient' required ='0' type ='double' default ='0'>
                <description>Bounciness coefficient of restitution, from [0...1], where 0=no bounciness.</description>
              </element>
              <element name ='threshold' required ='0' type ='double' default ='100000'>
                <description>Bounce capture velocity, below which effective coefficient of restitution is 0.</description>
              </element>
            </element>
            <element name ='friction' required ='0'>
              <description></description>
              <element name ='torsional' required ='0'>
                <description>Parameters for torsional friction</description>
                <element name ='coefficient' required ='0' type ='double' default ='1'>
                  <description>Torsional friction coefficient, unitless maximum ratio of tangential stress to normal stress.</description>
                </element>
                <element name ='use_patch_radius' required ='0' type ='bool' default ='1'>
                  <description>If this flag is true, torsional friction is calculated using the "patch_radius" parameter. If this flag is set to false, "surface_radius" (R) and contact depth (d) are used to compute the patch radius as sqrt(R*d).</description>
                </element>
                <element name ='patch_radius' required ='0' type ='double' default ='0'>
                  <description>Radius of contact patch surface.</description>
                </element>
                <element name ='surface_radius' required ='0' type ='double' default ='0'>
                  <description>Surface radius on the point of contact.</description>
                </element>
                <element name ='ode' required ='0'>
                  <description>Torsional friction parameters for ODE</description>
                  <element name ='slip' required ='0' type ='double' default ='0'>
                    <description>Force dependent slip for torsional friction, equivalent to inverse of viscous damping coefficient with units of rad/s/(Nm). A slip value of 0 is infinitely viscous.</description>
                  </element>
                </element>
              </element>
              <element name ='ode' required ='0'>
                <description>ODE friction parameters</description>
                <element name ='mu' required ='0' type ='double' default ='1'>
                  <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
                </element>
                <element name ='mu2' required ='0' type ='double' default ='1'>
                  <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
                </element>
                <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                  <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the ODE Collide callback function will align the friction pyramid directions with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
                </element>
                <element name ='slip1' required ='0' type ='double' default ='0'>
                  <description>Force dependent slip in first friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
                </element>
                <element name ='slip2' required ='0' type ='double' default ='0'>
                  <description>Force dependent slip in second friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
                </element>
              </element>
              <element name ='bullet' required ='0'>
                <description></description>
                <element name ='friction' required ='0' type ='double' default ='1'>
                  <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
                </element>
                <element name ='friction2' required ='0' type ='double' default ='1'>
                  <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
                </element>
                <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                  <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the friction pyramid directions will be aligned with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
                </element>
                <element name ='rolling_friction' required ='0' type ='double' default ='1'>
                  <description>Coefficient of rolling friction</description>
                </element>
              </element>
            </element>
            <element name ='contact' required ='0'>
              <description></description>
              <element name ='collide_without_contact' required ='0' type ='bool' default ='0'>
                <description>Flag to disable contact force generation, while still allowing collision checks and contact visualization to occur.</description>
              </element>
              <element name ='collide_without_contact_bitmask' required ='0' type ='unsigned int' default ='1'>
                <description>Bitmask for collision filtering when collide_without_contact is on</description>
              </element>
              <element name ='collide_bitmask' required ='0' type ='unsigned int' default ='65535'>
                <description>Bitmask for collision filtering. This will override collide_without_contact</description>
              </element>
              <element name ='category_bitmask' required ='0' type ='unsigned int' default ='65535'>
                <description>Bitmask for category of collision filtering. Collision happens if ((category1 & collision2) | (category2 & collision1)) is not zero. If not specified, the category_bitmask should be interpreted as being the same as collide_bitmask.</description>
              </element>
              <element name ='poissons_ratio' required ='0' type ='double' default ='0.3'>
                <description>Poisson's ratio is the unitless ratio between transverse and axial strain. This value must lie between (-1, 0.5). Defaults to 0.3 for typical steel. Note typical silicone elastomers have Poisson's ratio near 0.49 ~ 0.50. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
              </element>
              <element name ='elastic_modulus' required ='0' type ='double' default ='-1'>
                <description>Young's Modulus in SI derived unit Pascal. Defaults to -1. If value is less or equal to zero, contact using elastic modulus (with Poisson's Ratio) is disabled. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
              </element>
              <element name ='ode' required ='0'>
                <description>ODE contact parameters</description>
                <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                  <description>Soft constraint force mixing.</description>
                </element>
                <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                  <description>Soft error reduction parameter</description>
                </element>
                <element name ='kp' required ='0' type ='double' default ='1e+12'>
                  <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
                </element>
                <element name ='kd' required ='0' type ='double' default ='1'>
                  <description>dynamically "damping"-equivalent coefficient for contact joints</description>
                </element>
                <element name ='max_vel' required ='0' type ='double' default ='0.01'>
                  <description>maximum contact correction velocity truncation term.</description>
                </element>
                <element name ='min_depth' required ='0' type ='double' default ='0'>
                  <description>minimum allowable depth before contact correction impulse is applied</description>
                </element>
              </element>
              <element name ='bullet' required ='0'>
                <description>Bullet contact parameters</description>
                <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                  <description>Soft constraint force mixing.</description>
                </element>
                <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                  <description>Soft error reduction parameter</description>
                </element>
                <element name ='kp' required ='0' type ='double' default ='1e+12'>
                  <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
                </element>
                <element name ='kd' required ='0' type ='double' default ='1'>
                  <description>dynamically "damping"-equivalent coefficient for contact joints</description>
                </element>
                <element name ='split_impulse' required ='1' type ='bool' default ='1'>
                  <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
                </element>
                <element name ='split_impulse_penetration_threshold' required ='1' type ='double' default ='-0.01'>
                  <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
                </element>
              </element>
            </element>
            <element name ='soft_contact' required ='0'>
              <description></description>
              <element name ='dart' required ='0'>
                <description>soft contact pamameters based on paper: http://www.cc.gatech.edu/graphics/projects/Sumit/homepage/papers/sigasia11/jain_softcontacts_siga11.pdf</description>
                <element name ='bone_attachment' required ='1' type ='double' default ='100'>
                  <description>This is variable k_v in the soft contacts paper. Its unit is N/m.</description>
                </element>
                <element name ='stiffness' required ='1' type ='double' default ='100'>
                  <description>This is variable k_e in the soft contacts paper. Its unit is N/m.</description>
                </element>
                <element name ='damping' required ='1' type ='double' default ='10'>
                  <description>Viscous damping of point velocity in body frame. Its unit is N/m/s.</description>
                </element>
                <element name ='flesh_mass_fraction' required ='1' type ='double' default ='0.05'>
                  <description>Fraction of mass to be distributed among deformable nodes.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='visual' required ='*'>
          <description>The visual properties of the link. This element specifies the shape of the object (box, cylinder, etc.) for visualization purposes.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Unique name for the visual element within the scope of the parent link.</description>
          </attribute>
          <element name ='cast_shadows' required ='0' type ='bool' default ='1'>
            <description>If true the visual will cast shadows.</description>
          </element>
          <element name ='laser_retro' required ='0' type ='double' default ='0'>
            <description>will be implemented in the future release.</description>
          </element>
          <element name ='transparency' required ='0' type ='double' default ='0'>
            <description>The amount of transparency( 0=opaque, 1 = fully transparent)</description>
          </element>
          <element name ='meta' required ='0'>
            <description>Optional meta information for the visual. The information contained within this element should be used to provide additional feedback to an end user.</description>
            <element name ='layer' required ='0' type ='int' default ='0'>
              <description>The layer in which this visual is displayed. The layer number is useful for programs, such as Gazebo, that put visuals in different layers for enhanced visualization.</description>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='material' required ='0'>
            <description>The material of the visual element.</description>
            <element name ='script' required ='0'>
              <description>Name of material from an installed script file. This will override the color element if the script exists.</description>
              <element name ='uri' required ='+' type ='string' default ='__default__'>
                <description>URI of the material script file</description>
              </element>
              <element name ='name' required ='1' type ='string' default ='__default__'>
                <description>Name of the script within the script file</description>
              </element>
            </element>
            <element name ='shader' required ='0'>
              <description></description>
              <attribute name ='type' type ='string' default ='pixel' required ='1'>
                <description>vertex, pixel, normal_map_objectspace, normal_map_tangentspace</description>
              </attribute>
              <element name ='normal_map' required ='0' type ='string' default ='__default__'>
                <description>filename of the normal map</description>
              </element>
            </element>
            <element name ='lighting' required ='0' type ='bool' default ='1'>
              <description>If false, dynamic lighting will be disabled</description>
            </element>
            <element name ='ambient' required ='0' type ='color' default ='0 0 0 1'>
              <description>The ambient color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
            </element>
            <element name ='diffuse' required ='0' type ='color' default ='0 0 0 1'>
              <description>The diffuse color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
            </element>
            <element name ='specular' required ='0' type ='color' default ='0 0 0 1'>
              <description>The specular color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
            </element>
            <element name ='emissive' required ='0' type ='color' default ='0 0 0 1'>
              <description>The emissive color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
            </element>
          </element>
          <element name ='geometry' required ='1'>
            <description>The shape of the visual or collision object.</description>
            <element name ='empty' required ='0'>
              <description>You can use the empty tag to make empty geometries.</description>
            </element>
            <element name ='box' required ='0'>
              <description>Box shape</description>
              <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
                <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
              </element>
            </element>
            <element name ='cylinder' required ='0'>
              <description>Cylinder shape</description>
              <element name ='radius' required ='1' type ='double' default ='1'>
                <description>Radius of the cylinder</description>
              </element>
              <element name ='length' required ='1' type ='double' default ='1'>
                <description>Length of the cylinder</description>
              </element>
            </element>
            <element name ='heightmap' required ='0'>
              <description>A heightmap based on a 2d grayscale image.</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>URI to a grayscale image file</description>
              </element>
              <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
                <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
              </element>
              <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
                <description>A position offset.</description>
              </element>
              <element name ='texture' required ='*'>
                <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
                <element name ='size' required ='1' type ='double' default ='10'>
                  <description>Size of the applied texture in meters.</description>
                </element>
                <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                  <description>Diffuse texture image filename</description>
                </element>
                <element name ='normal' required ='1' type ='string' default ='__default__'>
                  <description>Normalmap texture image filename</description>
                </element>
              </element>
              <element name ='blend' required ='*'>
                <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
                <element name ='min_height' required ='1' type ='double' default ='0'>
                  <description>Min height of a blend layer</description>
                </element>
                <element name ='fade_dist' required ='1' type ='double' default ='0'>
                  <description>Distance over which the blend occurs</description>
                </element>
              </element>
              <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
                <description>Set if the rendering engine will use terrain paging</description>
              </element>
              <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
                <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
              </element>
            </element>
            <element name ='image' required ='0'>
              <description>Extrude a set of boxes from a grayscale image.</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>URI of the grayscale image file</description>
              </element>
              <element name ='scale' required ='1' type ='double' default ='1'>
                <description>Scaling factor applied to the image</description>
              </element>
              <element name ='threshold' required ='1' type ='int' default ='200'>
                <description>Grayscale threshold</description>
              </element>
              <element name ='height' required ='1' type ='double' default ='1'>
                <description>Height of the extruded boxes</description>
              </element>
              <element name ='granularity' required ='1' type ='int' default ='1'>
                <description>The amount of error in the model</description>
              </element>
            </element>
            <element name ='mesh' required ='0'>
              <description>Mesh shape</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>Mesh uri</description>
              </element>
              <element name ='submesh' required ='0'>
                <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
                <element name ='name' required ='1' type ='string' default ='__default__'>
                  <description>Name of the submesh within the parent mesh</description>
                </element>
                <element name ='center' required ='0' type ='bool' default ='0'>
                  <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
                </element>
              </element>
              <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
                <description>Scaling factor applied to the mesh</description>
              </element>
            </element>
            <element name ='plane' required ='0'>
              <description>Plane shape</description>
              <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
                <description>Normal direction for the plane</description>
              </element>
              <element name ='size' required ='1' type ='vector2d' default ='1 1'>
                <description>Length of each side of the plane</description>
              </element>
            </element>
            <element name ='polyline' required ='0'>
              <description>Defines an extruded polyline shape</description>
              <element name ='point' required ='+' type ='vector2d' default ='0 0'>
                <description>A series of points that define the path of the polyline.</description>
              </element>
              <element name ='height' required ='1' type ='double' default ='1'>
                <description>Height of the polyline</description>
              </element>
            </element>
            <element name ='sphere' required ='0'>
              <description>Sphere shape</description>
              <element name ='radius' required ='1' type ='double' default ='1'>
                <description>radius of the sphere</description>
              </element>
            </element>
          </element>
          <element name ='plugin' required ='*'>
            <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the plugin, scoped to its parent.</description>
            </attribute>
            <attribute name ='filename' type ='string' default ='__default__' required ='1'>
              <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
            </attribute>
            <element copy_data ='true' required ='*'/>
          </element>
        </element>
        <element name ='sensor' required ='0'>
          <description>The sensor tag describes the type and properties of a sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the sensor. This name must not match another model in the model.</description>
          </attribute>
          <attribute name ='type' type ='string' default ='__default__' required ='1'>
            <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
          </attribute>
          <element name ='always_on' required ='0' type ='bool' default ='0'>
            <description>If true the sensor will always be updated according to the update rate.</description>
          </element>
          <element name ='update_rate' required ='0' type ='double' default ='0'>
            <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
          </element>
          <element name ='visualize' required ='0' type ='bool' default ='0'>
            <description>If true, the sensor is visualized in the GUI</description>
          </element>
          <element name ='topic' required ='0' type ='string' default ='__default__'>
            <description>Name of the topic on which data is published. This is necessary for visualization</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='plugin' required ='*'>
            <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the plugin, scoped to its parent.</description>
            </attribute>
            <attribute name ='filename' type ='string' default ='__default__' required ='1'>
              <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
            </attribute>
            <element copy_data ='true' required ='*'/>
          </element>
          <element name ='altimeter' required ='0'>
            <description>These elements are specific to an altimeter sensor.</description>
            <element name ='vertical_position' required ='0'>
              <description>Noise parameters for vertical position</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical_velocity' required ='0'>
              <description>Noise parameters for vertical velocity</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='camera' required ='0'>
            <description>These elements are specific to camera sensors.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='0'>
              <description>An optional name for the camera.</description>
            </attribute>
            <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
              <description>Horizontal field of view</description>
            </element>
            <element name ='image' required ='1'>
              <description>The image size in pixels and format.</description>
              <element name ='width' required ='1' type ='int' default ='320'>
                <description>Width in pixels</description>
              </element>
              <element name ='height' required ='1' type ='int' default ='240'>
                <description>Height in pixels</description>
              </element>
              <element name ='format' required ='0' type ='string' default ='R8G8B8'>
                <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
              </element>
            </element>
            <element name ='clip' required ='1'>
              <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
              <element name ='near' required ='1' type ='double' default ='0.1'>
                <description>Near clipping plane</description>
              </element>
              <element name ='far' required ='1' type ='double' default ='100'>
                <description>Far clipping plane</description>
              </element>
            </element>
            <element name ='save' required ='0'>
              <description>Enable or disable saving of camera frames.</description>
              <attribute name ='enabled' type ='bool' default ='0' required ='1'>
                <description>True = saving enabled</description>
              </attribute>
              <element name ='path' required ='1' type ='string' default ='__default__'>
                <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
              </element>
            </element>
            <element name ='depth_camera' required ='0'>
              <description>Depth camera parameters</description>
              <element name ='output' required ='1' type ='string' default ='depths'>
                <description>Type of output</description>
              </element>
            </element>
            <element name ='noise' required ='0'>
              <description>The properties of the noise model that should be applied to generated images</description>
              <element name ='type' required ='1' type ='string' default ='gaussian'>
                <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
              </element>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
            </element>
            <element name ='distortion' required ='0'>
              <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
              <element name ='k1' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k1</description>
              </element>
              <element name ='k2' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k2</description>
              </element>
              <element name ='k3' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k3</description>
              </element>
              <element name ='p1' required ='0' type ='double' default ='0'>
                <description>The tangential distortion coefficient p1</description>
              </element>
              <element name ='p2' required ='0' type ='double' default ='0'>
                <description>The tangential distortion coefficient p2</description>
              </element>
              <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
                <description>The distortion center or principal point</description>
              </element>
            </element>
            <element name ='lens' required ='0'>
              <description>Lens projection description</description>
              <element name ='type' required ='1' type ='string' default ='stereographic'>
                <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
              </element>
              <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
                <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
              </element>
              <element name ='custom_function' required ='0'>
                <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
                <element name ='c1' required ='0' type ='double' default ='1'>
                  <description>Linear scaling constant</description>
                </element>
                <element name ='c2' required ='0' type ='double' default ='1'>
                  <description>Angle scaling constant</description>
                </element>
                <element name ='c3' required ='0' type ='double' default ='0'>
                  <description>Angle offset constant</description>
                </element>
                <element name ='f' required ='0' type ='double' default ='1'>
                  <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
                </element>
                <element name ='fun' required ='1' type ='string' default ='tan'>
                  <description>Possible values are 'sin', 'tan' and 'id'</description>
                </element>
              </element>
              <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
                <description>Everything outside of the specified angle will be hidden, 90° by default</description>
              </element>
              <element name ='env_texture_size' required ='0' type ='int' default ='256'>
                <description>Resolution of the environment cube map used to draw the world</description>
              </element>
              <element name ='intrinsics' required ='0'>
                <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
                <element name ='fx' required ='1' type ='double' default ='277'>
                  <description>X focal length (in pixels, overrides horizontal_fov)</description>
                </element>
                <element name ='fy' required ='1' type ='double' default ='277'>
                  <description>Y focal length (in pixels, overrides horizontal_fov)</description>
                </element>
                <element name ='cx' required ='1' type ='double' default ='160'>
                  <description>X principal point (in pixels)</description>
                </element>
                <element name ='cy' required ='1' type ='double' default ='120'>
                  <description>Y principal point (in pixels)</description>
                </element>
                <element name ='s' required ='1' type ='double' default ='1'>
                  <description>XY axis skew</description>
                </element>
              </element>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='contact' required ='0'>
            <description>These elements are specific to the contact sensor.</description>
            <element name ='collision' required ='1' type ='string' default ='__default__'>
              <description>name of the collision element within a link that acts as the contact sensor.</description>
            </element>
            <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
              <description>Topic on which contact data is published.</description>
            </element>
          </element>
          <element name ='gps' required ='0'>
            <description>These elements are specific to the GPS sensor.</description>
            <element name ='position_sensing' required ='0'>
              <description>Parameters related to GPS position measurement.</description>
              <element name ='horizontal' required ='0'>
                <description>Noise parameters for horizontal position measurement, in units of meters.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description>Noise parameters for vertical position measurement, in units of meters.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='velocity_sensing' required ='0'>
              <description>Parameters related to GPS position measurement.</description>
              <element name ='horizontal' required ='0'>
                <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
          </element>
          <element name ='imu' required ='0'>
            <description>These elements are specific to the IMU sensor.</description>
            <element name ='orientation_reference_frame' required ='0'>
              <description></description>
              <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
                <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
              </element>
              <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
                <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
                <element name ='parent_frame' required ='0' type ='string' default =''>
                  <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                </element>
              </element>
              <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
                <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
                <element name ='parent_frame' required ='0' type ='string' default =''>
                  <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                </element>
              </element>
            </element>
            <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
              <description>Topic on which data is published.</description>
            </element>
            <element name ='angular_velocity' required ='0'>
              <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
              <element name ='x' required ='0'>
                <description>Angular velocity about the X axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='y' required ='0'>
                <description>Angular velocity about the Y axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='z' required ='0'>
                <description>Angular velocity about the Z axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='linear_acceleration' required ='0'>
              <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
              <element name ='x' required ='0'>
                <description>Linear acceleration about the X axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='y' required ='0'>
                <description>Linear acceleration about the Y axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='z' required ='0'>
                <description>Linear acceleration about the Z axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
          </element>
          <element name ='logical_camera' required ='0'>
            <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
            <element name ='near' required ='1' type ='double' default ='0'>
              <description>Near clipping distance of the view frustum</description>
            </element>
            <element name ='far' required ='1' type ='double' default ='1'>
              <description>Far clipping distance of the view frustum</description>
            </element>
            <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
              <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
            </element>
            <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
              <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
            </element>
          </element>
          <element name ='magnetometer' required ='0'>
            <description>These elements are specific to a Magnetometer sensor.</description>
            <element name ='x' required ='0'>
              <description>Parameters related to the body-frame X axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Parameters related to the body-frame Y axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Parameters related to the body-frame Z axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='ray' required ='0'>
            <description>These elements are specific to the ray (laser) sensor.</description>
            <element name ='scan' required ='1'>
              <description></description>
              <element name ='horizontal' required ='1'>
                <description></description>
                <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                  <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                </element>
                <element name ='resolution' required ='1' type ='double' default ='1'>
                  <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                </element>
                <element name ='min_angle' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='max_angle' required ='1' type ='double' default ='0'>
                  <description>Must be greater or equal to min_angle</description>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description></description>
                <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                  <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                </element>
                <element name ='resolution' required ='0' type ='double' default ='1'>
                  <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                </element>
                <element name ='min_angle' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='max_angle' required ='1' type ='double' default ='0'>
                  <description>Must be greater or equal to min_angle</description>
                </element>
              </element>
            </element>
            <element name ='range' required ='1'>
              <description>specifies range properties of each simulated ray</description>
              <element name ='min' required ='1' type ='double' default ='0'>
                <description>The minimum distance for each ray.</description>
              </element>
              <element name ='max' required ='1' type ='double' default ='0'>
                <description>The maximum distance for each ray.</description>
              </element>
              <element name ='resolution' required ='0' type ='double' default ='0'>
                <description>Linear resolution of each ray.</description>
              </element>
            </element>
            <element name ='noise' required ='0'>
              <description>The properties of the noise model that should be applied to generated scans</description>
              <element name ='type' required ='1' type ='string' default ='gaussian'>
                <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
              </element>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
            </element>
          </element>
          <element name ='rfidtag' required ='0'>
            <description></description>
          </element>
          <element name ='rfid' required ='0'>
            <description></description>
          </element>
          <element name ='sonar' required ='0'>
            <description>These elements are specific to the sonar sensor.</description>
            <element name ='geometry' required ='0' type ='string' default ='cone'>
              <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
            </element>
            <element name ='min' required ='1' type ='double' default ='0'>
              <description>Minimum range</description>
            </element>
            <element name ='max' required ='1' type ='double' default ='1'>
              <description>Max range</description>
            </element>
            <element name ='radius' required ='0' type ='double' default ='0.5'>
              <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
            </element>
          </element>
          <element name ='transceiver' required ='0'>
            <description>These elements are specific to a wireless transceiver.</description>
            <element name ='essid' required ='0' type ='string' default ='wireless'>
              <description>Service set identifier (network name)</description>
            </element>
            <element name ='frequency' required ='0' type ='double' default ='2442'>
              <description>Specifies the frequency of transmission in MHz</description>
            </element>
            <element name ='min_frequency' required ='0' type ='double' default ='2412'>
              <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
            </element>
            <element name ='max_frequency' required ='0' type ='double' default ='2484'>
              <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
            </element>
            <element name ='gain' required ='1' type ='double' default ='2.5'>
              <description>Specifies the antenna gain in dBi</description>
            </element>
            <element name ='power' required ='1' type ='double' default ='14.5'>
              <description>Specifies the transmission power in dBm</description>
            </element>
            <element name ='sensitivity' required ='0' type ='double' default ='-90'>
              <description>Mininum received signal power in dBm</description>
            </element>
          </element>
          <element name ='force_torque' required ='0'>
            <description>These elements are specific to the force torque sensor.</description>
            <element name ='frame' required ='0' type ='string' default ='child'>
              <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
            </element>
            <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
              <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
            </element>
          </element>
        </element>
        <element name ='projector' required ='0'>
          <description></description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Name of the projector</description>
          </attribute>
          <element name ='texture' required ='1' type ='string' default ='__default__'>
            <description>Texture name</description>
          </element>
          <element name ='fov' required ='0' type ='double' default ='0.785'>
            <description>Field of view</description>
          </element>
          <element name ='near_clip' required ='0' type ='double' default ='0.1'>
            <description>Near clip distance</description>
          </element>
          <element name ='far_clip' required ='0' type ='double' default ='10'>
            <description>far clip distance</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='plugin' required ='*'>
            <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the plugin, scoped to its parent.</description>
            </attribute>
            <attribute name ='filename' type ='string' default ='__default__' required ='1'>
              <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
            </attribute>
            <element copy_data ='true' required ='*'/>
          </element>
        </element>
        <element name ='audio_sink' required ='*'>
          <description>An audio sink.</description>
        </element>
        <element name ='audio_source' required ='*'>
          <description>An audio source.</description>
          <element name ='uri' required ='1' type ='string' default ='__default__'>
            <description>URI of the audio media.</description>
          </element>
          <element name ='pitch' required ='0' type ='double' default ='1'>
            <description>Pitch for the audio media, in Hz</description>
          </element>
          <element name ='gain' required ='0' type ='double' default ='1'>
            <description>Gain for the audio media, in dB.</description>
          </element>
          <element name ='contact' required ='0'>
            <description>List of collision objects that will trigger audio playback.</description>
            <element name ='collision' required ='+' type ='string' default ='__default__'>
              <description>Name of child collision element that will trigger audio playback.</description>
            </element>
          </element>
          <element name ='loop' required ='0' type ='bool' default ='0'>
            <description>True to make the audio source loop playback.</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='battery' required ='*'>
          <description>Description of a battery.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Unique name for the battery.</description>
          </attribute>
          <element name ='voltage' required ='1' type ='double' default ='0'>
            <description>Initial voltage in volts.</description>
          </element>
        </element>
        <element name ='light' required ='*'>
          <description>The light element describes a light source.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='0'>
            <description>A unique name for the light.</description>
          </attribute>
          <attribute name ='type' type ='string' default ='point' required ='1'>
            <description>The light type: point, directional, spot.</description>
          </attribute>
          <element name ='cast_shadows' required ='0' type ='bool' default ='0'>
            <description>When true, the light will cast shadows.</description>
          </element>
          <element name ='diffuse' required ='1' type ='color' default ='1 1 1 1'>
            <description>Diffuse light color</description>
          </element>
          <element name ='specular' required ='1' type ='color' default ='0.1 0.1 0.1 1'>
            <description>Specular light color</description>
          </element>
          <element name ='attenuation' required ='0'>
            <description>Light attenuation</description>
            <element name ='range' required ='1' type ='double' default ='10'>
              <description>Range of the light</description>
            </element>
            <element name ='linear' required ='0' type ='double' default ='1'>
              <description>The linear attenuation factor: 1 means attenuate evenly over the distance.</description>
            </element>
            <element name ='constant' required ='0' type ='double' default ='1'>
              <description>The constant attenuation factor: 1.0 means never attenuate, 0.0 is complete attenutation.</description>
            </element>
            <element name ='quadratic' required ='0' type ='double' default ='0'>
              <description>The quadratic attenuation factor: adds a curvature to the attenuation.</description>
            </element>
          </element>
          <element name ='direction' required ='1' type ='vector3' default ='0 0 -1'>
            <description>Direction of the light, only applicable for spot and directional lights.</description>
          </element>
          <element name ='spot' required ='0'>
            <description>Spot light parameters</description>
            <element name ='inner_angle' required ='1' type ='double' default ='0'>
              <description>Angle covered by the bright inner cone</description>
            </element>
            <element name ='outer_angle' required ='1' type ='double' default ='0'>
              <description>Angle covered by the outer cone</description>
            </element>
            <element name ='falloff' required ='1' type ='double' default ='0'>
              <description>The rate of falloff between the inner and outer cones. 1.0 means a linear falloff, less means slower falloff, higher means faster falloff.</description>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
      </element>
      <element name ='joint' required ='*'>
        <description>A joint connections two links with kinematic and dynamic properties.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the joint within the scope of the model.</description>
        </attribute>
        <attribute name ='type' type ='string' default ='__default__' required ='1'>
          <description>The type of joint, which must be one of the following: (revolute) a hinge joint that rotates on a single axis with either a fixed or continuous range of motion, (gearbox) geared revolute joints, (revolute2) same as two revolute joints connected in series, (prismatic) a sliding joint that slides along an axis with a limited range specified by upper and lower limits, (ball) a ball and socket joint, (screw) a single degree of freedom joint with coupled sliding and rotational motion, (universal) like a ball joint, but constrains one degree of freedom, (fixed) a joint with zero degrees of freedom that rigidly connects two links.</description>
        </attribute>
        <element name ='parent' required ='1' type ='string' default ='__default__'>
          <description>Name of the parent link</description>
        </element>
        <element name ='child' required ='1' type ='string' default ='__default__'>
          <description>Name of the child link</description>
        </element>
        <element name ='gearbox_ratio' required ='0' type ='double' default ='1'>
          <description>Parameter for gearbox joints. Given theta_1 and theta_2 defined in description for gearbox_reference_body, theta_2 = -gearbox_ratio * theta_1.</description>
        </element>
        <element name ='gearbox_reference_body' required ='0' type ='string' default ='__default__'>
          <description>Parameter for gearbox joints. Gearbox ratio is enforced over two joint angles. First joint angle (theta_1) is the angle from the gearbox_reference_body to the parent link in the direction of the axis element and the second joint angle (theta_2) is the angle from the gearbox_reference_body to the child link in the direction of the axis2 element.</description>
        </element>
        <element name ='thread_pitch' required ='0' type ='double' default ='1'>
          <description>Parameter for screw joints.</description>
        </element>
        <element name ='axis' required ='0'>
          <description>Parameters related to the axis of rotation for revolute joints, the axis of translation for prismatic joints.</description>
          <element name ='initial_position' required ='0' type ='double' default ='0'>
            <description>Default joint position for this joint axis.</description>
          </element>
          <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
            <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
          </element>
          <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
            <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
          </element>
          <element name ='dynamics' required ='0'>
            <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
            <element name ='damping' required ='0' type ='double' default ='0'>
              <description>The physical velocity dependent viscous damping coefficient of the joint.</description>
            </element>
            <element name ='friction' required ='0' type ='double' default ='0'>
              <description>The physical static friction value of the joint.</description>
            </element>
            <element name ='spring_reference' required ='1' type ='double' default ='0'>
              <description>The spring reference position for this joint axis.</description>
            </element>
            <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
              <description>The spring stiffness for this joint axis.</description>
            </element>
          </element>
          <element name ='limit' required ='1'>
            <description>specifies the limits of this joint</description>
            <element name ='lower' required ='1' type ='double' default ='-1e+16'>
              <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
            </element>
            <element name ='upper' required ='1' type ='double' default ='1e+16'>
              <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
            </element>
            <element name ='effort' required ='0' type ='double' default ='-1'>
              <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
            </element>
            <element name ='velocity' required ='0' type ='double' default ='-1'>
              <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
            </element>
            <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
              <description>Joint stop stiffness. Support physics engines: SimBody.</description>
            </element>
            <element name ='dissipation' required ='0' type ='double' default ='1'>
              <description>Joint stop dissipation.</description>
            </element>
          </element>
        </element>
        <element name ='axis2' required ='0'>
          <description>Parameters related to the second axis of rotation for revolute2 joints and universal joints.</description>
          <element name ='initial_position' required ='0' type ='double' default ='0'>
            <description>Default joint position for this joint axis.</description>
          </element>
          <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
            <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
          </element>
          <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
            <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
          </element>
          <element name ='dynamics' required ='0'>
            <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
            <element name ='damping' required ='0' type ='double' default ='0'>
              <description>The physical velocity dependent viscous damping coefficient of the joint. EXPERIMENTAL: if damping coefficient is negative and implicit_spring_damper is true, adaptive damping is used.</description>
            </element>
            <element name ='friction' required ='0' type ='double' default ='0'>
              <description>The physical static friction value of the joint.</description>
            </element>
            <element name ='spring_reference' required ='1' type ='double' default ='0'>
              <description>The spring reference position for this joint axis.</description>
            </element>
            <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
              <description>The spring stiffness for this joint axis.</description>
            </element>
          </element>
          <element name ='limit' required ='0'>
            <description></description>
            <element name ='lower' required ='0' type ='double' default ='-1e+16'>
              <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
            </element>
            <element name ='upper' required ='0' type ='double' default ='1e+16'>
              <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
            </element>
            <element name ='effort' required ='0' type ='double' default ='-1'>
              <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
            </element>
            <element name ='velocity' required ='0' type ='double' default ='-1'>
              <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
            </element>
            <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
              <description>Joint stop stiffness. Supported physics engines: SimBody.</description>
            </element>
            <element name ='dissipation' required ='0' type ='double' default ='1'>
              <description>Joint stop dissipation. Supported physics engines: SimBody.</description>
            </element>
          </element>
        </element>
        <element name ='physics' required ='0'>
          <description>Parameters that are specific to a certain physics engine.</description>
          <element name ='simbody' required ='0'>
            <description>Simbody specific parameters</description>
            <element name ='must_be_loop_joint' required ='0' type ='bool' default ='0'>
              <description>Force cut in the multibody graph at this joint.</description>
            </element>
          </element>
          <element name ='ode' required ='0'>
            <description>ODE specific parameters</description>
            <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
              <description>(DEPRECATION WARNING: In SDF 1.5 this tag will be replaced by the same tag directly under the physics-block. For now, this tag overrides the one outside of ode-block, but in SDF 1.5 this tag will be removed completely.) If provide feedback is set to true, ODE will compute the constraint forces at this joint.</description>
            </element>
            <element name ='cfm_damping' required ='0' type ='bool' default ='0'>
              <description>If cfm damping is set to true, ODE will use CFM to simulate damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active.</description>
            </element>
            <element name ='implicit_spring_damper' required ='0' type ='bool' default ='0'>
              <description>If implicit_spring_damper is set to true, ODE will use CFM, ERP to simulate stiffness and damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active. This replaces cfm_damping parameter in sdf 1.4.</description>
            </element>
            <element name ='fudge_factor' required ='0' type ='double' default ='0'>
              <description>Scale the excess for in a joint motor at joint limits. Should be between zero and one.</description>
            </element>
            <element name ='cfm' required ='0' type ='double' default ='0'>
              <description>Constraint force mixing for constrained directions</description>
            </element>
            <element name ='erp' required ='0' type ='double' default ='0.2'>
              <description>Error reduction parameter for constrained directions</description>
            </element>
            <element name ='bounce' required ='0' type ='double' default ='0'>
              <description>Bounciness of the limits</description>
            </element>
            <element name ='max_force' required ='0' type ='double' default ='0'>
              <description>Maximum force or torque used to reach the desired velocity.</description>
            </element>
            <element name ='velocity' required ='0' type ='double' default ='0'>
              <description>The desired velocity of the joint. Should only be set if you want the joint to move on load.</description>
            </element>
            <element name ='limit' required ='0'>
              <description></description>
              <element name ='cfm' required ='1' type ='double' default ='0'>
                <description>Constraint force mixing parameter used by the joint stop</description>
              </element>
              <element name ='erp' required ='1' type ='double' default ='0.2'>
                <description>Error reduction parameter used by the joint stop</description>
              </element>
            </element>
            <element name ='suspension' required ='0'>
              <description></description>
              <element name ='cfm' required ='1' type ='double' default ='0'>
                <description>Suspension constraint force mixing parameter</description>
              </element>
              <element name ='erp' required ='1' type ='double' default ='0.2'>
                <description>Suspension error reduction parameter</description>
              </element>
            </element>
          </element>
          <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
            <description>If provide feedback is set to true, physics engine will compute the constraint forces at this joint. For now, provide_feedback under ode block will override this tag and given user warning about the migration. provide_feedback under ode is scheduled to be removed in SDF 1.5.</description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='sensor' required ='0'>
          <description>The sensor tag describes the type and properties of a sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the sensor. This name must not match another model in the model.</description>
          </attribute>
          <attribute name ='type' type ='string' default ='__default__' required ='1'>
            <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
          </attribute>
          <element name ='always_on' required ='0' type ='bool' default ='0'>
            <description>If true the sensor will always be updated according to the update rate.</description>
          </element>
          <element name ='update_rate' required ='0' type ='double' default ='0'>
            <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
          </element>
          <element name ='visualize' required ='0' type ='bool' default ='0'>
            <description>If true, the sensor is visualized in the GUI</description>
          </element>
          <element name ='topic' required ='0' type ='string' default ='__default__'>
            <description>Name of the topic on which data is published. This is necessary for visualization</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='plugin' required ='*'>
            <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the plugin, scoped to its parent.</description>
            </attribute>
            <attribute name ='filename' type ='string' default ='__default__' required ='1'>
              <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
            </attribute>
            <element copy_data ='true' required ='*'/>
          </element>
          <element name ='altimeter' required ='0'>
            <description>These elements are specific to an altimeter sensor.</description>
            <element name ='vertical_position' required ='0'>
              <description>Noise parameters for vertical position</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical_velocity' required ='0'>
              <description>Noise parameters for vertical velocity</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='camera' required ='0'>
            <description>These elements are specific to camera sensors.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='0'>
              <description>An optional name for the camera.</description>
            </attribute>
            <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
              <description>Horizontal field of view</description>
            </element>
            <element name ='image' required ='1'>
              <description>The image size in pixels and format.</description>
              <element name ='width' required ='1' type ='int' default ='320'>
                <description>Width in pixels</description>
              </element>
              <element name ='height' required ='1' type ='int' default ='240'>
                <description>Height in pixels</description>
              </element>
              <element name ='format' required ='0' type ='string' default ='R8G8B8'>
                <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
              </element>
            </element>
            <element name ='clip' required ='1'>
              <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
              <element name ='near' required ='1' type ='double' default ='0.1'>
                <description>Near clipping plane</description>
              </element>
              <element name ='far' required ='1' type ='double' default ='100'>
                <description>Far clipping plane</description>
              </element>
            </element>
            <element name ='save' required ='0'>
              <description>Enable or disable saving of camera frames.</description>
              <attribute name ='enabled' type ='bool' default ='0' required ='1'>
                <description>True = saving enabled</description>
              </attribute>
              <element name ='path' required ='1' type ='string' default ='__default__'>
                <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
              </element>
            </element>
            <element name ='depth_camera' required ='0'>
              <description>Depth camera parameters</description>
              <element name ='output' required ='1' type ='string' default ='depths'>
                <description>Type of output</description>
              </element>
            </element>
            <element name ='noise' required ='0'>
              <description>The properties of the noise model that should be applied to generated images</description>
              <element name ='type' required ='1' type ='string' default ='gaussian'>
                <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
              </element>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
            </element>
            <element name ='distortion' required ='0'>
              <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
              <element name ='k1' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k1</description>
              </element>
              <element name ='k2' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k2</description>
              </element>
              <element name ='k3' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k3</description>
              </element>
              <element name ='p1' required ='0' type ='double' default ='0'>
                <description>The tangential distortion coefficient p1</description>
              </element>
              <element name ='p2' required ='0' type ='double' default ='0'>
                <description>The tangential distortion coefficient p2</description>
              </element>
              <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
                <description>The distortion center or principal point</description>
              </element>
            </element>
            <element name ='lens' required ='0'>
              <description>Lens projection description</description>
              <element name ='type' required ='1' type ='string' default ='stereographic'>
                <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
              </element>
              <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
                <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
              </element>
              <element name ='custom_function' required ='0'>
                <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
                <element name ='c1' required ='0' type ='double' default ='1'>
                  <description>Linear scaling constant</description>
                </element>
                <element name ='c2' required ='0' type ='double' default ='1'>
                  <description>Angle scaling constant</description>
                </element>
                <element name ='c3' required ='0' type ='double' default ='0'>
                  <description>Angle offset constant</description>
                </element>
                <element name ='f' required ='0' type ='double' default ='1'>
                  <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
                </element>
                <element name ='fun' required ='1' type ='string' default ='tan'>
                  <description>Possible values are 'sin', 'tan' and 'id'</description>
                </element>
              </element>
              <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
                <description>Everything outside of the specified angle will be hidden, 90° by default</description>
              </element>
              <element name ='env_texture_size' required ='0' type ='int' default ='256'>
                <description>Resolution of the environment cube map used to draw the world</description>
              </element>
              <element name ='intrinsics' required ='0'>
                <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
                <element name ='fx' required ='1' type ='double' default ='277'>
                  <description>X focal length (in pixels, overrides horizontal_fov)</description>
                </element>
                <element name ='fy' required ='1' type ='double' default ='277'>
                  <description>Y focal length (in pixels, overrides horizontal_fov)</description>
                </element>
                <element name ='cx' required ='1' type ='double' default ='160'>
                  <description>X principal point (in pixels)</description>
                </element>
                <element name ='cy' required ='1' type ='double' default ='120'>
                  <description>Y principal point (in pixels)</description>
                </element>
                <element name ='s' required ='1' type ='double' default ='1'>
                  <description>XY axis skew</description>
                </element>
              </element>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='contact' required ='0'>
            <description>These elements are specific to the contact sensor.</description>
            <element name ='collision' required ='1' type ='string' default ='__default__'>
              <description>name of the collision element within a link that acts as the contact sensor.</description>
            </element>
            <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
              <description>Topic on which contact data is published.</description>
            </element>
          </element>
          <element name ='gps' required ='0'>
            <description>These elements are specific to the GPS sensor.</description>
            <element name ='position_sensing' required ='0'>
              <description>Parameters related to GPS position measurement.</description>
              <element name ='horizontal' required ='0'>
                <description>Noise parameters for horizontal position measurement, in units of meters.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description>Noise parameters for vertical position measurement, in units of meters.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='velocity_sensing' required ='0'>
              <description>Parameters related to GPS position measurement.</description>
              <element name ='horizontal' required ='0'>
                <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
          </element>
          <element name ='imu' required ='0'>
            <description>These elements are specific to the IMU sensor.</description>
            <element name ='orientation_reference_frame' required ='0'>
              <description></description>
              <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
                <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
              </element>
              <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
                <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
                <element name ='parent_frame' required ='0' type ='string' default =''>
                  <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                </element>
              </element>
              <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
                <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
                <element name ='parent_frame' required ='0' type ='string' default =''>
                  <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                </element>
              </element>
            </element>
            <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
              <description>Topic on which data is published.</description>
            </element>
            <element name ='angular_velocity' required ='0'>
              <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
              <element name ='x' required ='0'>
                <description>Angular velocity about the X axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='y' required ='0'>
                <description>Angular velocity about the Y axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='z' required ='0'>
                <description>Angular velocity about the Z axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='linear_acceleration' required ='0'>
              <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
              <element name ='x' required ='0'>
                <description>Linear acceleration about the X axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='y' required ='0'>
                <description>Linear acceleration about the Y axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='z' required ='0'>
                <description>Linear acceleration about the Z axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
          </element>
          <element name ='logical_camera' required ='0'>
            <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
            <element name ='near' required ='1' type ='double' default ='0'>
              <description>Near clipping distance of the view frustum</description>
            </element>
            <element name ='far' required ='1' type ='double' default ='1'>
              <description>Far clipping distance of the view frustum</description>
            </element>
            <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
              <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
            </element>
            <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
              <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
            </element>
          </element>
          <element name ='magnetometer' required ='0'>
            <description>These elements are specific to a Magnetometer sensor.</description>
            <element name ='x' required ='0'>
              <description>Parameters related to the body-frame X axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Parameters related to the body-frame Y axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Parameters related to the body-frame Z axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='ray' required ='0'>
            <description>These elements are specific to the ray (laser) sensor.</description>
            <element name ='scan' required ='1'>
              <description></description>
              <element name ='horizontal' required ='1'>
                <description></description>
                <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                  <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                </element>
                <element name ='resolution' required ='1' type ='double' default ='1'>
                  <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                </element>
                <element name ='min_angle' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='max_angle' required ='1' type ='double' default ='0'>
                  <description>Must be greater or equal to min_angle</description>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description></description>
                <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                  <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                </element>
                <element name ='resolution' required ='0' type ='double' default ='1'>
                  <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                </element>
                <element name ='min_angle' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='max_angle' required ='1' type ='double' default ='0'>
                  <description>Must be greater or equal to min_angle</description>
                </element>
              </element>
            </element>
            <element name ='range' required ='1'>
              <description>specifies range properties of each simulated ray</description>
              <element name ='min' required ='1' type ='double' default ='0'>
                <description>The minimum distance for each ray.</description>
              </element>
              <element name ='max' required ='1' type ='double' default ='0'>
                <description>The maximum distance for each ray.</description>
              </element>
              <element name ='resolution' required ='0' type ='double' default ='0'>
                <description>Linear resolution of each ray.</description>
              </element>
            </element>
            <element name ='noise' required ='0'>
              <description>The properties of the noise model that should be applied to generated scans</description>
              <element name ='type' required ='1' type ='string' default ='gaussian'>
                <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
              </element>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
            </element>
          </element>
          <element name ='rfidtag' required ='0'>
            <description></description>
          </element>
          <element name ='rfid' required ='0'>
            <description></description>
          </element>
          <element name ='sonar' required ='0'>
            <description>These elements are specific to the sonar sensor.</description>
            <element name ='geometry' required ='0' type ='string' default ='cone'>
              <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
            </element>
            <element name ='min' required ='1' type ='double' default ='0'>
              <description>Minimum range</description>
            </element>
            <element name ='max' required ='1' type ='double' default ='1'>
              <description>Max range</description>
            </element>
            <element name ='radius' required ='0' type ='double' default ='0.5'>
              <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
            </element>
          </element>
          <element name ='transceiver' required ='0'>
            <description>These elements are specific to a wireless transceiver.</description>
            <element name ='essid' required ='0' type ='string' default ='wireless'>
              <description>Service set identifier (network name)</description>
            </element>
            <element name ='frequency' required ='0' type ='double' default ='2442'>
              <description>Specifies the frequency of transmission in MHz</description>
            </element>
            <element name ='min_frequency' required ='0' type ='double' default ='2412'>
              <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
            </element>
            <element name ='max_frequency' required ='0' type ='double' default ='2484'>
              <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
            </element>
            <element name ='gain' required ='1' type ='double' default ='2.5'>
              <description>Specifies the antenna gain in dBi</description>
            </element>
            <element name ='power' required ='1' type ='double' default ='14.5'>
              <description>Specifies the transmission power in dBm</description>
            </element>
            <element name ='sensitivity' required ='0' type ='double' default ='-90'>
              <description>Mininum received signal power in dBm</description>
            </element>
          </element>
          <element name ='force_torque' required ='0'>
            <description>These elements are specific to the force torque sensor.</description>
            <element name ='frame' required ='0' type ='string' default ='child'>
              <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
            </element>
            <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
              <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
            </element>
          </element>
        </element>
      </element>
      <element name ='plugin' required ='*'>
        <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the plugin, scoped to its parent.</description>
        </attribute>
        <attribute name ='filename' type ='string' default ='__default__' required ='1'>
          <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
        </attribute>
        <element copy_data ='true' required ='*'/>
      </element>
      <element name ='gripper' required ='*'>
        <description></description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description></description>
        </attribute>
        <element name ='grasp_check' required ='0'>
          <description></description>
          <element name ='detach_steps' required ='0' type ='int' default ='40'>
            <description></description>
          </element>
          <element name ='attach_steps' required ='0' type ='int' default ='20'>
            <description></description>
          </element>
          <element name ='min_contact_count' required ='0' type ='unsigned int' default ='2'>
            <description></description>
          </element>
        </element>
        <element name ='gripper_link' required ='+' type ='string' default ='__default__'>
          <description></description>
        </element>
        <element name ='palm_link' required ='1' type ='string' default ='__default__'>
          <description></description>
        </element>
      </element>
    </element>
    <element name ='actor' required ='*'>
      <description>A special kind of model which can have a scripted motion. This includes both global waypoint type animations and skeleton animations.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the actor.</description>
      </attribute>
      <element name ='static' required ='0' type ='bool' default ='1'>
        <description>(DEPRECATION WARNING: This is deprecated in 1.6 and removed in 1.7. Actors should be static, so this is always true.</description>
      </element>
      <element name ='skin' required ='0'>
        <description>Skin file which defines a visual and the underlying skeleton which moves it.</description>
        <element name ='filename' required ='1' type ='string' default ='__default__'>
          <description>Path to skin file, accepted formats: COLLADA, BVH.</description>
        </element>
        <element name ='scale' required ='0' type ='double' default ='1'>
          <description>Scale the skin's size.</description>
        </element>
      </element>
      <element name ='animation' required ='*'>
        <description>Animation file defines an animation for the skeleton in the skin. The skeleton must be compatible with the skin skeleton.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Unique name for animation.</description>
        </attribute>
        <element name ='filename' required ='1' type ='string' default ='__default__'>
          <description>Path to animation file. Accepted formats: COLLADA, BVH.</description>
        </element>
        <element name ='scale' required ='0' type ='double' default ='1'>
          <description>Scale for the animation skeleton.</description>
        </element>
        <element name ='interpolate_x' required ='0' type ='bool' default ='0'>
          <description>Set to true so the animation is interpolated on X.</description>
        </element>
      </element>
      <element name ='script' required ='1'>
        <description>Adds scripted trajectories to the actor.</description>
        <element name ='loop' required ='0' type ='bool' default ='1'>
          <description>Set this to true for the script to be repeated in a loop. For a fluid continuous motion, make sure the last waypoint matches the first one.</description>
        </element>
        <element name ='delay_start' required ='0' type ='double' default ='0'>
          <description>This is the time to wait before starting the script. If running in a loop, this time will be waited before starting each cycle.</description>
        </element>
        <element name ='auto_start' required ='0' type ='bool' default ='1'>
          <description>Set to true if the animation should start as soon as the simulation starts playing. It is useful to set this to false if the animation should only start playing only when triggered by a plugin, for example.</description>
        </element>
        <element name ='trajectory' required ='*'>
          <description>The trajectory contains a series of keyframes to be followed.</description>
          <attribute name ='id' type ='int' default ='0' required ='1'>
            <description>Unique id for a trajectory.</description>
          </attribute>
          <attribute name ='type' type ='string' default ='__default__' required ='1'>
            <description>If it matches the type of an animation, they will be played at the same time.</description>
          </attribute>
          <attribute name ='tension' type ='double' default ='0' required ='0'>
            <description>The tension of the trajectory spline. The default value of zero equates to a Catmull-Rom spline, which may also cause the animation to overshoot keyframes. A value of one will cause the animation to stick to the keyframes.</description>
          </attribute>
          <element name ='waypoint' required ='*'>
            <description>Each point in the trajectory.</description>
            <element name ='time' required ='1' type ='double' default ='0'>
              <description>The time in seconds, counted from the beginning of the script, when the pose should be reached.</description>
            </element>
            <element name ='pose' required ='1' type ='pose' default ='0 0 0 0 -0 0'>
              <description>The pose which should be reached at the given time.</description>
            </element>
          </element>
        </element>
      </element>
      <element name ='frame' required ='*'>
        <description>A frame of reference to which a pose is relative.</description>
        <attribute name ='name' type ='string' default ='' required ='1'>
          <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
        </attribute>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
      <element name ='link' required ='*'>
        <description>A physical link with inertia, collision, and visual properties. A link must be a child of a model, and any number of links may exist in a model.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the link within the scope of the model.</description>
        </attribute>
        <element name ='gravity' required ='0' type ='bool' default ='1'>
          <description>If true, the link is affected by gravity.</description>
        </element>
        <element name ='enable_wind' required ='0' type ='bool' default ='0'>
          <description>If true, the link is affected by the wind.</description>
        </element>
        <element name ='self_collide' required ='0' type ='bool' default ='0'>
          <description>If true, the link can collide with other links in the model. Two links within a model will collide if link1.self_collide OR link2.self_collide. Links connected by a joint will never collide.</description>
        </element>
        <element name ='kinematic' required ='0' type ='bool' default ='0'>
          <description>If true, the link is kinematic only</description>
        </element>
        <element name ='must_be_base_link' required ='0' type ='bool' default ='0'>
          <description>If true, the link will have 6DOF and be a direct child of world.</description>
        </element>
        <element name ='velocity_decay' required ='0'>
          <description>Exponential damping of the link's velocity.</description>
          <element name ='linear' required ='0' type ='double' default ='0'>
            <description>Linear damping</description>
          </element>
          <element name ='angular' required ='0' type ='double' default ='0'>
            <description>Angular damping</description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='inertial' required ='0'>
          <description>The inertial properties of the link.</description>
          <element name ='mass' required ='0' type ='double' default ='1'>
            <description>The mass of the link.</description>
          </element>
          <element name ='inertia' required ='0'>
            <description>The 3x3 rotational inertia matrix. Because the rotational inertia matrix is symmetric, only 6 above-diagonal elements of this matrix are specified here, using the attributes ixx, ixy, ixz, iyy, iyz, izz.</description>
            <element name ='ixx' required ='1' type ='double' default ='1'>
              <description></description>
            </element>
            <element name ='ixy' required ='1' type ='double' default ='0'>
              <description></description>
            </element>
            <element name ='ixz' required ='1' type ='double' default ='0'>
              <description></description>
            </element>
            <element name ='iyy' required ='1' type ='double' default ='1'>
              <description></description>
            </element>
            <element name ='iyz' required ='1' type ='double' default ='0'>
              <description></description>
            </element>
            <element name ='izz' required ='1' type ='double' default ='1'>
              <description></description>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>This is the pose of the inertial reference frame, relative to the specified reference frame. The origin of the inertial reference frame needs to be at the center of gravity. The axes of the inertial reference frame do not need to be aligned with the principal axes of the inertia.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='collision' required ='*'>
          <description>The collision properties of a link. Note that this can be different from the visual properties of a link, for example, simpler collision models are often used to reduce computation time.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Unique name for the collision element within the scope of the parent link.</description>
          </attribute>
          <element name ='laser_retro' required ='0' type ='double' default ='0'>
            <description>intensity value returned by laser sensor.</description>
          </element>
          <element name ='max_contacts' required ='0' type ='int' default ='10'>
            <description>Maximum number of contacts allowed between two entities. This value overrides the max_contacts element defined in physics.</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='geometry' required ='1'>
            <description>The shape of the visual or collision object.</description>
            <element name ='empty' required ='0'>
              <description>You can use the empty tag to make empty geometries.</description>
            </element>
            <element name ='box' required ='0'>
              <description>Box shape</description>
              <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
                <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
              </element>
            </element>
            <element name ='cylinder' required ='0'>
              <description>Cylinder shape</description>
              <element name ='radius' required ='1' type ='double' default ='1'>
                <description>Radius of the cylinder</description>
              </element>
              <element name ='length' required ='1' type ='double' default ='1'>
                <description>Length of the cylinder</description>
              </element>
            </element>
            <element name ='heightmap' required ='0'>
              <description>A heightmap based on a 2d grayscale image.</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>URI to a grayscale image file</description>
              </element>
              <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
                <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
              </element>
              <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
                <description>A position offset.</description>
              </element>
              <element name ='texture' required ='*'>
                <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
                <element name ='size' required ='1' type ='double' default ='10'>
                  <description>Size of the applied texture in meters.</description>
                </element>
                <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                  <description>Diffuse texture image filename</description>
                </element>
                <element name ='normal' required ='1' type ='string' default ='__default__'>
                  <description>Normalmap texture image filename</description>
                </element>
              </element>
              <element name ='blend' required ='*'>
                <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
                <element name ='min_height' required ='1' type ='double' default ='0'>
                  <description>Min height of a blend layer</description>
                </element>
                <element name ='fade_dist' required ='1' type ='double' default ='0'>
                  <description>Distance over which the blend occurs</description>
                </element>
              </element>
              <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
                <description>Set if the rendering engine will use terrain paging</description>
              </element>
              <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
                <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
              </element>
            </element>
            <element name ='image' required ='0'>
              <description>Extrude a set of boxes from a grayscale image.</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>URI of the grayscale image file</description>
              </element>
              <element name ='scale' required ='1' type ='double' default ='1'>
                <description>Scaling factor applied to the image</description>
              </element>
              <element name ='threshold' required ='1' type ='int' default ='200'>
                <description>Grayscale threshold</description>
              </element>
              <element name ='height' required ='1' type ='double' default ='1'>
                <description>Height of the extruded boxes</description>
              </element>
              <element name ='granularity' required ='1' type ='int' default ='1'>
                <description>The amount of error in the model</description>
              </element>
            </element>
            <element name ='mesh' required ='0'>
              <description>Mesh shape</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>Mesh uri</description>
              </element>
              <element name ='submesh' required ='0'>
                <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
                <element name ='name' required ='1' type ='string' default ='__default__'>
                  <description>Name of the submesh within the parent mesh</description>
                </element>
                <element name ='center' required ='0' type ='bool' default ='0'>
                  <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
                </element>
              </element>
              <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
                <description>Scaling factor applied to the mesh</description>
              </element>
            </element>
            <element name ='plane' required ='0'>
              <description>Plane shape</description>
              <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
                <description>Normal direction for the plane</description>
              </element>
              <element name ='size' required ='1' type ='vector2d' default ='1 1'>
                <description>Length of each side of the plane</description>
              </element>
            </element>
            <element name ='polyline' required ='0'>
              <description>Defines an extruded polyline shape</description>
              <element name ='point' required ='+' type ='vector2d' default ='0 0'>
                <description>A series of points that define the path of the polyline.</description>
              </element>
              <element name ='height' required ='1' type ='double' default ='1'>
                <description>Height of the polyline</description>
              </element>
            </element>
            <element name ='sphere' required ='0'>
              <description>Sphere shape</description>
              <element name ='radius' required ='1' type ='double' default ='1'>
                <description>radius of the sphere</description>
              </element>
            </element>
          </element>
          <element name ='surface' required ='0'>
            <description>The surface parameters</description>
            <element name ='bounce' required ='0'>
              <description></description>
              <element name ='restitution_coefficient' required ='0' type ='double' default ='0'>
                <description>Bounciness coefficient of restitution, from [0...1], where 0=no bounciness.</description>
              </element>
              <element name ='threshold' required ='0' type ='double' default ='100000'>
                <description>Bounce capture velocity, below which effective coefficient of restitution is 0.</description>
              </element>
            </element>
            <element name ='friction' required ='0'>
              <description></description>
              <element name ='torsional' required ='0'>
                <description>Parameters for torsional friction</description>
                <element name ='coefficient' required ='0' type ='double' default ='1'>
                  <description>Torsional friction coefficient, unitless maximum ratio of tangential stress to normal stress.</description>
                </element>
                <element name ='use_patch_radius' required ='0' type ='bool' default ='1'>
                  <description>If this flag is true, torsional friction is calculated using the "patch_radius" parameter. If this flag is set to false, "surface_radius" (R) and contact depth (d) are used to compute the patch radius as sqrt(R*d).</description>
                </element>
                <element name ='patch_radius' required ='0' type ='double' default ='0'>
                  <description>Radius of contact patch surface.</description>
                </element>
                <element name ='surface_radius' required ='0' type ='double' default ='0'>
                  <description>Surface radius on the point of contact.</description>
                </element>
                <element name ='ode' required ='0'>
                  <description>Torsional friction parameters for ODE</description>
                  <element name ='slip' required ='0' type ='double' default ='0'>
                    <description>Force dependent slip for torsional friction, equivalent to inverse of viscous damping coefficient with units of rad/s/(Nm). A slip value of 0 is infinitely viscous.</description>
                  </element>
                </element>
              </element>
              <element name ='ode' required ='0'>
                <description>ODE friction parameters</description>
                <element name ='mu' required ='0' type ='double' default ='1'>
                  <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
                </element>
                <element name ='mu2' required ='0' type ='double' default ='1'>
                  <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
                </element>
                <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                  <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the ODE Collide callback function will align the friction pyramid directions with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
                </element>
                <element name ='slip1' required ='0' type ='double' default ='0'>
                  <description>Force dependent slip in first friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
                </element>
                <element name ='slip2' required ='0' type ='double' default ='0'>
                  <description>Force dependent slip in second friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
                </element>
              </element>
              <element name ='bullet' required ='0'>
                <description></description>
                <element name ='friction' required ='0' type ='double' default ='1'>
                  <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
                </element>
                <element name ='friction2' required ='0' type ='double' default ='1'>
                  <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
                </element>
                <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                  <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the friction pyramid directions will be aligned with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
                </element>
                <element name ='rolling_friction' required ='0' type ='double' default ='1'>
                  <description>Coefficient of rolling friction</description>
                </element>
              </element>
            </element>
            <element name ='contact' required ='0'>
              <description></description>
              <element name ='collide_without_contact' required ='0' type ='bool' default ='0'>
                <description>Flag to disable contact force generation, while still allowing collision checks and contact visualization to occur.</description>
              </element>
              <element name ='collide_without_contact_bitmask' required ='0' type ='unsigned int' default ='1'>
                <description>Bitmask for collision filtering when collide_without_contact is on</description>
              </element>
              <element name ='collide_bitmask' required ='0' type ='unsigned int' default ='65535'>
                <description>Bitmask for collision filtering. This will override collide_without_contact</description>
              </element>
              <element name ='category_bitmask' required ='0' type ='unsigned int' default ='65535'>
                <description>Bitmask for category of collision filtering. Collision happens if ((category1 & collision2) | (category2 & collision1)) is not zero. If not specified, the category_bitmask should be interpreted as being the same as collide_bitmask.</description>
              </element>
              <element name ='poissons_ratio' required ='0' type ='double' default ='0.3'>
                <description>Poisson's ratio is the unitless ratio between transverse and axial strain. This value must lie between (-1, 0.5). Defaults to 0.3 for typical steel. Note typical silicone elastomers have Poisson's ratio near 0.49 ~ 0.50. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
              </element>
              <element name ='elastic_modulus' required ='0' type ='double' default ='-1'>
                <description>Young's Modulus in SI derived unit Pascal. Defaults to -1. If value is less or equal to zero, contact using elastic modulus (with Poisson's Ratio) is disabled. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
              </element>
              <element name ='ode' required ='0'>
                <description>ODE contact parameters</description>
                <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                  <description>Soft constraint force mixing.</description>
                </element>
                <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                  <description>Soft error reduction parameter</description>
                </element>
                <element name ='kp' required ='0' type ='double' default ='1e+12'>
                  <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
                </element>
                <element name ='kd' required ='0' type ='double' default ='1'>
                  <description>dynamically "damping"-equivalent coefficient for contact joints</description>
                </element>
                <element name ='max_vel' required ='0' type ='double' default ='0.01'>
                  <description>maximum contact correction velocity truncation term.</description>
                </element>
                <element name ='min_depth' required ='0' type ='double' default ='0'>
                  <description>minimum allowable depth before contact correction impulse is applied</description>
                </element>
              </element>
              <element name ='bullet' required ='0'>
                <description>Bullet contact parameters</description>
                <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                  <description>Soft constraint force mixing.</description>
                </element>
                <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                  <description>Soft error reduction parameter</description>
                </element>
                <element name ='kp' required ='0' type ='double' default ='1e+12'>
                  <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
                </element>
                <element name ='kd' required ='0' type ='double' default ='1'>
                  <description>dynamically "damping"-equivalent coefficient for contact joints</description>
                </element>
                <element name ='split_impulse' required ='1' type ='bool' default ='1'>
                  <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
                </element>
                <element name ='split_impulse_penetration_threshold' required ='1' type ='double' default ='-0.01'>
                  <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
                </element>
              </element>
            </element>
            <element name ='soft_contact' required ='0'>
              <description></description>
              <element name ='dart' required ='0'>
                <description>soft contact pamameters based on paper: http://www.cc.gatech.edu/graphics/projects/Sumit/homepage/papers/sigasia11/jain_softcontacts_siga11.pdf</description>
                <element name ='bone_attachment' required ='1' type ='double' default ='100'>
                  <description>This is variable k_v in the soft contacts paper. Its unit is N/m.</description>
                </element>
                <element name ='stiffness' required ='1' type ='double' default ='100'>
                  <description>This is variable k_e in the soft contacts paper. Its unit is N/m.</description>
                </element>
                <element name ='damping' required ='1' type ='double' default ='10'>
                  <description>Viscous damping of point velocity in body frame. Its unit is N/m/s.</description>
                </element>
                <element name ='flesh_mass_fraction' required ='1' type ='double' default ='0.05'>
                  <description>Fraction of mass to be distributed among deformable nodes.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='visual' required ='*'>
          <description>The visual properties of the link. This element specifies the shape of the object (box, cylinder, etc.) for visualization purposes.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Unique name for the visual element within the scope of the parent link.</description>
          </attribute>
          <element name ='cast_shadows' required ='0' type ='bool' default ='1'>
            <description>If true the visual will cast shadows.</description>
          </element>
          <element name ='laser_retro' required ='0' type ='double' default ='0'>
            <description>will be implemented in the future release.</description>
          </element>
          <element name ='transparency' required ='0' type ='double' default ='0'>
            <description>The amount of transparency( 0=opaque, 1 = fully transparent)</description>
          </element>
          <element name ='meta' required ='0'>
            <description>Optional meta information for the visual. The information contained within this element should be used to provide additional feedback to an end user.</description>
            <element name ='layer' required ='0' type ='int' default ='0'>
              <description>The layer in which this visual is displayed. The layer number is useful for programs, such as Gazebo, that put visuals in different layers for enhanced visualization.</description>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='material' required ='0'>
            <description>The material of the visual element.</description>
            <element name ='script' required ='0'>
              <description>Name of material from an installed script file. This will override the color element if the script exists.</description>
              <element name ='uri' required ='+' type ='string' default ='__default__'>
                <description>URI of the material script file</description>
              </element>
              <element name ='name' required ='1' type ='string' default ='__default__'>
                <description>Name of the script within the script file</description>
              </element>
            </element>
            <element name ='shader' required ='0'>
              <description></description>
              <attribute name ='type' type ='string' default ='pixel' required ='1'>
                <description>vertex, pixel, normal_map_objectspace, normal_map_tangentspace</description>
              </attribute>
              <element name ='normal_map' required ='0' type ='string' default ='__default__'>
                <description>filename of the normal map</description>
              </element>
            </element>
            <element name ='lighting' required ='0' type ='bool' default ='1'>
              <description>If false, dynamic lighting will be disabled</description>
            </element>
            <element name ='ambient' required ='0' type ='color' default ='0 0 0 1'>
              <description>The ambient color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
            </element>
            <element name ='diffuse' required ='0' type ='color' default ='0 0 0 1'>
              <description>The diffuse color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
            </element>
            <element name ='specular' required ='0' type ='color' default ='0 0 0 1'>
              <description>The specular color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
            </element>
            <element name ='emissive' required ='0' type ='color' default ='0 0 0 1'>
              <description>The emissive color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
            </element>
          </element>
          <element name ='geometry' required ='1'>
            <description>The shape of the visual or collision object.</description>
            <element name ='empty' required ='0'>
              <description>You can use the empty tag to make empty geometries.</description>
            </element>
            <element name ='box' required ='0'>
              <description>Box shape</description>
              <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
                <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
              </element>
            </element>
            <element name ='cylinder' required ='0'>
              <description>Cylinder shape</description>
              <element name ='radius' required ='1' type ='double' default ='1'>
                <description>Radius of the cylinder</description>
              </element>
              <element name ='length' required ='1' type ='double' default ='1'>
                <description>Length of the cylinder</description>
              </element>
            </element>
            <element name ='heightmap' required ='0'>
              <description>A heightmap based on a 2d grayscale image.</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>URI to a grayscale image file</description>
              </element>
              <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
                <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
              </element>
              <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
                <description>A position offset.</description>
              </element>
              <element name ='texture' required ='*'>
                <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
                <element name ='size' required ='1' type ='double' default ='10'>
                  <description>Size of the applied texture in meters.</description>
                </element>
                <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                  <description>Diffuse texture image filename</description>
                </element>
                <element name ='normal' required ='1' type ='string' default ='__default__'>
                  <description>Normalmap texture image filename</description>
                </element>
              </element>
              <element name ='blend' required ='*'>
                <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
                <element name ='min_height' required ='1' type ='double' default ='0'>
                  <description>Min height of a blend layer</description>
                </element>
                <element name ='fade_dist' required ='1' type ='double' default ='0'>
                  <description>Distance over which the blend occurs</description>
                </element>
              </element>
              <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
                <description>Set if the rendering engine will use terrain paging</description>
              </element>
              <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
                <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
              </element>
            </element>
            <element name ='image' required ='0'>
              <description>Extrude a set of boxes from a grayscale image.</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>URI of the grayscale image file</description>
              </element>
              <element name ='scale' required ='1' type ='double' default ='1'>
                <description>Scaling factor applied to the image</description>
              </element>
              <element name ='threshold' required ='1' type ='int' default ='200'>
                <description>Grayscale threshold</description>
              </element>
              <element name ='height' required ='1' type ='double' default ='1'>
                <description>Height of the extruded boxes</description>
              </element>
              <element name ='granularity' required ='1' type ='int' default ='1'>
                <description>The amount of error in the model</description>
              </element>
            </element>
            <element name ='mesh' required ='0'>
              <description>Mesh shape</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>Mesh uri</description>
              </element>
              <element name ='submesh' required ='0'>
                <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
                <element name ='name' required ='1' type ='string' default ='__default__'>
                  <description>Name of the submesh within the parent mesh</description>
                </element>
                <element name ='center' required ='0' type ='bool' default ='0'>
                  <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
                </element>
              </element>
              <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
                <description>Scaling factor applied to the mesh</description>
              </element>
            </element>
            <element name ='plane' required ='0'>
              <description>Plane shape</description>
              <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
                <description>Normal direction for the plane</description>
              </element>
              <element name ='size' required ='1' type ='vector2d' default ='1 1'>
                <description>Length of each side of the plane</description>
              </element>
            </element>
            <element name ='polyline' required ='0'>
              <description>Defines an extruded polyline shape</description>
              <element name ='point' required ='+' type ='vector2d' default ='0 0'>
                <description>A series of points that define the path of the polyline.</description>
              </element>
              <element name ='height' required ='1' type ='double' default ='1'>
                <description>Height of the polyline</description>
              </element>
            </element>
            <element name ='sphere' required ='0'>
              <description>Sphere shape</description>
              <element name ='radius' required ='1' type ='double' default ='1'>
                <description>radius of the sphere</description>
              </element>
            </element>
          </element>
          <element name ='plugin' required ='*'>
            <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the plugin, scoped to its parent.</description>
            </attribute>
            <attribute name ='filename' type ='string' default ='__default__' required ='1'>
              <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
            </attribute>
            <element copy_data ='true' required ='*'/>
          </element>
        </element>
        <element name ='sensor' required ='0'>
          <description>The sensor tag describes the type and properties of a sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the sensor. This name must not match another model in the model.</description>
          </attribute>
          <attribute name ='type' type ='string' default ='__default__' required ='1'>
            <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
          </attribute>
          <element name ='always_on' required ='0' type ='bool' default ='0'>
            <description>If true the sensor will always be updated according to the update rate.</description>
          </element>
          <element name ='update_rate' required ='0' type ='double' default ='0'>
            <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
          </element>
          <element name ='visualize' required ='0' type ='bool' default ='0'>
            <description>If true, the sensor is visualized in the GUI</description>
          </element>
          <element name ='topic' required ='0' type ='string' default ='__default__'>
            <description>Name of the topic on which data is published. This is necessary for visualization</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='plugin' required ='*'>
            <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the plugin, scoped to its parent.</description>
            </attribute>
            <attribute name ='filename' type ='string' default ='__default__' required ='1'>
              <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
            </attribute>
            <element copy_data ='true' required ='*'/>
          </element>
          <element name ='altimeter' required ='0'>
            <description>These elements are specific to an altimeter sensor.</description>
            <element name ='vertical_position' required ='0'>
              <description>Noise parameters for vertical position</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical_velocity' required ='0'>
              <description>Noise parameters for vertical velocity</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='camera' required ='0'>
            <description>These elements are specific to camera sensors.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='0'>
              <description>An optional name for the camera.</description>
            </attribute>
            <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
              <description>Horizontal field of view</description>
            </element>
            <element name ='image' required ='1'>
              <description>The image size in pixels and format.</description>
              <element name ='width' required ='1' type ='int' default ='320'>
                <description>Width in pixels</description>
              </element>
              <element name ='height' required ='1' type ='int' default ='240'>
                <description>Height in pixels</description>
              </element>
              <element name ='format' required ='0' type ='string' default ='R8G8B8'>
                <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
              </element>
            </element>
            <element name ='clip' required ='1'>
              <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
              <element name ='near' required ='1' type ='double' default ='0.1'>
                <description>Near clipping plane</description>
              </element>
              <element name ='far' required ='1' type ='double' default ='100'>
                <description>Far clipping plane</description>
              </element>
            </element>
            <element name ='save' required ='0'>
              <description>Enable or disable saving of camera frames.</description>
              <attribute name ='enabled' type ='bool' default ='0' required ='1'>
                <description>True = saving enabled</description>
              </attribute>
              <element name ='path' required ='1' type ='string' default ='__default__'>
                <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
              </element>
            </element>
            <element name ='depth_camera' required ='0'>
              <description>Depth camera parameters</description>
              <element name ='output' required ='1' type ='string' default ='depths'>
                <description>Type of output</description>
              </element>
            </element>
            <element name ='noise' required ='0'>
              <description>The properties of the noise model that should be applied to generated images</description>
              <element name ='type' required ='1' type ='string' default ='gaussian'>
                <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
              </element>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
            </element>
            <element name ='distortion' required ='0'>
              <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
              <element name ='k1' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k1</description>
              </element>
              <element name ='k2' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k2</description>
              </element>
              <element name ='k3' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k3</description>
              </element>
              <element name ='p1' required ='0' type ='double' default ='0'>
                <description>The tangential distortion coefficient p1</description>
              </element>
              <element name ='p2' required ='0' type ='double' default ='0'>
                <description>The tangential distortion coefficient p2</description>
              </element>
              <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
                <description>The distortion center or principal point</description>
              </element>
            </element>
            <element name ='lens' required ='0'>
              <description>Lens projection description</description>
              <element name ='type' required ='1' type ='string' default ='stereographic'>
                <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
              </element>
              <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
                <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
              </element>
              <element name ='custom_function' required ='0'>
                <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
                <element name ='c1' required ='0' type ='double' default ='1'>
                  <description>Linear scaling constant</description>
                </element>
                <element name ='c2' required ='0' type ='double' default ='1'>
                  <description>Angle scaling constant</description>
                </element>
                <element name ='c3' required ='0' type ='double' default ='0'>
                  <description>Angle offset constant</description>
                </element>
                <element name ='f' required ='0' type ='double' default ='1'>
                  <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
                </element>
                <element name ='fun' required ='1' type ='string' default ='tan'>
                  <description>Possible values are 'sin', 'tan' and 'id'</description>
                </element>
              </element>
              <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
                <description>Everything outside of the specified angle will be hidden, 90° by default</description>
              </element>
              <element name ='env_texture_size' required ='0' type ='int' default ='256'>
                <description>Resolution of the environment cube map used to draw the world</description>
              </element>
              <element name ='intrinsics' required ='0'>
                <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
                <element name ='fx' required ='1' type ='double' default ='277'>
                  <description>X focal length (in pixels, overrides horizontal_fov)</description>
                </element>
                <element name ='fy' required ='1' type ='double' default ='277'>
                  <description>Y focal length (in pixels, overrides horizontal_fov)</description>
                </element>
                <element name ='cx' required ='1' type ='double' default ='160'>
                  <description>X principal point (in pixels)</description>
                </element>
                <element name ='cy' required ='1' type ='double' default ='120'>
                  <description>Y principal point (in pixels)</description>
                </element>
                <element name ='s' required ='1' type ='double' default ='1'>
                  <description>XY axis skew</description>
                </element>
              </element>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='contact' required ='0'>
            <description>These elements are specific to the contact sensor.</description>
            <element name ='collision' required ='1' type ='string' default ='__default__'>
              <description>name of the collision element within a link that acts as the contact sensor.</description>
            </element>
            <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
              <description>Topic on which contact data is published.</description>
            </element>
          </element>
          <element name ='gps' required ='0'>
            <description>These elements are specific to the GPS sensor.</description>
            <element name ='position_sensing' required ='0'>
              <description>Parameters related to GPS position measurement.</description>
              <element name ='horizontal' required ='0'>
                <description>Noise parameters for horizontal position measurement, in units of meters.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description>Noise parameters for vertical position measurement, in units of meters.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='velocity_sensing' required ='0'>
              <description>Parameters related to GPS position measurement.</description>
              <element name ='horizontal' required ='0'>
                <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
          </element>
          <element name ='imu' required ='0'>
            <description>These elements are specific to the IMU sensor.</description>
            <element name ='orientation_reference_frame' required ='0'>
              <description></description>
              <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
                <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
              </element>
              <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
                <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
                <element name ='parent_frame' required ='0' type ='string' default =''>
                  <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                </element>
              </element>
              <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
                <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
                <element name ='parent_frame' required ='0' type ='string' default =''>
                  <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                </element>
              </element>
            </element>
            <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
              <description>Topic on which data is published.</description>
            </element>
            <element name ='angular_velocity' required ='0'>
              <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
              <element name ='x' required ='0'>
                <description>Angular velocity about the X axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='y' required ='0'>
                <description>Angular velocity about the Y axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='z' required ='0'>
                <description>Angular velocity about the Z axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='linear_acceleration' required ='0'>
              <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
              <element name ='x' required ='0'>
                <description>Linear acceleration about the X axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='y' required ='0'>
                <description>Linear acceleration about the Y axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='z' required ='0'>
                <description>Linear acceleration about the Z axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
          </element>
          <element name ='logical_camera' required ='0'>
            <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
            <element name ='near' required ='1' type ='double' default ='0'>
              <description>Near clipping distance of the view frustum</description>
            </element>
            <element name ='far' required ='1' type ='double' default ='1'>
              <description>Far clipping distance of the view frustum</description>
            </element>
            <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
              <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
            </element>
            <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
              <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
            </element>
          </element>
          <element name ='magnetometer' required ='0'>
            <description>These elements are specific to a Magnetometer sensor.</description>
            <element name ='x' required ='0'>
              <description>Parameters related to the body-frame X axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Parameters related to the body-frame Y axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Parameters related to the body-frame Z axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='ray' required ='0'>
            <description>These elements are specific to the ray (laser) sensor.</description>
            <element name ='scan' required ='1'>
              <description></description>
              <element name ='horizontal' required ='1'>
                <description></description>
                <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                  <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                </element>
                <element name ='resolution' required ='1' type ='double' default ='1'>
                  <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                </element>
                <element name ='min_angle' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='max_angle' required ='1' type ='double' default ='0'>
                  <description>Must be greater or equal to min_angle</description>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description></description>
                <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                  <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                </element>
                <element name ='resolution' required ='0' type ='double' default ='1'>
                  <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                </element>
                <element name ='min_angle' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='max_angle' required ='1' type ='double' default ='0'>
                  <description>Must be greater or equal to min_angle</description>
                </element>
              </element>
            </element>
            <element name ='range' required ='1'>
              <description>specifies range properties of each simulated ray</description>
              <element name ='min' required ='1' type ='double' default ='0'>
                <description>The minimum distance for each ray.</description>
              </element>
              <element name ='max' required ='1' type ='double' default ='0'>
                <description>The maximum distance for each ray.</description>
              </element>
              <element name ='resolution' required ='0' type ='double' default ='0'>
                <description>Linear resolution of each ray.</description>
              </element>
            </element>
            <element name ='noise' required ='0'>
              <description>The properties of the noise model that should be applied to generated scans</description>
              <element name ='type' required ='1' type ='string' default ='gaussian'>
                <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
              </element>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
            </element>
          </element>
          <element name ='rfidtag' required ='0'>
            <description></description>
          </element>
          <element name ='rfid' required ='0'>
            <description></description>
          </element>
          <element name ='sonar' required ='0'>
            <description>These elements are specific to the sonar sensor.</description>
            <element name ='geometry' required ='0' type ='string' default ='cone'>
              <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
            </element>
            <element name ='min' required ='1' type ='double' default ='0'>
              <description>Minimum range</description>
            </element>
            <element name ='max' required ='1' type ='double' default ='1'>
              <description>Max range</description>
            </element>
            <element name ='radius' required ='0' type ='double' default ='0.5'>
              <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
            </element>
          </element>
          <element name ='transceiver' required ='0'>
            <description>These elements are specific to a wireless transceiver.</description>
            <element name ='essid' required ='0' type ='string' default ='wireless'>
              <description>Service set identifier (network name)</description>
            </element>
            <element name ='frequency' required ='0' type ='double' default ='2442'>
              <description>Specifies the frequency of transmission in MHz</description>
            </element>
            <element name ='min_frequency' required ='0' type ='double' default ='2412'>
              <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
            </element>
            <element name ='max_frequency' required ='0' type ='double' default ='2484'>
              <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
            </element>
            <element name ='gain' required ='1' type ='double' default ='2.5'>
              <description>Specifies the antenna gain in dBi</description>
            </element>
            <element name ='power' required ='1' type ='double' default ='14.5'>
              <description>Specifies the transmission power in dBm</description>
            </element>
            <element name ='sensitivity' required ='0' type ='double' default ='-90'>
              <description>Mininum received signal power in dBm</description>
            </element>
          </element>
          <element name ='force_torque' required ='0'>
            <description>These elements are specific to the force torque sensor.</description>
            <element name ='frame' required ='0' type ='string' default ='child'>
              <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
            </element>
            <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
              <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
            </element>
          </element>
        </element>
        <element name ='projector' required ='0'>
          <description></description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Name of the projector</description>
          </attribute>
          <element name ='texture' required ='1' type ='string' default ='__default__'>
            <description>Texture name</description>
          </element>
          <element name ='fov' required ='0' type ='double' default ='0.785'>
            <description>Field of view</description>
          </element>
          <element name ='near_clip' required ='0' type ='double' default ='0.1'>
            <description>Near clip distance</description>
          </element>
          <element name ='far_clip' required ='0' type ='double' default ='10'>
            <description>far clip distance</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='plugin' required ='*'>
            <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the plugin, scoped to its parent.</description>
            </attribute>
            <attribute name ='filename' type ='string' default ='__default__' required ='1'>
              <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
            </attribute>
            <element copy_data ='true' required ='*'/>
          </element>
        </element>
        <element name ='audio_sink' required ='*'>
          <description>An audio sink.</description>
        </element>
        <element name ='audio_source' required ='*'>
          <description>An audio source.</description>
          <element name ='uri' required ='1' type ='string' default ='__default__'>
            <description>URI of the audio media.</description>
          </element>
          <element name ='pitch' required ='0' type ='double' default ='1'>
            <description>Pitch for the audio media, in Hz</description>
          </element>
          <element name ='gain' required ='0' type ='double' default ='1'>
            <description>Gain for the audio media, in dB.</description>
          </element>
          <element name ='contact' required ='0'>
            <description>List of collision objects that will trigger audio playback.</description>
            <element name ='collision' required ='+' type ='string' default ='__default__'>
              <description>Name of child collision element that will trigger audio playback.</description>
            </element>
          </element>
          <element name ='loop' required ='0' type ='bool' default ='0'>
            <description>True to make the audio source loop playback.</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='battery' required ='*'>
          <description>Description of a battery.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Unique name for the battery.</description>
          </attribute>
          <element name ='voltage' required ='1' type ='double' default ='0'>
            <description>Initial voltage in volts.</description>
          </element>
        </element>
        <element name ='light' required ='*'>
          <description>The light element describes a light source.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='0'>
            <description>A unique name for the light.</description>
          </attribute>
          <attribute name ='type' type ='string' default ='point' required ='1'>
            <description>The light type: point, directional, spot.</description>
          </attribute>
          <element name ='cast_shadows' required ='0' type ='bool' default ='0'>
            <description>When true, the light will cast shadows.</description>
          </element>
          <element name ='diffuse' required ='1' type ='color' default ='1 1 1 1'>
            <description>Diffuse light color</description>
          </element>
          <element name ='specular' required ='1' type ='color' default ='0.1 0.1 0.1 1'>
            <description>Specular light color</description>
          </element>
          <element name ='attenuation' required ='0'>
            <description>Light attenuation</description>
            <element name ='range' required ='1' type ='double' default ='10'>
              <description>Range of the light</description>
            </element>
            <element name ='linear' required ='0' type ='double' default ='1'>
              <description>The linear attenuation factor: 1 means attenuate evenly over the distance.</description>
            </element>
            <element name ='constant' required ='0' type ='double' default ='1'>
              <description>The constant attenuation factor: 1.0 means never attenuate, 0.0 is complete attenutation.</description>
            </element>
            <element name ='quadratic' required ='0' type ='double' default ='0'>
              <description>The quadratic attenuation factor: adds a curvature to the attenuation.</description>
            </element>
          </element>
          <element name ='direction' required ='1' type ='vector3' default ='0 0 -1'>
            <description>Direction of the light, only applicable for spot and directional lights.</description>
          </element>
          <element name ='spot' required ='0'>
            <description>Spot light parameters</description>
            <element name ='inner_angle' required ='1' type ='double' default ='0'>
              <description>Angle covered by the bright inner cone</description>
            </element>
            <element name ='outer_angle' required ='1' type ='double' default ='0'>
              <description>Angle covered by the outer cone</description>
            </element>
            <element name ='falloff' required ='1' type ='double' default ='0'>
              <description>The rate of falloff between the inner and outer cones. 1.0 means a linear falloff, less means slower falloff, higher means faster falloff.</description>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
      </element>
      <element name ='joint' required ='*'>
        <description>A joint connections two links with kinematic and dynamic properties.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the joint within the scope of the model.</description>
        </attribute>
        <attribute name ='type' type ='string' default ='__default__' required ='1'>
          <description>The type of joint, which must be one of the following: (revolute) a hinge joint that rotates on a single axis with either a fixed or continuous range of motion, (gearbox) geared revolute joints, (revolute2) same as two revolute joints connected in series, (prismatic) a sliding joint that slides along an axis with a limited range specified by upper and lower limits, (ball) a ball and socket joint, (screw) a single degree of freedom joint with coupled sliding and rotational motion, (universal) like a ball joint, but constrains one degree of freedom, (fixed) a joint with zero degrees of freedom that rigidly connects two links.</description>
        </attribute>
        <element name ='parent' required ='1' type ='string' default ='__default__'>
          <description>Name of the parent link</description>
        </element>
        <element name ='child' required ='1' type ='string' default ='__default__'>
          <description>Name of the child link</description>
        </element>
        <element name ='gearbox_ratio' required ='0' type ='double' default ='1'>
          <description>Parameter for gearbox joints. Given theta_1 and theta_2 defined in description for gearbox_reference_body, theta_2 = -gearbox_ratio * theta_1.</description>
        </element>
        <element name ='gearbox_reference_body' required ='0' type ='string' default ='__default__'>
          <description>Parameter for gearbox joints. Gearbox ratio is enforced over two joint angles. First joint angle (theta_1) is the angle from the gearbox_reference_body to the parent link in the direction of the axis element and the second joint angle (theta_2) is the angle from the gearbox_reference_body to the child link in the direction of the axis2 element.</description>
        </element>
        <element name ='thread_pitch' required ='0' type ='double' default ='1'>
          <description>Parameter for screw joints.</description>
        </element>
        <element name ='axis' required ='0'>
          <description>Parameters related to the axis of rotation for revolute joints, the axis of translation for prismatic joints.</description>
          <element name ='initial_position' required ='0' type ='double' default ='0'>
            <description>Default joint position for this joint axis.</description>
          </element>
          <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
            <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
          </element>
          <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
            <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
          </element>
          <element name ='dynamics' required ='0'>
            <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
            <element name ='damping' required ='0' type ='double' default ='0'>
              <description>The physical velocity dependent viscous damping coefficient of the joint.</description>
            </element>
            <element name ='friction' required ='0' type ='double' default ='0'>
              <description>The physical static friction value of the joint.</description>
            </element>
            <element name ='spring_reference' required ='1' type ='double' default ='0'>
              <description>The spring reference position for this joint axis.</description>
            </element>
            <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
              <description>The spring stiffness for this joint axis.</description>
            </element>
          </element>
          <element name ='limit' required ='1'>
            <description>specifies the limits of this joint</description>
            <element name ='lower' required ='1' type ='double' default ='-1e+16'>
              <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
            </element>
            <element name ='upper' required ='1' type ='double' default ='1e+16'>
              <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
            </element>
            <element name ='effort' required ='0' type ='double' default ='-1'>
              <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
            </element>
            <element name ='velocity' required ='0' type ='double' default ='-1'>
              <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
            </element>
            <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
              <description>Joint stop stiffness. Support physics engines: SimBody.</description>
            </element>
            <element name ='dissipation' required ='0' type ='double' default ='1'>
              <description>Joint stop dissipation.</description>
            </element>
          </element>
        </element>
        <element name ='axis2' required ='0'>
          <description>Parameters related to the second axis of rotation for revolute2 joints and universal joints.</description>
          <element name ='initial_position' required ='0' type ='double' default ='0'>
            <description>Default joint position for this joint axis.</description>
          </element>
          <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
            <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
          </element>
          <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
            <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
          </element>
          <element name ='dynamics' required ='0'>
            <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
            <element name ='damping' required ='0' type ='double' default ='0'>
              <description>The physical velocity dependent viscous damping coefficient of the joint. EXPERIMENTAL: if damping coefficient is negative and implicit_spring_damper is true, adaptive damping is used.</description>
            </element>
            <element name ='friction' required ='0' type ='double' default ='0'>
              <description>The physical static friction value of the joint.</description>
            </element>
            <element name ='spring_reference' required ='1' type ='double' default ='0'>
              <description>The spring reference position for this joint axis.</description>
            </element>
            <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
              <description>The spring stiffness for this joint axis.</description>
            </element>
          </element>
          <element name ='limit' required ='0'>
            <description></description>
            <element name ='lower' required ='0' type ='double' default ='-1e+16'>
              <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
            </element>
            <element name ='upper' required ='0' type ='double' default ='1e+16'>
              <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
            </element>
            <element name ='effort' required ='0' type ='double' default ='-1'>
              <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
            </element>
            <element name ='velocity' required ='0' type ='double' default ='-1'>
              <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
            </element>
            <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
              <description>Joint stop stiffness. Supported physics engines: SimBody.</description>
            </element>
            <element name ='dissipation' required ='0' type ='double' default ='1'>
              <description>Joint stop dissipation. Supported physics engines: SimBody.</description>
            </element>
          </element>
        </element>
        <element name ='physics' required ='0'>
          <description>Parameters that are specific to a certain physics engine.</description>
          <element name ='simbody' required ='0'>
            <description>Simbody specific parameters</description>
            <element name ='must_be_loop_joint' required ='0' type ='bool' default ='0'>
              <description>Force cut in the multibody graph at this joint.</description>
            </element>
          </element>
          <element name ='ode' required ='0'>
            <description>ODE specific parameters</description>
            <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
              <description>(DEPRECATION WARNING: In SDF 1.5 this tag will be replaced by the same tag directly under the physics-block. For now, this tag overrides the one outside of ode-block, but in SDF 1.5 this tag will be removed completely.) If provide feedback is set to true, ODE will compute the constraint forces at this joint.</description>
            </element>
            <element name ='cfm_damping' required ='0' type ='bool' default ='0'>
              <description>If cfm damping is set to true, ODE will use CFM to simulate damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active.</description>
            </element>
            <element name ='implicit_spring_damper' required ='0' type ='bool' default ='0'>
              <description>If implicit_spring_damper is set to true, ODE will use CFM, ERP to simulate stiffness and damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active. This replaces cfm_damping parameter in sdf 1.4.</description>
            </element>
            <element name ='fudge_factor' required ='0' type ='double' default ='0'>
              <description>Scale the excess for in a joint motor at joint limits. Should be between zero and one.</description>
            </element>
            <element name ='cfm' required ='0' type ='double' default ='0'>
              <description>Constraint force mixing for constrained directions</description>
            </element>
            <element name ='erp' required ='0' type ='double' default ='0.2'>
              <description>Error reduction parameter for constrained directions</description>
            </element>
            <element name ='bounce' required ='0' type ='double' default ='0'>
              <description>Bounciness of the limits</description>
            </element>
            <element name ='max_force' required ='0' type ='double' default ='0'>
              <description>Maximum force or torque used to reach the desired velocity.</description>
            </element>
            <element name ='velocity' required ='0' type ='double' default ='0'>
              <description>The desired velocity of the joint. Should only be set if you want the joint to move on load.</description>
            </element>
            <element name ='limit' required ='0'>
              <description></description>
              <element name ='cfm' required ='1' type ='double' default ='0'>
                <description>Constraint force mixing parameter used by the joint stop</description>
              </element>
              <element name ='erp' required ='1' type ='double' default ='0.2'>
                <description>Error reduction parameter used by the joint stop</description>
              </element>
            </element>
            <element name ='suspension' required ='0'>
              <description></description>
              <element name ='cfm' required ='1' type ='double' default ='0'>
                <description>Suspension constraint force mixing parameter</description>
              </element>
              <element name ='erp' required ='1' type ='double' default ='0.2'>
                <description>Suspension error reduction parameter</description>
              </element>
            </element>
          </element>
          <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
            <description>If provide feedback is set to true, physics engine will compute the constraint forces at this joint. For now, provide_feedback under ode block will override this tag and given user warning about the migration. provide_feedback under ode is scheduled to be removed in SDF 1.5.</description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='sensor' required ='0'>
          <description>The sensor tag describes the type and properties of a sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the sensor. This name must not match another model in the model.</description>
          </attribute>
          <attribute name ='type' type ='string' default ='__default__' required ='1'>
            <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
          </attribute>
          <element name ='always_on' required ='0' type ='bool' default ='0'>
            <description>If true the sensor will always be updated according to the update rate.</description>
          </element>
          <element name ='update_rate' required ='0' type ='double' default ='0'>
            <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
          </element>
          <element name ='visualize' required ='0' type ='bool' default ='0'>
            <description>If true, the sensor is visualized in the GUI</description>
          </element>
          <element name ='topic' required ='0' type ='string' default ='__default__'>
            <description>Name of the topic on which data is published. This is necessary for visualization</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='plugin' required ='*'>
            <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the plugin, scoped to its parent.</description>
            </attribute>
            <attribute name ='filename' type ='string' default ='__default__' required ='1'>
              <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
            </attribute>
            <element copy_data ='true' required ='*'/>
          </element>
          <element name ='altimeter' required ='0'>
            <description>These elements are specific to an altimeter sensor.</description>
            <element name ='vertical_position' required ='0'>
              <description>Noise parameters for vertical position</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical_velocity' required ='0'>
              <description>Noise parameters for vertical velocity</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='camera' required ='0'>
            <description>These elements are specific to camera sensors.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='0'>
              <description>An optional name for the camera.</description>
            </attribute>
            <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
              <description>Horizontal field of view</description>
            </element>
            <element name ='image' required ='1'>
              <description>The image size in pixels and format.</description>
              <element name ='width' required ='1' type ='int' default ='320'>
                <description>Width in pixels</description>
              </element>
              <element name ='height' required ='1' type ='int' default ='240'>
                <description>Height in pixels</description>
              </element>
              <element name ='format' required ='0' type ='string' default ='R8G8B8'>
                <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
              </element>
            </element>
            <element name ='clip' required ='1'>
              <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
              <element name ='near' required ='1' type ='double' default ='0.1'>
                <description>Near clipping plane</description>
              </element>
              <element name ='far' required ='1' type ='double' default ='100'>
                <description>Far clipping plane</description>
              </element>
            </element>
            <element name ='save' required ='0'>
              <description>Enable or disable saving of camera frames.</description>
              <attribute name ='enabled' type ='bool' default ='0' required ='1'>
                <description>True = saving enabled</description>
              </attribute>
              <element name ='path' required ='1' type ='string' default ='__default__'>
                <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
              </element>
            </element>
            <element name ='depth_camera' required ='0'>
              <description>Depth camera parameters</description>
              <element name ='output' required ='1' type ='string' default ='depths'>
                <description>Type of output</description>
              </element>
            </element>
            <element name ='noise' required ='0'>
              <description>The properties of the noise model that should be applied to generated images</description>
              <element name ='type' required ='1' type ='string' default ='gaussian'>
                <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
              </element>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
            </element>
            <element name ='distortion' required ='0'>
              <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
              <element name ='k1' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k1</description>
              </element>
              <element name ='k2' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k2</description>
              </element>
              <element name ='k3' required ='0' type ='double' default ='0'>
                <description>The radial distortion coefficient k3</description>
              </element>
              <element name ='p1' required ='0' type ='double' default ='0'>
                <description>The tangential distortion coefficient p1</description>
              </element>
              <element name ='p2' required ='0' type ='double' default ='0'>
                <description>The tangential distortion coefficient p2</description>
              </element>
              <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
                <description>The distortion center or principal point</description>
              </element>
            </element>
            <element name ='lens' required ='0'>
              <description>Lens projection description</description>
              <element name ='type' required ='1' type ='string' default ='stereographic'>
                <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
              </element>
              <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
                <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
              </element>
              <element name ='custom_function' required ='0'>
                <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
                <element name ='c1' required ='0' type ='double' default ='1'>
                  <description>Linear scaling constant</description>
                </element>
                <element name ='c2' required ='0' type ='double' default ='1'>
                  <description>Angle scaling constant</description>
                </element>
                <element name ='c3' required ='0' type ='double' default ='0'>
                  <description>Angle offset constant</description>
                </element>
                <element name ='f' required ='0' type ='double' default ='1'>
                  <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
                </element>
                <element name ='fun' required ='1' type ='string' default ='tan'>
                  <description>Possible values are 'sin', 'tan' and 'id'</description>
                </element>
              </element>
              <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
                <description>Everything outside of the specified angle will be hidden, 90° by default</description>
              </element>
              <element name ='env_texture_size' required ='0' type ='int' default ='256'>
                <description>Resolution of the environment cube map used to draw the world</description>
              </element>
              <element name ='intrinsics' required ='0'>
                <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
                <element name ='fx' required ='1' type ='double' default ='277'>
                  <description>X focal length (in pixels, overrides horizontal_fov)</description>
                </element>
                <element name ='fy' required ='1' type ='double' default ='277'>
                  <description>Y focal length (in pixels, overrides horizontal_fov)</description>
                </element>
                <element name ='cx' required ='1' type ='double' default ='160'>
                  <description>X principal point (in pixels)</description>
                </element>
                <element name ='cy' required ='1' type ='double' default ='120'>
                  <description>Y principal point (in pixels)</description>
                </element>
                <element name ='s' required ='1' type ='double' default ='1'>
                  <description>XY axis skew</description>
                </element>
              </element>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='contact' required ='0'>
            <description>These elements are specific to the contact sensor.</description>
            <element name ='collision' required ='1' type ='string' default ='__default__'>
              <description>name of the collision element within a link that acts as the contact sensor.</description>
            </element>
            <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
              <description>Topic on which contact data is published.</description>
            </element>
          </element>
          <element name ='gps' required ='0'>
            <description>These elements are specific to the GPS sensor.</description>
            <element name ='position_sensing' required ='0'>
              <description>Parameters related to GPS position measurement.</description>
              <element name ='horizontal' required ='0'>
                <description>Noise parameters for horizontal position measurement, in units of meters.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description>Noise parameters for vertical position measurement, in units of meters.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='velocity_sensing' required ='0'>
              <description>Parameters related to GPS position measurement.</description>
              <element name ='horizontal' required ='0'>
                <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
          </element>
          <element name ='imu' required ='0'>
            <description>These elements are specific to the IMU sensor.</description>
            <element name ='orientation_reference_frame' required ='0'>
              <description></description>
              <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
                <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
              </element>
              <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
                <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
                <element name ='parent_frame' required ='0' type ='string' default =''>
                  <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                </element>
              </element>
              <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
                <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
                <element name ='parent_frame' required ='0' type ='string' default =''>
                  <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                </element>
              </element>
            </element>
            <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
              <description>Topic on which data is published.</description>
            </element>
            <element name ='angular_velocity' required ='0'>
              <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
              <element name ='x' required ='0'>
                <description>Angular velocity about the X axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='y' required ='0'>
                <description>Angular velocity about the Y axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='z' required ='0'>
                <description>Angular velocity about the Z axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='linear_acceleration' required ='0'>
              <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
              <element name ='x' required ='0'>
                <description>Linear acceleration about the X axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='y' required ='0'>
                <description>Linear acceleration about the Y axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='z' required ='0'>
                <description>Linear acceleration about the Z axis</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
          </element>
          <element name ='logical_camera' required ='0'>
            <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
            <element name ='near' required ='1' type ='double' default ='0'>
              <description>Near clipping distance of the view frustum</description>
            </element>
            <element name ='far' required ='1' type ='double' default ='1'>
              <description>Far clipping distance of the view frustum</description>
            </element>
            <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
              <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
            </element>
            <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
              <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
            </element>
          </element>
          <element name ='magnetometer' required ='0'>
            <description>These elements are specific to a Magnetometer sensor.</description>
            <element name ='x' required ='0'>
              <description>Parameters related to the body-frame X axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Parameters related to the body-frame Y axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Parameters related to the body-frame Z axis of the magnetometer</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='ray' required ='0'>
            <description>These elements are specific to the ray (laser) sensor.</description>
            <element name ='scan' required ='1'>
              <description></description>
              <element name ='horizontal' required ='1'>
                <description></description>
                <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                  <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                </element>
                <element name ='resolution' required ='1' type ='double' default ='1'>
                  <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                </element>
                <element name ='min_angle' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='max_angle' required ='1' type ='double' default ='0'>
                  <description>Must be greater or equal to min_angle</description>
                </element>
              </element>
              <element name ='vertical' required ='0'>
                <description></description>
                <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                  <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                </element>
                <element name ='resolution' required ='0' type ='double' default ='1'>
                  <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                </element>
                <element name ='min_angle' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='max_angle' required ='1' type ='double' default ='0'>
                  <description>Must be greater or equal to min_angle</description>
                </element>
              </element>
            </element>
            <element name ='range' required ='1'>
              <description>specifies range properties of each simulated ray</description>
              <element name ='min' required ='1' type ='double' default ='0'>
                <description>The minimum distance for each ray.</description>
              </element>
              <element name ='max' required ='1' type ='double' default ='0'>
                <description>The maximum distance for each ray.</description>
              </element>
              <element name ='resolution' required ='0' type ='double' default ='0'>
                <description>Linear resolution of each ray.</description>
              </element>
            </element>
            <element name ='noise' required ='0'>
              <description>The properties of the noise model that should be applied to generated scans</description>
              <element name ='type' required ='1' type ='string' default ='gaussian'>
                <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
              </element>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
            </element>
          </element>
          <element name ='rfidtag' required ='0'>
            <description></description>
          </element>
          <element name ='rfid' required ='0'>
            <description></description>
          </element>
          <element name ='sonar' required ='0'>
            <description>These elements are specific to the sonar sensor.</description>
            <element name ='geometry' required ='0' type ='string' default ='cone'>
              <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
            </element>
            <element name ='min' required ='1' type ='double' default ='0'>
              <description>Minimum range</description>
            </element>
            <element name ='max' required ='1' type ='double' default ='1'>
              <description>Max range</description>
            </element>
            <element name ='radius' required ='0' type ='double' default ='0.5'>
              <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
            </element>
          </element>
          <element name ='transceiver' required ='0'>
            <description>These elements are specific to a wireless transceiver.</description>
            <element name ='essid' required ='0' type ='string' default ='wireless'>
              <description>Service set identifier (network name)</description>
            </element>
            <element name ='frequency' required ='0' type ='double' default ='2442'>
              <description>Specifies the frequency of transmission in MHz</description>
            </element>
            <element name ='min_frequency' required ='0' type ='double' default ='2412'>
              <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
            </element>
            <element name ='max_frequency' required ='0' type ='double' default ='2484'>
              <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
            </element>
            <element name ='gain' required ='1' type ='double' default ='2.5'>
              <description>Specifies the antenna gain in dBi</description>
            </element>
            <element name ='power' required ='1' type ='double' default ='14.5'>
              <description>Specifies the transmission power in dBm</description>
            </element>
            <element name ='sensitivity' required ='0' type ='double' default ='-90'>
              <description>Mininum received signal power in dBm</description>
            </element>
          </element>
          <element name ='force_torque' required ='0'>
            <description>These elements are specific to the force torque sensor.</description>
            <element name ='frame' required ='0' type ='string' default ='child'>
              <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
            </element>
            <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
              <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
            </element>
          </element>
        </element>
      </element>
      <element name ='plugin' required ='*'>
        <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the plugin, scoped to its parent.</description>
        </attribute>
        <attribute name ='filename' type ='string' default ='__default__' required ='1'>
          <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
        </attribute>
        <element copy_data ='true' required ='*'/>
      </element>
    </element>
    <element name ='plugin' required ='*'>
      <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the plugin, scoped to its parent.</description>
      </attribute>
      <attribute name ='filename' type ='string' default ='__default__' required ='1'>
        <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
      </attribute>
      <element copy_data ='true' required ='*'/>
    </element>
    <element name ='joint' required ='*'>
      <description>A joint connections two links with kinematic and dynamic properties.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the joint within the scope of the model.</description>
      </attribute>
      <attribute name ='type' type ='string' default ='__default__' required ='1'>
        <description>The type of joint, which must be one of the following: (revolute) a hinge joint that rotates on a single axis with either a fixed or continuous range of motion, (gearbox) geared revolute joints, (revolute2) same as two revolute joints connected in series, (prismatic) a sliding joint that slides along an axis with a limited range specified by upper and lower limits, (ball) a ball and socket joint, (screw) a single degree of freedom joint with coupled sliding and rotational motion, (universal) like a ball joint, but constrains one degree of freedom, (fixed) a joint with zero degrees of freedom that rigidly connects two links.</description>
      </attribute>
      <element name ='parent' required ='1' type ='string' default ='__default__'>
        <description>Name of the parent link</description>
      </element>
      <element name ='child' required ='1' type ='string' default ='__default__'>
        <description>Name of the child link</description>
      </element>
      <element name ='gearbox_ratio' required ='0' type ='double' default ='1'>
        <description>Parameter for gearbox joints. Given theta_1 and theta_2 defined in description for gearbox_reference_body, theta_2 = -gearbox_ratio * theta_1.</description>
      </element>
      <element name ='gearbox_reference_body' required ='0' type ='string' default ='__default__'>
        <description>Parameter for gearbox joints. Gearbox ratio is enforced over two joint angles. First joint angle (theta_1) is the angle from the gearbox_reference_body to the parent link in the direction of the axis element and the second joint angle (theta_2) is the angle from the gearbox_reference_body to the child link in the direction of the axis2 element.</description>
      </element>
      <element name ='thread_pitch' required ='0' type ='double' default ='1'>
        <description>Parameter for screw joints.</description>
      </element>
      <element name ='axis' required ='0'>
        <description>Parameters related to the axis of rotation for revolute joints, the axis of translation for prismatic joints.</description>
        <element name ='initial_position' required ='0' type ='double' default ='0'>
          <description>Default joint position for this joint axis.</description>
        </element>
        <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
          <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
        </element>
        <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
          <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
        </element>
        <element name ='dynamics' required ='0'>
          <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
          <element name ='damping' required ='0' type ='double' default ='0'>
            <description>The physical velocity dependent viscous damping coefficient of the joint.</description>
          </element>
          <element name ='friction' required ='0' type ='double' default ='0'>
            <description>The physical static friction value of the joint.</description>
          </element>
          <element name ='spring_reference' required ='1' type ='double' default ='0'>
            <description>The spring reference position for this joint axis.</description>
          </element>
          <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
            <description>The spring stiffness for this joint axis.</description>
          </element>
        </element>
        <element name ='limit' required ='1'>
          <description>specifies the limits of this joint</description>
          <element name ='lower' required ='1' type ='double' default ='-1e+16'>
            <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='upper' required ='1' type ='double' default ='1e+16'>
            <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='effort' required ='0' type ='double' default ='-1'>
            <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
          </element>
          <element name ='velocity' required ='0' type ='double' default ='-1'>
            <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
          </element>
          <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
            <description>Joint stop stiffness. Support physics engines: SimBody.</description>
          </element>
          <element name ='dissipation' required ='0' type ='double' default ='1'>
            <description>Joint stop dissipation.</description>
          </element>
        </element>
      </element>
      <element name ='axis2' required ='0'>
        <description>Parameters related to the second axis of rotation for revolute2 joints and universal joints.</description>
        <element name ='initial_position' required ='0' type ='double' default ='0'>
          <description>Default joint position for this joint axis.</description>
        </element>
        <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
          <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
        </element>
        <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
          <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
        </element>
        <element name ='dynamics' required ='0'>
          <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
          <element name ='damping' required ='0' type ='double' default ='0'>
            <description>The physical velocity dependent viscous damping coefficient of the joint. EXPERIMENTAL: if damping coefficient is negative and implicit_spring_damper is true, adaptive damping is used.</description>
          </element>
          <element name ='friction' required ='0' type ='double' default ='0'>
            <description>The physical static friction value of the joint.</description>
          </element>
          <element name ='spring_reference' required ='1' type ='double' default ='0'>
            <description>The spring reference position for this joint axis.</description>
          </element>
          <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
            <description>The spring stiffness for this joint axis.</description>
          </element>
        </element>
        <element name ='limit' required ='0'>
          <description></description>
          <element name ='lower' required ='0' type ='double' default ='-1e+16'>
            <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='upper' required ='0' type ='double' default ='1e+16'>
            <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='effort' required ='0' type ='double' default ='-1'>
            <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
          </element>
          <element name ='velocity' required ='0' type ='double' default ='-1'>
            <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
          </element>
          <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
            <description>Joint stop stiffness. Supported physics engines: SimBody.</description>
          </element>
          <element name ='dissipation' required ='0' type ='double' default ='1'>
            <description>Joint stop dissipation. Supported physics engines: SimBody.</description>
          </element>
        </element>
      </element>
      <element name ='physics' required ='0'>
        <description>Parameters that are specific to a certain physics engine.</description>
        <element name ='simbody' required ='0'>
          <description>Simbody specific parameters</description>
          <element name ='must_be_loop_joint' required ='0' type ='bool' default ='0'>
            <description>Force cut in the multibody graph at this joint.</description>
          </element>
        </element>
        <element name ='ode' required ='0'>
          <description>ODE specific parameters</description>
          <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
            <description>(DEPRECATION WARNING: In SDF 1.5 this tag will be replaced by the same tag directly under the physics-block. For now, this tag overrides the one outside of ode-block, but in SDF 1.5 this tag will be removed completely.) If provide feedback is set to true, ODE will compute the constraint forces at this joint.</description>
          </element>
          <element name ='cfm_damping' required ='0' type ='bool' default ='0'>
            <description>If cfm damping is set to true, ODE will use CFM to simulate damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active.</description>
          </element>
          <element name ='implicit_spring_damper' required ='0' type ='bool' default ='0'>
            <description>If implicit_spring_damper is set to true, ODE will use CFM, ERP to simulate stiffness and damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active. This replaces cfm_damping parameter in sdf 1.4.</description>
          </element>
          <element name ='fudge_factor' required ='0' type ='double' default ='0'>
            <description>Scale the excess for in a joint motor at joint limits. Should be between zero and one.</description>
          </element>
          <element name ='cfm' required ='0' type ='double' default ='0'>
            <description>Constraint force mixing for constrained directions</description>
          </element>
          <element name ='erp' required ='0' type ='double' default ='0.2'>
            <description>Error reduction parameter for constrained directions</description>
          </element>
          <element name ='bounce' required ='0' type ='double' default ='0'>
            <description>Bounciness of the limits</description>
          </element>
          <element name ='max_force' required ='0' type ='double' default ='0'>
            <description>Maximum force or torque used to reach the desired velocity.</description>
          </element>
          <element name ='velocity' required ='0' type ='double' default ='0'>
            <description>The desired velocity of the joint. Should only be set if you want the joint to move on load.</description>
          </element>
          <element name ='limit' required ='0'>
            <description></description>
            <element name ='cfm' required ='1' type ='double' default ='0'>
              <description>Constraint force mixing parameter used by the joint stop</description>
            </element>
            <element name ='erp' required ='1' type ='double' default ='0.2'>
              <description>Error reduction parameter used by the joint stop</description>
            </element>
          </element>
          <element name ='suspension' required ='0'>
            <description></description>
            <element name ='cfm' required ='1' type ='double' default ='0'>
              <description>Suspension constraint force mixing parameter</description>
            </element>
            <element name ='erp' required ='1' type ='double' default ='0.2'>
              <description>Suspension error reduction parameter</description>
            </element>
          </element>
        </element>
        <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
          <description>If provide feedback is set to true, physics engine will compute the constraint forces at this joint. For now, provide_feedback under ode block will override this tag and given user warning about the migration. provide_feedback under ode is scheduled to be removed in SDF 1.5.</description>
        </element>
      </element>
      <element name ='frame' required ='*'>
        <description>A frame of reference to which a pose is relative.</description>
        <attribute name ='name' type ='string' default ='' required ='1'>
          <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
        </attribute>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
      <element name ='sensor' required ='0'>
        <description>The sensor tag describes the type and properties of a sensor.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the sensor. This name must not match another model in the model.</description>
        </attribute>
        <attribute name ='type' type ='string' default ='__default__' required ='1'>
          <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
        </attribute>
        <element name ='always_on' required ='0' type ='bool' default ='0'>
          <description>If true the sensor will always be updated according to the update rate.</description>
        </element>
        <element name ='update_rate' required ='0' type ='double' default ='0'>
          <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
        </element>
        <element name ='visualize' required ='0' type ='bool' default ='0'>
          <description>If true, the sensor is visualized in the GUI</description>
        </element>
        <element name ='topic' required ='0' type ='string' default ='__default__'>
          <description>Name of the topic on which data is published. This is necessary for visualization</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='plugin' required ='*'>
          <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the plugin, scoped to its parent.</description>
          </attribute>
          <attribute name ='filename' type ='string' default ='__default__' required ='1'>
            <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
          </attribute>
          <element copy_data ='true' required ='*'/>
        </element>
        <element name ='altimeter' required ='0'>
          <description>These elements are specific to an altimeter sensor.</description>
          <element name ='vertical_position' required ='0'>
            <description>Noise parameters for vertical position</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='vertical_velocity' required ='0'>
            <description>Noise parameters for vertical velocity</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='camera' required ='0'>
          <description>These elements are specific to camera sensors.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='0'>
            <description>An optional name for the camera.</description>
          </attribute>
          <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
            <description>Horizontal field of view</description>
          </element>
          <element name ='image' required ='1'>
            <description>The image size in pixels and format.</description>
            <element name ='width' required ='1' type ='int' default ='320'>
              <description>Width in pixels</description>
            </element>
            <element name ='height' required ='1' type ='int' default ='240'>
              <description>Height in pixels</description>
            </element>
            <element name ='format' required ='0' type ='string' default ='R8G8B8'>
              <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
            </element>
          </element>
          <element name ='clip' required ='1'>
            <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
            <element name ='near' required ='1' type ='double' default ='0.1'>
              <description>Near clipping plane</description>
            </element>
            <element name ='far' required ='1' type ='double' default ='100'>
              <description>Far clipping plane</description>
            </element>
          </element>
          <element name ='save' required ='0'>
            <description>Enable or disable saving of camera frames.</description>
            <attribute name ='enabled' type ='bool' default ='0' required ='1'>
              <description>True = saving enabled</description>
            </attribute>
            <element name ='path' required ='1' type ='string' default ='__default__'>
              <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
            </element>
          </element>
          <element name ='depth_camera' required ='0'>
            <description>Depth camera parameters</description>
            <element name ='output' required ='1' type ='string' default ='depths'>
              <description>Type of output</description>
            </element>
          </element>
          <element name ='noise' required ='0'>
            <description>The properties of the noise model that should be applied to generated images</description>
            <element name ='type' required ='1' type ='string' default ='gaussian'>
              <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
            </element>
            <element name ='mean' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
            </element>
            <element name ='stddev' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
            </element>
          </element>
          <element name ='distortion' required ='0'>
            <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
            <element name ='k1' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k1</description>
            </element>
            <element name ='k2' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k2</description>
            </element>
            <element name ='k3' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k3</description>
            </element>
            <element name ='p1' required ='0' type ='double' default ='0'>
              <description>The tangential distortion coefficient p1</description>
            </element>
            <element name ='p2' required ='0' type ='double' default ='0'>
              <description>The tangential distortion coefficient p2</description>
            </element>
            <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
              <description>The distortion center or principal point</description>
            </element>
          </element>
          <element name ='lens' required ='0'>
            <description>Lens projection description</description>
            <element name ='type' required ='1' type ='string' default ='stereographic'>
              <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
            </element>
            <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
              <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
            </element>
            <element name ='custom_function' required ='0'>
              <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
              <element name ='c1' required ='0' type ='double' default ='1'>
                <description>Linear scaling constant</description>
              </element>
              <element name ='c2' required ='0' type ='double' default ='1'>
                <description>Angle scaling constant</description>
              </element>
              <element name ='c3' required ='0' type ='double' default ='0'>
                <description>Angle offset constant</description>
              </element>
              <element name ='f' required ='0' type ='double' default ='1'>
                <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
              </element>
              <element name ='fun' required ='1' type ='string' default ='tan'>
                <description>Possible values are 'sin', 'tan' and 'id'</description>
              </element>
            </element>
            <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
              <description>Everything outside of the specified angle will be hidden, 90° by default</description>
            </element>
            <element name ='env_texture_size' required ='0' type ='int' default ='256'>
              <description>Resolution of the environment cube map used to draw the world</description>
            </element>
            <element name ='intrinsics' required ='0'>
              <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
              <element name ='fx' required ='1' type ='double' default ='277'>
                <description>X focal length (in pixels, overrides horizontal_fov)</description>
              </element>
              <element name ='fy' required ='1' type ='double' default ='277'>
                <description>Y focal length (in pixels, overrides horizontal_fov)</description>
              </element>
              <element name ='cx' required ='1' type ='double' default ='160'>
                <description>X principal point (in pixels)</description>
              </element>
              <element name ='cy' required ='1' type ='double' default ='120'>
                <description>Y principal point (in pixels)</description>
              </element>
              <element name ='s' required ='1' type ='double' default ='1'>
                <description>XY axis skew</description>
              </element>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='contact' required ='0'>
          <description>These elements are specific to the contact sensor.</description>
          <element name ='collision' required ='1' type ='string' default ='__default__'>
            <description>name of the collision element within a link that acts as the contact sensor.</description>
          </element>
          <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
            <description>Topic on which contact data is published.</description>
          </element>
        </element>
        <element name ='gps' required ='0'>
          <description>These elements are specific to the GPS sensor.</description>
          <element name ='position_sensing' required ='0'>
            <description>Parameters related to GPS position measurement.</description>
            <element name ='horizontal' required ='0'>
              <description>Noise parameters for horizontal position measurement, in units of meters.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description>Noise parameters for vertical position measurement, in units of meters.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='velocity_sensing' required ='0'>
            <description>Parameters related to GPS position measurement.</description>
            <element name ='horizontal' required ='0'>
              <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='imu' required ='0'>
          <description>These elements are specific to the IMU sensor.</description>
          <element name ='orientation_reference_frame' required ='0'>
            <description></description>
            <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
              <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
            </element>
            <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
              <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
              <element name ='parent_frame' required ='0' type ='string' default =''>
                <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
              </element>
            </element>
            <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
              <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
              <element name ='parent_frame' required ='0' type ='string' default =''>
                <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
              </element>
            </element>
          </element>
          <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
            <description>Topic on which data is published.</description>
          </element>
          <element name ='angular_velocity' required ='0'>
            <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
            <element name ='x' required ='0'>
              <description>Angular velocity about the X axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Angular velocity about the Y axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Angular velocity about the Z axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='linear_acceleration' required ='0'>
            <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
            <element name ='x' required ='0'>
              <description>Linear acceleration about the X axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Linear acceleration about the Y axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Linear acceleration about the Z axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='logical_camera' required ='0'>
          <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
          <element name ='near' required ='1' type ='double' default ='0'>
            <description>Near clipping distance of the view frustum</description>
          </element>
          <element name ='far' required ='1' type ='double' default ='1'>
            <description>Far clipping distance of the view frustum</description>
          </element>
          <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
            <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
          </element>
          <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
            <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
          </element>
        </element>
        <element name ='magnetometer' required ='0'>
          <description>These elements are specific to a Magnetometer sensor.</description>
          <element name ='x' required ='0'>
            <description>Parameters related to the body-frame X axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='y' required ='0'>
            <description>Parameters related to the body-frame Y axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='z' required ='0'>
            <description>Parameters related to the body-frame Z axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='ray' required ='0'>
          <description>These elements are specific to the ray (laser) sensor.</description>
          <element name ='scan' required ='1'>
            <description></description>
            <element name ='horizontal' required ='1'>
              <description></description>
              <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
              </element>
              <element name ='resolution' required ='1' type ='double' default ='1'>
                <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
              </element>
              <element name ='min_angle' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='max_angle' required ='1' type ='double' default ='0'>
                <description>Must be greater or equal to min_angle</description>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description></description>
              <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
              </element>
              <element name ='resolution' required ='0' type ='double' default ='1'>
                <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
              </element>
              <element name ='min_angle' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='max_angle' required ='1' type ='double' default ='0'>
                <description>Must be greater or equal to min_angle</description>
              </element>
            </element>
          </element>
          <element name ='range' required ='1'>
            <description>specifies range properties of each simulated ray</description>
            <element name ='min' required ='1' type ='double' default ='0'>
              <description>The minimum distance for each ray.</description>
            </element>
            <element name ='max' required ='1' type ='double' default ='0'>
              <description>The maximum distance for each ray.</description>
            </element>
            <element name ='resolution' required ='0' type ='double' default ='0'>
              <description>Linear resolution of each ray.</description>
            </element>
          </element>
          <element name ='noise' required ='0'>
            <description>The properties of the noise model that should be applied to generated scans</description>
            <element name ='type' required ='1' type ='string' default ='gaussian'>
              <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
            </element>
            <element name ='mean' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
            </element>
            <element name ='stddev' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
            </element>
          </element>
        </element>
        <element name ='rfidtag' required ='0'>
          <description></description>
        </element>
        <element name ='rfid' required ='0'>
          <description></description>
        </element>
        <element name ='sonar' required ='0'>
          <description>These elements are specific to the sonar sensor.</description>
          <element name ='geometry' required ='0' type ='string' default ='cone'>
            <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
          </element>
          <element name ='min' required ='1' type ='double' default ='0'>
            <description>Minimum range</description>
          </element>
          <element name ='max' required ='1' type ='double' default ='1'>
            <description>Max range</description>
          </element>
          <element name ='radius' required ='0' type ='double' default ='0.5'>
            <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
          </element>
        </element>
        <element name ='transceiver' required ='0'>
          <description>These elements are specific to a wireless transceiver.</description>
          <element name ='essid' required ='0' type ='string' default ='wireless'>
            <description>Service set identifier (network name)</description>
          </element>
          <element name ='frequency' required ='0' type ='double' default ='2442'>
            <description>Specifies the frequency of transmission in MHz</description>
          </element>
          <element name ='min_frequency' required ='0' type ='double' default ='2412'>
            <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
          </element>
          <element name ='max_frequency' required ='0' type ='double' default ='2484'>
            <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
          </element>
          <element name ='gain' required ='1' type ='double' default ='2.5'>
            <description>Specifies the antenna gain in dBi</description>
          </element>
          <element name ='power' required ='1' type ='double' default ='14.5'>
            <description>Specifies the transmission power in dBm</description>
          </element>
          <element name ='sensitivity' required ='0' type ='double' default ='-90'>
            <description>Mininum received signal power in dBm</description>
          </element>
        </element>
        <element name ='force_torque' required ='0'>
          <description>These elements are specific to the force torque sensor.</description>
          <element name ='frame' required ='0' type ='string' default ='child'>
            <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
          </element>
          <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
            <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
          </element>
        </element>
      </element>
    </element>
    <element name ='road' required ='*'>
      <description></description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>Name of the road</description>
      </attribute>
      <element name ='width' required ='1' type ='double' default ='1'>
        <description>Width of the road</description>
      </element>
      <element name ='point' required ='+' type ='vector3' default ='0 0 0'>
        <description>A series of points that define the path of the road.</description>
      </element>
      <element name ='material' required ='0'>
        <description>The material of the visual element.</description>
        <element name ='script' required ='0'>
          <description>Name of material from an installed script file. This will override the color element if the script exists.</description>
          <element name ='uri' required ='+' type ='string' default ='__default__'>
            <description>URI of the material script file</description>
          </element>
          <element name ='name' required ='1' type ='string' default ='__default__'>
            <description>Name of the script within the script file</description>
          </element>
        </element>
        <element name ='shader' required ='0'>
          <description></description>
          <attribute name ='type' type ='string' default ='pixel' required ='1'>
            <description>vertex, pixel, normal_map_objectspace, normal_map_tangentspace</description>
          </attribute>
          <element name ='normal_map' required ='0' type ='string' default ='__default__'>
            <description>filename of the normal map</description>
          </element>
        </element>
        <element name ='lighting' required ='0' type ='bool' default ='1'>
          <description>If false, dynamic lighting will be disabled</description>
        </element>
        <element name ='ambient' required ='0' type ='color' default ='0 0 0 1'>
          <description>The ambient color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
        </element>
        <element name ='diffuse' required ='0' type ='color' default ='0 0 0 1'>
          <description>The diffuse color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
        </element>
        <element name ='specular' required ='0' type ='color' default ='0 0 0 1'>
          <description>The specular color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
        </element>
        <element name ='emissive' required ='0' type ='color' default ='0 0 0 1'>
          <description>The emissive color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
        </element>
      </element>
    </element>
    <element name ='spherical_coordinates' required ='0'>
      <description></description>
      <element name ='surface_model' required ='1' type ='string' default ='EARTH_WGS84'>
        <description>Name of planetary surface model, used to determine the surface altitude at a given latitude and longitude. The default is an ellipsoid model of the earth based on the WGS-84 standard. It is used in Gazebo's GPS sensor implementation.</description>
      </element>
      <element name ='world_frame_orientation' required ='0' type ='string' default ='ENU'>
        <description>This field identifies how Gazebo world frame is aligned in Geographical sense. The final Gazebo world frame orientation is obtained by rotating a frame aligned with following notation by the field heading_deg (Note that heading_deg corresponds to positive yaw rotation in the NED frame, so it's inverse specifies positive Z-rotation in ENU or NWU). Options are: - ENU (East-North-Up) - NED (North-East-Down) - NWU (North-West-Up) For example, world frame specified by setting world_orientation="ENU" and heading_deg=-90° is effectively equivalent to NWU with heading of 0°.</description>
      </element>
      <element name ='latitude_deg' required ='1' type ='double' default ='0'>
        <description>Geodetic latitude at origin of gazebo reference frame, specified in units of degrees.</description>
      </element>
      <element name ='longitude_deg' required ='1' type ='double' default ='0'>
        <description>Longitude at origin of gazebo reference frame, specified in units of degrees.</description>
      </element>
      <element name ='elevation' required ='1' type ='double' default ='0'>
        <description>Elevation of origin of gazebo reference frame, specified in meters.</description>
      </element>
      <element name ='heading_deg' required ='1' type ='double' default ='0'>
        <description>Heading offset of gazebo reference frame, measured as angle between Gazebo world frame and the world_frame_orientation type (ENU/NED/NWU). Rotations about the downward-vector (e.g. North to East) are positive. The direction of rotation is chosen to be consistent with compass heading convention (e.g. 0 degrees points North and 90 degrees points East, positive rotation indicates counterclockwise rotation when viewed from top-down direction). The angle is specified in degrees.</description>
      </element>
    </element>
    <element name ='state' required ='*'>
      <description></description>
      <attribute name ='world_name' type ='string' default ='__default__' required ='1'>
        <description>Name of the world this state applies to</description>
      </attribute>
      <element name ='sim_time' required ='0' type ='time' default ='0 0'>
        <description>Simulation time stamp of the state [seconds nanoseconds]</description>
      </element>
      <element name ='wall_time' required ='0' type ='time' default ='0 0'>
        <description>Wall time stamp of the state [seconds nanoseconds]</description>
      </element>
      <element name ='real_time' required ='0' type ='time' default ='0 0'>
        <description>Real time stamp of the state [seconds nanoseconds]</description>
      </element>
      <element name ='iterations' required ='1' type ='unsigned int' default ='0'>
        <description>Number of simulation iterations.</description>
      </element>
      <element name ='insertions' required ='0'>
        <description>A list containing the entire description of entities inserted.</description>
        <element name ='model' required ='*'>
          <description>The model element defines a complete robot or any other physical object.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the model. This name must not match another model in the world.</description>
          </attribute>
          <element name ='static' required ='0' type ='bool' default ='0'>
            <description>If set to true, the model is immovable. Otherwise the model is simulated in the dynamics engine.</description>
          </element>
          <element name ='self_collide' required ='0' type ='bool' default ='0'>
            <description>If set to true, all links in the model will collide with each other (except those connected by a joint). Can be overridden by the link or collision element self_collide property. Two links within a model will collide if link1.self_collide OR link2.self_collide. Links connected by a joint will never collide.</description>
          </element>
          <element name ='allow_auto_disable' required ='0' type ='bool' default ='1'>
            <description>Allows a model to auto-disable, which is means the physics engine can skip updating the model when the model is at rest. This parameter is only used by models with no joints.</description>
          </element>
          <element name ='include' required ='*'>
            <description>Include resources from a URI. This can be used to nest models.</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>URI to a resource, such as a model</description>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>Override the pose of the included model. A position and orientation in the global coordinate frame for the model. Position(x,y,z) and rotation (roll, pitch yaw) in the global coordinate frame.</description>
            </element>
            <element name ='name' required ='0' type ='string' default =''>
              <description>Override the name of the included model.</description>
            </element>
            <element name ='static' required ='0' type ='bool' default ='0'>
              <description>Override the static value of the included model.</description>
            </element>
          </element>
          <element name ='model' required ='*'>
            <description>A nested model element</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the model. This name must not match another nested model in the same level as this model.</description>
            </attribute>
            <element ref ='model' required ='*'/>
          </element>
          <element name ='enable_wind' required ='0' type ='bool' default ='0'>
            <description>If set to true, all links in the model will be affected by the wind. Can be overriden by the link wind property.</description>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='link' required ='*'>
            <description>A physical link with inertia, collision, and visual properties. A link must be a child of a model, and any number of links may exist in a model.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the link within the scope of the model.</description>
            </attribute>
            <element name ='gravity' required ='0' type ='bool' default ='1'>
              <description>If true, the link is affected by gravity.</description>
            </element>
            <element name ='enable_wind' required ='0' type ='bool' default ='0'>
              <description>If true, the link is affected by the wind.</description>
            </element>
            <element name ='self_collide' required ='0' type ='bool' default ='0'>
              <description>If true, the link can collide with other links in the model. Two links within a model will collide if link1.self_collide OR link2.self_collide. Links connected by a joint will never collide.</description>
            </element>
            <element name ='kinematic' required ='0' type ='bool' default ='0'>
              <description>If true, the link is kinematic only</description>
            </element>
            <element name ='must_be_base_link' required ='0' type ='bool' default ='0'>
              <description>If true, the link will have 6DOF and be a direct child of world.</description>
            </element>
            <element name ='velocity_decay' required ='0'>
              <description>Exponential damping of the link's velocity.</description>
              <element name ='linear' required ='0' type ='double' default ='0'>
                <description>Linear damping</description>
              </element>
              <element name ='angular' required ='0' type ='double' default ='0'>
                <description>Angular damping</description>
              </element>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
            <element name ='inertial' required ='0'>
              <description>The inertial properties of the link.</description>
              <element name ='mass' required ='0' type ='double' default ='1'>
                <description>The mass of the link.</description>
              </element>
              <element name ='inertia' required ='0'>
                <description>The 3x3 rotational inertia matrix. Because the rotational inertia matrix is symmetric, only 6 above-diagonal elements of this matrix are specified here, using the attributes ixx, ixy, ixz, iyy, iyz, izz.</description>
                <element name ='ixx' required ='1' type ='double' default ='1'>
                  <description></description>
                </element>
                <element name ='ixy' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='ixz' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='iyy' required ='1' type ='double' default ='1'>
                  <description></description>
                </element>
                <element name ='iyz' required ='1' type ='double' default ='0'>
                  <description></description>
                </element>
                <element name ='izz' required ='1' type ='double' default ='1'>
                  <description></description>
                </element>
              </element>
              <element name ='frame' required ='*'>
                <description>A frame of reference to which a pose is relative.</description>
                <attribute name ='name' type ='string' default ='' required ='1'>
                  <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                </attribute>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>This is the pose of the inertial reference frame, relative to the specified reference frame. The origin of the inertial reference frame needs to be at the center of gravity. The axes of the inertial reference frame do not need to be aligned with the principal axes of the inertia.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='collision' required ='*'>
              <description>The collision properties of a link. Note that this can be different from the visual properties of a link, for example, simpler collision models are often used to reduce computation time.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='1'>
                <description>Unique name for the collision element within the scope of the parent link.</description>
              </attribute>
              <element name ='laser_retro' required ='0' type ='double' default ='0'>
                <description>intensity value returned by laser sensor.</description>
              </element>
              <element name ='max_contacts' required ='0' type ='int' default ='10'>
                <description>Maximum number of contacts allowed between two entities. This value overrides the max_contacts element defined in physics.</description>
              </element>
              <element name ='frame' required ='*'>
                <description>A frame of reference to which a pose is relative.</description>
                <attribute name ='name' type ='string' default ='' required ='1'>
                  <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                </attribute>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
              <element name ='geometry' required ='1'>
                <description>The shape of the visual or collision object.</description>
                <element name ='empty' required ='0'>
                  <description>You can use the empty tag to make empty geometries.</description>
                </element>
                <element name ='box' required ='0'>
                  <description>Box shape</description>
                  <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
                    <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
                  </element>
                </element>
                <element name ='cylinder' required ='0'>
                  <description>Cylinder shape</description>
                  <element name ='radius' required ='1' type ='double' default ='1'>
                    <description>Radius of the cylinder</description>
                  </element>
                  <element name ='length' required ='1' type ='double' default ='1'>
                    <description>Length of the cylinder</description>
                  </element>
                </element>
                <element name ='heightmap' required ='0'>
                  <description>A heightmap based on a 2d grayscale image.</description>
                  <element name ='uri' required ='1' type ='string' default ='__default__'>
                    <description>URI to a grayscale image file</description>
                  </element>
                  <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
                    <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
                  </element>
                  <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
                    <description>A position offset.</description>
                  </element>
                  <element name ='texture' required ='*'>
                    <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
                    <element name ='size' required ='1' type ='double' default ='10'>
                      <description>Size of the applied texture in meters.</description>
                    </element>
                    <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                      <description>Diffuse texture image filename</description>
                    </element>
                    <element name ='normal' required ='1' type ='string' default ='__default__'>
                      <description>Normalmap texture image filename</description>
                    </element>
                  </element>
                  <element name ='blend' required ='*'>
                    <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
                    <element name ='min_height' required ='1' type ='double' default ='0'>
                      <description>Min height of a blend layer</description>
                    </element>
                    <element name ='fade_dist' required ='1' type ='double' default ='0'>
                      <description>Distance over which the blend occurs</description>
                    </element>
                  </element>
                  <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
                    <description>Set if the rendering engine will use terrain paging</description>
                  </element>
                  <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
                    <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
                  </element>
                </element>
                <element name ='image' required ='0'>
                  <description>Extrude a set of boxes from a grayscale image.</description>
                  <element name ='uri' required ='1' type ='string' default ='__default__'>
                    <description>URI of the grayscale image file</description>
                  </element>
                  <element name ='scale' required ='1' type ='double' default ='1'>
                    <description>Scaling factor applied to the image</description>
                  </element>
                  <element name ='threshold' required ='1' type ='int' default ='200'>
                    <description>Grayscale threshold</description>
                  </element>
                  <element name ='height' required ='1' type ='double' default ='1'>
                    <description>Height of the extruded boxes</description>
                  </element>
                  <element name ='granularity' required ='1' type ='int' default ='1'>
                    <description>The amount of error in the model</description>
                  </element>
                </element>
                <element name ='mesh' required ='0'>
                  <description>Mesh shape</description>
                  <element name ='uri' required ='1' type ='string' default ='__default__'>
                    <description>Mesh uri</description>
                  </element>
                  <element name ='submesh' required ='0'>
                    <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
                    <element name ='name' required ='1' type ='string' default ='__default__'>
                      <description>Name of the submesh within the parent mesh</description>
                    </element>
                    <element name ='center' required ='0' type ='bool' default ='0'>
                      <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
                    </element>
                  </element>
                  <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
                    <description>Scaling factor applied to the mesh</description>
                  </element>
                </element>
                <element name ='plane' required ='0'>
                  <description>Plane shape</description>
                  <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
                    <description>Normal direction for the plane</description>
                  </element>
                  <element name ='size' required ='1' type ='vector2d' default ='1 1'>
                    <description>Length of each side of the plane</description>
                  </element>
                </element>
                <element name ='polyline' required ='0'>
                  <description>Defines an extruded polyline shape</description>
                  <element name ='point' required ='+' type ='vector2d' default ='0 0'>
                    <description>A series of points that define the path of the polyline.</description>
                  </element>
                  <element name ='height' required ='1' type ='double' default ='1'>
                    <description>Height of the polyline</description>
                  </element>
                </element>
                <element name ='sphere' required ='0'>
                  <description>Sphere shape</description>
                  <element name ='radius' required ='1' type ='double' default ='1'>
                    <description>radius of the sphere</description>
                  </element>
                </element>
              </element>
              <element name ='surface' required ='0'>
                <description>The surface parameters</description>
                <element name ='bounce' required ='0'>
                  <description></description>
                  <element name ='restitution_coefficient' required ='0' type ='double' default ='0'>
                    <description>Bounciness coefficient of restitution, from [0...1], where 0=no bounciness.</description>
                  </element>
                  <element name ='threshold' required ='0' type ='double' default ='100000'>
                    <description>Bounce capture velocity, below which effective coefficient of restitution is 0.</description>
                  </element>
                </element>
                <element name ='friction' required ='0'>
                  <description></description>
                  <element name ='torsional' required ='0'>
                    <description>Parameters for torsional friction</description>
                    <element name ='coefficient' required ='0' type ='double' default ='1'>
                      <description>Torsional friction coefficient, unitless maximum ratio of tangential stress to normal stress.</description>
                    </element>
                    <element name ='use_patch_radius' required ='0' type ='bool' default ='1'>
                      <description>If this flag is true, torsional friction is calculated using the "patch_radius" parameter. If this flag is set to false, "surface_radius" (R) and contact depth (d) are used to compute the patch radius as sqrt(R*d).</description>
                    </element>
                    <element name ='patch_radius' required ='0' type ='double' default ='0'>
                      <description>Radius of contact patch surface.</description>
                    </element>
                    <element name ='surface_radius' required ='0' type ='double' default ='0'>
                      <description>Surface radius on the point of contact.</description>
                    </element>
                    <element name ='ode' required ='0'>
                      <description>Torsional friction parameters for ODE</description>
                      <element name ='slip' required ='0' type ='double' default ='0'>
                        <description>Force dependent slip for torsional friction, equivalent to inverse of viscous damping coefficient with units of rad/s/(Nm). A slip value of 0 is infinitely viscous.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='ode' required ='0'>
                    <description>ODE friction parameters</description>
                    <element name ='mu' required ='0' type ='double' default ='1'>
                      <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
                    </element>
                    <element name ='mu2' required ='0' type ='double' default ='1'>
                      <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
                    </element>
                    <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                      <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the ODE Collide callback function will align the friction pyramid directions with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
                    </element>
                    <element name ='slip1' required ='0' type ='double' default ='0'>
                      <description>Force dependent slip in first friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
                    </element>
                    <element name ='slip2' required ='0' type ='double' default ='0'>
                      <description>Force dependent slip in second friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
                    </element>
                  </element>
                  <element name ='bullet' required ='0'>
                    <description></description>
                    <element name ='friction' required ='0' type ='double' default ='1'>
                      <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
                    </element>
                    <element name ='friction2' required ='0' type ='double' default ='1'>
                      <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
                    </element>
                    <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                      <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the friction pyramid directions will be aligned with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
                    </element>
                    <element name ='rolling_friction' required ='0' type ='double' default ='1'>
                      <description>Coefficient of rolling friction</description>
                    </element>
                  </element>
                </element>
                <element name ='contact' required ='0'>
                  <description></description>
                  <element name ='collide_without_contact' required ='0' type ='bool' default ='0'>
                    <description>Flag to disable contact force generation, while still allowing collision checks and contact visualization to occur.</description>
                  </element>
                  <element name ='collide_without_contact_bitmask' required ='0' type ='unsigned int' default ='1'>
                    <description>Bitmask for collision filtering when collide_without_contact is on</description>
                  </element>
                  <element name ='collide_bitmask' required ='0' type ='unsigned int' default ='65535'>
                    <description>Bitmask for collision filtering. This will override collide_without_contact</description>
                  </element>
                  <element name ='category_bitmask' required ='0' type ='unsigned int' default ='65535'>
                    <description>Bitmask for category of collision filtering. Collision happens if ((category1 & collision2) | (category2 & collision1)) is not zero. If not specified, the category_bitmask should be interpreted as being the same as collide_bitmask.</description>
                  </element>
                  <element name ='poissons_ratio' required ='0' type ='double' default ='0.3'>
                    <description>Poisson's ratio is the unitless ratio between transverse and axial strain. This value must lie between (-1, 0.5). Defaults to 0.3 for typical steel. Note typical silicone elastomers have Poisson's ratio near 0.49 ~ 0.50. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
                  </element>
                  <element name ='elastic_modulus' required ='0' type ='double' default ='-1'>
                    <description>Young's Modulus in SI derived unit Pascal. Defaults to -1. If value is less or equal to zero, contact using elastic modulus (with Poisson's Ratio) is disabled. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
                  </element>
                  <element name ='ode' required ='0'>
                    <description>ODE contact parameters</description>
                    <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                      <description>Soft constraint force mixing.</description>
                    </element>
                    <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                      <description>Soft error reduction parameter</description>
                    </element>
                    <element name ='kp' required ='0' type ='double' default ='1e+12'>
                      <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
                    </element>
                    <element name ='kd' required ='0' type ='double' default ='1'>
                      <description>dynamically "damping"-equivalent coefficient for contact joints</description>
                    </element>
                    <element name ='max_vel' required ='0' type ='double' default ='0.01'>
                      <description>maximum contact correction velocity truncation term.</description>
                    </element>
                    <element name ='min_depth' required ='0' type ='double' default ='0'>
                      <description>minimum allowable depth before contact correction impulse is applied</description>
                    </element>
                  </element>
                  <element name ='bullet' required ='0'>
                    <description>Bullet contact parameters</description>
                    <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                      <description>Soft constraint force mixing.</description>
                    </element>
                    <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                      <description>Soft error reduction parameter</description>
                    </element>
                    <element name ='kp' required ='0' type ='double' default ='1e+12'>
                      <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
                    </element>
                    <element name ='kd' required ='0' type ='double' default ='1'>
                      <description>dynamically "damping"-equivalent coefficient for contact joints</description>
                    </element>
                    <element name ='split_impulse' required ='1' type ='bool' default ='1'>
                      <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
                    </element>
                    <element name ='split_impulse_penetration_threshold' required ='1' type ='double' default ='-0.01'>
                      <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
                    </element>
                  </element>
                </element>
                <element name ='soft_contact' required ='0'>
                  <description></description>
                  <element name ='dart' required ='0'>
                    <description>soft contact pamameters based on paper: http://www.cc.gatech.edu/graphics/projects/Sumit/homepage/papers/sigasia11/jain_softcontacts_siga11.pdf</description>
                    <element name ='bone_attachment' required ='1' type ='double' default ='100'>
                      <description>This is variable k_v in the soft contacts paper. Its unit is N/m.</description>
                    </element>
                    <element name ='stiffness' required ='1' type ='double' default ='100'>
                      <description>This is variable k_e in the soft contacts paper. Its unit is N/m.</description>
                    </element>
                    <element name ='damping' required ='1' type ='double' default ='10'>
                      <description>Viscous damping of point velocity in body frame. Its unit is N/m/s.</description>
                    </element>
                    <element name ='flesh_mass_fraction' required ='1' type ='double' default ='0.05'>
                      <description>Fraction of mass to be distributed among deformable nodes.</description>
                    </element>
                  </element>
                </element>
              </element>
            </element>
            <element name ='visual' required ='*'>
              <description>The visual properties of the link. This element specifies the shape of the object (box, cylinder, etc.) for visualization purposes.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='1'>
                <description>Unique name for the visual element within the scope of the parent link.</description>
              </attribute>
              <element name ='cast_shadows' required ='0' type ='bool' default ='1'>
                <description>If true the visual will cast shadows.</description>
              </element>
              <element name ='laser_retro' required ='0' type ='double' default ='0'>
                <description>will be implemented in the future release.</description>
              </element>
              <element name ='transparency' required ='0' type ='double' default ='0'>
                <description>The amount of transparency( 0=opaque, 1 = fully transparent)</description>
              </element>
              <element name ='meta' required ='0'>
                <description>Optional meta information for the visual. The information contained within this element should be used to provide additional feedback to an end user.</description>
                <element name ='layer' required ='0' type ='int' default ='0'>
                  <description>The layer in which this visual is displayed. The layer number is useful for programs, such as Gazebo, that put visuals in different layers for enhanced visualization.</description>
                </element>
              </element>
              <element name ='frame' required ='*'>
                <description>A frame of reference to which a pose is relative.</description>
                <attribute name ='name' type ='string' default ='' required ='1'>
                  <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                </attribute>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
              <element name ='material' required ='0'>
                <description>The material of the visual element.</description>
                <element name ='script' required ='0'>
                  <description>Name of material from an installed script file. This will override the color element if the script exists.</description>
                  <element name ='uri' required ='+' type ='string' default ='__default__'>
                    <description>URI of the material script file</description>
                  </element>
                  <element name ='name' required ='1' type ='string' default ='__default__'>
                    <description>Name of the script within the script file</description>
                  </element>
                </element>
                <element name ='shader' required ='0'>
                  <description></description>
                  <attribute name ='type' type ='string' default ='pixel' required ='1'>
                    <description>vertex, pixel, normal_map_objectspace, normal_map_tangentspace</description>
                  </attribute>
                  <element name ='normal_map' required ='0' type ='string' default ='__default__'>
                    <description>filename of the normal map</description>
                  </element>
                </element>
                <element name ='lighting' required ='0' type ='bool' default ='1'>
                  <description>If false, dynamic lighting will be disabled</description>
                </element>
                <element name ='ambient' required ='0' type ='color' default ='0 0 0 1'>
                  <description>The ambient color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
                </element>
                <element name ='diffuse' required ='0' type ='color' default ='0 0 0 1'>
                  <description>The diffuse color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
                </element>
                <element name ='specular' required ='0' type ='color' default ='0 0 0 1'>
                  <description>The specular color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
                </element>
                <element name ='emissive' required ='0' type ='color' default ='0 0 0 1'>
                  <description>The emissive color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
                </element>
              </element>
              <element name ='geometry' required ='1'>
                <description>The shape of the visual or collision object.</description>
                <element name ='empty' required ='0'>
                  <description>You can use the empty tag to make empty geometries.</description>
                </element>
                <element name ='box' required ='0'>
                  <description>Box shape</description>
                  <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
                    <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
                  </element>
                </element>
                <element name ='cylinder' required ='0'>
                  <description>Cylinder shape</description>
                  <element name ='radius' required ='1' type ='double' default ='1'>
                    <description>Radius of the cylinder</description>
                  </element>
                  <element name ='length' required ='1' type ='double' default ='1'>
                    <description>Length of the cylinder</description>
                  </element>
                </element>
                <element name ='heightmap' required ='0'>
                  <description>A heightmap based on a 2d grayscale image.</description>
                  <element name ='uri' required ='1' type ='string' default ='__default__'>
                    <description>URI to a grayscale image file</description>
                  </element>
                  <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
                    <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
                  </element>
                  <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
                    <description>A position offset.</description>
                  </element>
                  <element name ='texture' required ='*'>
                    <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
                    <element name ='size' required ='1' type ='double' default ='10'>
                      <description>Size of the applied texture in meters.</description>
                    </element>
                    <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                      <description>Diffuse texture image filename</description>
                    </element>
                    <element name ='normal' required ='1' type ='string' default ='__default__'>
                      <description>Normalmap texture image filename</description>
                    </element>
                  </element>
                  <element name ='blend' required ='*'>
                    <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
                    <element name ='min_height' required ='1' type ='double' default ='0'>
                      <description>Min height of a blend layer</description>
                    </element>
                    <element name ='fade_dist' required ='1' type ='double' default ='0'>
                      <description>Distance over which the blend occurs</description>
                    </element>
                  </element>
                  <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
                    <description>Set if the rendering engine will use terrain paging</description>
                  </element>
                  <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
                    <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
                  </element>
                </element>
                <element name ='image' required ='0'>
                  <description>Extrude a set of boxes from a grayscale image.</description>
                  <element name ='uri' required ='1' type ='string' default ='__default__'>
                    <description>URI of the grayscale image file</description>
                  </element>
                  <element name ='scale' required ='1' type ='double' default ='1'>
                    <description>Scaling factor applied to the image</description>
                  </element>
                  <element name ='threshold' required ='1' type ='int' default ='200'>
                    <description>Grayscale threshold</description>
                  </element>
                  <element name ='height' required ='1' type ='double' default ='1'>
                    <description>Height of the extruded boxes</description>
                  </element>
                  <element name ='granularity' required ='1' type ='int' default ='1'>
                    <description>The amount of error in the model</description>
                  </element>
                </element>
                <element name ='mesh' required ='0'>
                  <description>Mesh shape</description>
                  <element name ='uri' required ='1' type ='string' default ='__default__'>
                    <description>Mesh uri</description>
                  </element>
                  <element name ='submesh' required ='0'>
                    <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
                    <element name ='name' required ='1' type ='string' default ='__default__'>
                      <description>Name of the submesh within the parent mesh</description>
                    </element>
                    <element name ='center' required ='0' type ='bool' default ='0'>
                      <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
                    </element>
                  </element>
                  <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
                    <description>Scaling factor applied to the mesh</description>
                  </element>
                </element>
                <element name ='plane' required ='0'>
                  <description>Plane shape</description>
                  <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
                    <description>Normal direction for the plane</description>
                  </element>
                  <element name ='size' required ='1' type ='vector2d' default ='1 1'>
                    <description>Length of each side of the plane</description>
                  </element>
                </element>
                <element name ='polyline' required ='0'>
                  <description>Defines an extruded polyline shape</description>
                  <element name ='point' required ='+' type ='vector2d' default ='0 0'>
                    <description>A series of points that define the path of the polyline.</description>
                  </element>
                  <element name ='height' required ='1' type ='double' default ='1'>
                    <description>Height of the polyline</description>
                  </element>
                </element>
                <element name ='sphere' required ='0'>
                  <description>Sphere shape</description>
                  <element name ='radius' required ='1' type ='double' default ='1'>
                    <description>radius of the sphere</description>
                  </element>
                </element>
              </element>
              <element name ='plugin' required ='*'>
                <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
                <attribute name ='name' type ='string' default ='__default__' required ='1'>
                  <description>A unique name for the plugin, scoped to its parent.</description>
                </attribute>
                <attribute name ='filename' type ='string' default ='__default__' required ='1'>
                  <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
                </attribute>
                <element copy_data ='true' required ='*'/>
              </element>
            </element>
            <element name ='sensor' required ='0'>
              <description>The sensor tag describes the type and properties of a sensor.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='1'>
                <description>A unique name for the sensor. This name must not match another model in the model.</description>
              </attribute>
              <attribute name ='type' type ='string' default ='__default__' required ='1'>
                <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
              </attribute>
              <element name ='always_on' required ='0' type ='bool' default ='0'>
                <description>If true the sensor will always be updated according to the update rate.</description>
              </element>
              <element name ='update_rate' required ='0' type ='double' default ='0'>
                <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
              </element>
              <element name ='visualize' required ='0' type ='bool' default ='0'>
                <description>If true, the sensor is visualized in the GUI</description>
              </element>
              <element name ='topic' required ='0' type ='string' default ='__default__'>
                <description>Name of the topic on which data is published. This is necessary for visualization</description>
              </element>
              <element name ='frame' required ='*'>
                <description>A frame of reference to which a pose is relative.</description>
                <attribute name ='name' type ='string' default ='' required ='1'>
                  <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                </attribute>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
              <element name ='plugin' required ='*'>
                <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
                <attribute name ='name' type ='string' default ='__default__' required ='1'>
                  <description>A unique name for the plugin, scoped to its parent.</description>
                </attribute>
                <attribute name ='filename' type ='string' default ='__default__' required ='1'>
                  <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
                </attribute>
                <element copy_data ='true' required ='*'/>
              </element>
              <element name ='altimeter' required ='0'>
                <description>These elements are specific to an altimeter sensor.</description>
                <element name ='vertical_position' required ='0'>
                  <description>Noise parameters for vertical position</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='vertical_velocity' required ='0'>
                  <description>Noise parameters for vertical velocity</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='camera' required ='0'>
                <description>These elements are specific to camera sensors.</description>
                <attribute name ='name' type ='string' default ='__default__' required ='0'>
                  <description>An optional name for the camera.</description>
                </attribute>
                <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
                  <description>Horizontal field of view</description>
                </element>
                <element name ='image' required ='1'>
                  <description>The image size in pixels and format.</description>
                  <element name ='width' required ='1' type ='int' default ='320'>
                    <description>Width in pixels</description>
                  </element>
                  <element name ='height' required ='1' type ='int' default ='240'>
                    <description>Height in pixels</description>
                  </element>
                  <element name ='format' required ='0' type ='string' default ='R8G8B8'>
                    <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
                  </element>
                </element>
                <element name ='clip' required ='1'>
                  <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
                  <element name ='near' required ='1' type ='double' default ='0.1'>
                    <description>Near clipping plane</description>
                  </element>
                  <element name ='far' required ='1' type ='double' default ='100'>
                    <description>Far clipping plane</description>
                  </element>
                </element>
                <element name ='save' required ='0'>
                  <description>Enable or disable saving of camera frames.</description>
                  <attribute name ='enabled' type ='bool' default ='0' required ='1'>
                    <description>True = saving enabled</description>
                  </attribute>
                  <element name ='path' required ='1' type ='string' default ='__default__'>
                    <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
                  </element>
                </element>
                <element name ='depth_camera' required ='0'>
                  <description>Depth camera parameters</description>
                  <element name ='output' required ='1' type ='string' default ='depths'>
                    <description>Type of output</description>
                  </element>
                </element>
                <element name ='noise' required ='0'>
                  <description>The properties of the noise model that should be applied to generated images</description>
                  <element name ='type' required ='1' type ='string' default ='gaussian'>
                    <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
                  </element>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                </element>
                <element name ='distortion' required ='0'>
                  <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
                  <element name ='k1' required ='0' type ='double' default ='0'>
                    <description>The radial distortion coefficient k1</description>
                  </element>
                  <element name ='k2' required ='0' type ='double' default ='0'>
                    <description>The radial distortion coefficient k2</description>
                  </element>
                  <element name ='k3' required ='0' type ='double' default ='0'>
                    <description>The radial distortion coefficient k3</description>
                  </element>
                  <element name ='p1' required ='0' type ='double' default ='0'>
                    <description>The tangential distortion coefficient p1</description>
                  </element>
                  <element name ='p2' required ='0' type ='double' default ='0'>
                    <description>The tangential distortion coefficient p2</description>
                  </element>
                  <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
                    <description>The distortion center or principal point</description>
                  </element>
                </element>
                <element name ='lens' required ='0'>
                  <description>Lens projection description</description>
                  <element name ='type' required ='1' type ='string' default ='stereographic'>
                    <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
                  </element>
                  <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
                    <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
                  </element>
                  <element name ='custom_function' required ='0'>
                    <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
                    <element name ='c1' required ='0' type ='double' default ='1'>
                      <description>Linear scaling constant</description>
                    </element>
                    <element name ='c2' required ='0' type ='double' default ='1'>
                      <description>Angle scaling constant</description>
                    </element>
                    <element name ='c3' required ='0' type ='double' default ='0'>
                      <description>Angle offset constant</description>
                    </element>
                    <element name ='f' required ='0' type ='double' default ='1'>
                      <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
                    </element>
                    <element name ='fun' required ='1' type ='string' default ='tan'>
                      <description>Possible values are 'sin', 'tan' and 'id'</description>
                    </element>
                  </element>
                  <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
                    <description>Everything outside of the specified angle will be hidden, 90° by default</description>
                  </element>
                  <element name ='env_texture_size' required ='0' type ='int' default ='256'>
                    <description>Resolution of the environment cube map used to draw the world</description>
                  </element>
                  <element name ='intrinsics' required ='0'>
                    <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
                    <element name ='fx' required ='1' type ='double' default ='277'>
                      <description>X focal length (in pixels, overrides horizontal_fov)</description>
                    </element>
                    <element name ='fy' required ='1' type ='double' default ='277'>
                      <description>Y focal length (in pixels, overrides horizontal_fov)</description>
                    </element>
                    <element name ='cx' required ='1' type ='double' default ='160'>
                      <description>X principal point (in pixels)</description>
                    </element>
                    <element name ='cy' required ='1' type ='double' default ='120'>
                      <description>Y principal point (in pixels)</description>
                    </element>
                    <element name ='s' required ='1' type ='double' default ='1'>
                      <description>XY axis skew</description>
                    </element>
                  </element>
                </element>
                <element name ='frame' required ='*'>
                  <description>A frame of reference to which a pose is relative.</description>
                  <attribute name ='name' type ='string' default ='' required ='1'>
                    <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                  </attribute>
                  <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                    <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                    <attribute name ='frame' type ='string' default ='' required ='0'>
                      <description>Name of frame which the pose is defined relative to.</description>
                    </attribute>
                  </element>
                </element>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='contact' required ='0'>
                <description>These elements are specific to the contact sensor.</description>
                <element name ='collision' required ='1' type ='string' default ='__default__'>
                  <description>name of the collision element within a link that acts as the contact sensor.</description>
                </element>
                <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
                  <description>Topic on which contact data is published.</description>
                </element>
              </element>
              <element name ='gps' required ='0'>
                <description>These elements are specific to the GPS sensor.</description>
                <element name ='position_sensing' required ='0'>
                  <description>Parameters related to GPS position measurement.</description>
                  <element name ='horizontal' required ='0'>
                    <description>Noise parameters for horizontal position measurement, in units of meters.</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='vertical' required ='0'>
                    <description>Noise parameters for vertical position measurement, in units of meters.</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                </element>
                <element name ='velocity_sensing' required ='0'>
                  <description>Parameters related to GPS position measurement.</description>
                  <element name ='horizontal' required ='0'>
                    <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='vertical' required ='0'>
                    <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='imu' required ='0'>
                <description>These elements are specific to the IMU sensor.</description>
                <element name ='orientation_reference_frame' required ='0'>
                  <description></description>
                  <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
                    <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
                  </element>
                  <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
                    <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
                    <element name ='parent_frame' required ='0' type ='string' default =''>
                      <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                    </element>
                  </element>
                  <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
                    <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
                    <element name ='parent_frame' required ='0' type ='string' default =''>
                      <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                    </element>
                  </element>
                </element>
                <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
                  <description>Topic on which data is published.</description>
                </element>
                <element name ='angular_velocity' required ='0'>
                  <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
                  <element name ='x' required ='0'>
                    <description>Angular velocity about the X axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='y' required ='0'>
                    <description>Angular velocity about the Y axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='z' required ='0'>
                    <description>Angular velocity about the Z axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                </element>
                <element name ='linear_acceleration' required ='0'>
                  <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
                  <element name ='x' required ='0'>
                    <description>Linear acceleration about the X axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='y' required ='0'>
                    <description>Linear acceleration about the Y axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='z' required ='0'>
                    <description>Linear acceleration about the Z axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='logical_camera' required ='0'>
                <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
                <element name ='near' required ='1' type ='double' default ='0'>
                  <description>Near clipping distance of the view frustum</description>
                </element>
                <element name ='far' required ='1' type ='double' default ='1'>
                  <description>Far clipping distance of the view frustum</description>
                </element>
                <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
                  <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
                </element>
                <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
                  <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
                </element>
              </element>
              <element name ='magnetometer' required ='0'>
                <description>These elements are specific to a Magnetometer sensor.</description>
                <element name ='x' required ='0'>
                  <description>Parameters related to the body-frame X axis of the magnetometer</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='y' required ='0'>
                  <description>Parameters related to the body-frame Y axis of the magnetometer</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='z' required ='0'>
                  <description>Parameters related to the body-frame Z axis of the magnetometer</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='ray' required ='0'>
                <description>These elements are specific to the ray (laser) sensor.</description>
                <element name ='scan' required ='1'>
                  <description></description>
                  <element name ='horizontal' required ='1'>
                    <description></description>
                    <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                      <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                    </element>
                    <element name ='resolution' required ='1' type ='double' default ='1'>
                      <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                    </element>
                    <element name ='min_angle' required ='1' type ='double' default ='0'>
                      <description></description>
                    </element>
                    <element name ='max_angle' required ='1' type ='double' default ='0'>
                      <description>Must be greater or equal to min_angle</description>
                    </element>
                  </element>
                  <element name ='vertical' required ='0'>
                    <description></description>
                    <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                      <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                    </element>
                    <element name ='resolution' required ='0' type ='double' default ='1'>
                      <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                    </element>
                    <element name ='min_angle' required ='1' type ='double' default ='0'>
                      <description></description>
                    </element>
                    <element name ='max_angle' required ='1' type ='double' default ='0'>
                      <description>Must be greater or equal to min_angle</description>
                    </element>
                  </element>
                </element>
                <element name ='range' required ='1'>
                  <description>specifies range properties of each simulated ray</description>
                  <element name ='min' required ='1' type ='double' default ='0'>
                    <description>The minimum distance for each ray.</description>
                  </element>
                  <element name ='max' required ='1' type ='double' default ='0'>
                    <description>The maximum distance for each ray.</description>
                  </element>
                  <element name ='resolution' required ='0' type ='double' default ='0'>
                    <description>Linear resolution of each ray.</description>
                  </element>
                </element>
                <element name ='noise' required ='0'>
                  <description>The properties of the noise model that should be applied to generated scans</description>
                  <element name ='type' required ='1' type ='string' default ='gaussian'>
                    <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
                  </element>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                </element>
              </element>
              <element name ='rfidtag' required ='0'>
                <description></description>
              </element>
              <element name ='rfid' required ='0'>
                <description></description>
              </element>
              <element name ='sonar' required ='0'>
                <description>These elements are specific to the sonar sensor.</description>
                <element name ='geometry' required ='0' type ='string' default ='cone'>
                  <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
                </element>
                <element name ='min' required ='1' type ='double' default ='0'>
                  <description>Minimum range</description>
                </element>
                <element name ='max' required ='1' type ='double' default ='1'>
                  <description>Max range</description>
                </element>
                <element name ='radius' required ='0' type ='double' default ='0.5'>
                  <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
                </element>
              </element>
              <element name ='transceiver' required ='0'>
                <description>These elements are specific to a wireless transceiver.</description>
                <element name ='essid' required ='0' type ='string' default ='wireless'>
                  <description>Service set identifier (network name)</description>
                </element>
                <element name ='frequency' required ='0' type ='double' default ='2442'>
                  <description>Specifies the frequency of transmission in MHz</description>
                </element>
                <element name ='min_frequency' required ='0' type ='double' default ='2412'>
                  <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
                </element>
                <element name ='max_frequency' required ='0' type ='double' default ='2484'>
                  <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
                </element>
                <element name ='gain' required ='1' type ='double' default ='2.5'>
                  <description>Specifies the antenna gain in dBi</description>
                </element>
                <element name ='power' required ='1' type ='double' default ='14.5'>
                  <description>Specifies the transmission power in dBm</description>
                </element>
                <element name ='sensitivity' required ='0' type ='double' default ='-90'>
                  <description>Mininum received signal power in dBm</description>
                </element>
              </element>
              <element name ='force_torque' required ='0'>
                <description>These elements are specific to the force torque sensor.</description>
                <element name ='frame' required ='0' type ='string' default ='child'>
                  <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
                </element>
                <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
                  <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
                </element>
              </element>
            </element>
            <element name ='projector' required ='0'>
              <description></description>
              <attribute name ='name' type ='string' default ='__default__' required ='1'>
                <description>Name of the projector</description>
              </attribute>
              <element name ='texture' required ='1' type ='string' default ='__default__'>
                <description>Texture name</description>
              </element>
              <element name ='fov' required ='0' type ='double' default ='0.785'>
                <description>Field of view</description>
              </element>
              <element name ='near_clip' required ='0' type ='double' default ='0.1'>
                <description>Near clip distance</description>
              </element>
              <element name ='far_clip' required ='0' type ='double' default ='10'>
                <description>far clip distance</description>
              </element>
              <element name ='frame' required ='*'>
                <description>A frame of reference to which a pose is relative.</description>
                <attribute name ='name' type ='string' default ='' required ='1'>
                  <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                </attribute>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
              <element name ='plugin' required ='*'>
                <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
                <attribute name ='name' type ='string' default ='__default__' required ='1'>
                  <description>A unique name for the plugin, scoped to its parent.</description>
                </attribute>
                <attribute name ='filename' type ='string' default ='__default__' required ='1'>
                  <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
                </attribute>
                <element copy_data ='true' required ='*'/>
              </element>
            </element>
            <element name ='audio_sink' required ='*'>
              <description>An audio sink.</description>
            </element>
            <element name ='audio_source' required ='*'>
              <description>An audio source.</description>
              <element name ='uri' required ='1' type ='string' default ='__default__'>
                <description>URI of the audio media.</description>
              </element>
              <element name ='pitch' required ='0' type ='double' default ='1'>
                <description>Pitch for the audio media, in Hz</description>
              </element>
              <element name ='gain' required ='0' type ='double' default ='1'>
                <description>Gain for the audio media, in dB.</description>
              </element>
              <element name ='contact' required ='0'>
                <description>List of collision objects that will trigger audio playback.</description>
                <element name ='collision' required ='+' type ='string' default ='__default__'>
                  <description>Name of child collision element that will trigger audio playback.</description>
                </element>
              </element>
              <element name ='loop' required ='0' type ='bool' default ='0'>
                <description>True to make the audio source loop playback.</description>
              </element>
              <element name ='frame' required ='*'>
                <description>A frame of reference to which a pose is relative.</description>
                <attribute name ='name' type ='string' default ='' required ='1'>
                  <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                </attribute>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='battery' required ='*'>
              <description>Description of a battery.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='1'>
                <description>Unique name for the battery.</description>
              </attribute>
              <element name ='voltage' required ='1' type ='double' default ='0'>
                <description>Initial voltage in volts.</description>
              </element>
            </element>
            <element name ='light' required ='*'>
              <description>The light element describes a light source.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='0'>
                <description>A unique name for the light.</description>
              </attribute>
              <attribute name ='type' type ='string' default ='point' required ='1'>
                <description>The light type: point, directional, spot.</description>
              </attribute>
              <element name ='cast_shadows' required ='0' type ='bool' default ='0'>
                <description>When true, the light will cast shadows.</description>
              </element>
              <element name ='diffuse' required ='1' type ='color' default ='1 1 1 1'>
                <description>Diffuse light color</description>
              </element>
              <element name ='specular' required ='1' type ='color' default ='0.1 0.1 0.1 1'>
                <description>Specular light color</description>
              </element>
              <element name ='attenuation' required ='0'>
                <description>Light attenuation</description>
                <element name ='range' required ='1' type ='double' default ='10'>
                  <description>Range of the light</description>
                </element>
                <element name ='linear' required ='0' type ='double' default ='1'>
                  <description>The linear attenuation factor: 1 means attenuate evenly over the distance.</description>
                </element>
                <element name ='constant' required ='0' type ='double' default ='1'>
                  <description>The constant attenuation factor: 1.0 means never attenuate, 0.0 is complete attenutation.</description>
                </element>
                <element name ='quadratic' required ='0' type ='double' default ='0'>
                  <description>The quadratic attenuation factor: adds a curvature to the attenuation.</description>
                </element>
              </element>
              <element name ='direction' required ='1' type ='vector3' default ='0 0 -1'>
                <description>Direction of the light, only applicable for spot and directional lights.</description>
              </element>
              <element name ='spot' required ='0'>
                <description>Spot light parameters</description>
                <element name ='inner_angle' required ='1' type ='double' default ='0'>
                  <description>Angle covered by the bright inner cone</description>
                </element>
                <element name ='outer_angle' required ='1' type ='double' default ='0'>
                  <description>Angle covered by the outer cone</description>
                </element>
                <element name ='falloff' required ='1' type ='double' default ='0'>
                  <description>The rate of falloff between the inner and outer cones. 1.0 means a linear falloff, less means slower falloff, higher means faster falloff.</description>
                </element>
              </element>
              <element name ='frame' required ='*'>
                <description>A frame of reference to which a pose is relative.</description>
                <attribute name ='name' type ='string' default ='' required ='1'>
                  <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                </attribute>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
          </element>
          <element name ='joint' required ='*'>
            <description>A joint connections two links with kinematic and dynamic properties.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the joint within the scope of the model.</description>
            </attribute>
            <attribute name ='type' type ='string' default ='__default__' required ='1'>
              <description>The type of joint, which must be one of the following: (revolute) a hinge joint that rotates on a single axis with either a fixed or continuous range of motion, (gearbox) geared revolute joints, (revolute2) same as two revolute joints connected in series, (prismatic) a sliding joint that slides along an axis with a limited range specified by upper and lower limits, (ball) a ball and socket joint, (screw) a single degree of freedom joint with coupled sliding and rotational motion, (universal) like a ball joint, but constrains one degree of freedom, (fixed) a joint with zero degrees of freedom that rigidly connects two links.</description>
            </attribute>
            <element name ='parent' required ='1' type ='string' default ='__default__'>
              <description>Name of the parent link</description>
            </element>
            <element name ='child' required ='1' type ='string' default ='__default__'>
              <description>Name of the child link</description>
            </element>
            <element name ='gearbox_ratio' required ='0' type ='double' default ='1'>
              <description>Parameter for gearbox joints. Given theta_1 and theta_2 defined in description for gearbox_reference_body, theta_2 = -gearbox_ratio * theta_1.</description>
            </element>
            <element name ='gearbox_reference_body' required ='0' type ='string' default ='__default__'>
              <description>Parameter for gearbox joints. Gearbox ratio is enforced over two joint angles. First joint angle (theta_1) is the angle from the gearbox_reference_body to the parent link in the direction of the axis element and the second joint angle (theta_2) is the angle from the gearbox_reference_body to the child link in the direction of the axis2 element.</description>
            </element>
            <element name ='thread_pitch' required ='0' type ='double' default ='1'>
              <description>Parameter for screw joints.</description>
            </element>
            <element name ='axis' required ='0'>
              <description>Parameters related to the axis of rotation for revolute joints, the axis of translation for prismatic joints.</description>
              <element name ='initial_position' required ='0' type ='double' default ='0'>
                <description>Default joint position for this joint axis.</description>
              </element>
              <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
                <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
              </element>
              <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
                <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
              </element>
              <element name ='dynamics' required ='0'>
                <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
                <element name ='damping' required ='0' type ='double' default ='0'>
                  <description>The physical velocity dependent viscous damping coefficient of the joint.</description>
                </element>
                <element name ='friction' required ='0' type ='double' default ='0'>
                  <description>The physical static friction value of the joint.</description>
                </element>
                <element name ='spring_reference' required ='1' type ='double' default ='0'>
                  <description>The spring reference position for this joint axis.</description>
                </element>
                <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
                  <description>The spring stiffness for this joint axis.</description>
                </element>
              </element>
              <element name ='limit' required ='1'>
                <description>specifies the limits of this joint</description>
                <element name ='lower' required ='1' type ='double' default ='-1e+16'>
                  <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
                </element>
                <element name ='upper' required ='1' type ='double' default ='1e+16'>
                  <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
                </element>
                <element name ='effort' required ='0' type ='double' default ='-1'>
                  <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
                </element>
                <element name ='velocity' required ='0' type ='double' default ='-1'>
                  <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
                </element>
                <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
                  <description>Joint stop stiffness. Support physics engines: SimBody.</description>
                </element>
                <element name ='dissipation' required ='0' type ='double' default ='1'>
                  <description>Joint stop dissipation.</description>
                </element>
              </element>
            </element>
            <element name ='axis2' required ='0'>
              <description>Parameters related to the second axis of rotation for revolute2 joints and universal joints.</description>
              <element name ='initial_position' required ='0' type ='double' default ='0'>
                <description>Default joint position for this joint axis.</description>
              </element>
              <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
                <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
              </element>
              <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
                <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
              </element>
              <element name ='dynamics' required ='0'>
                <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
                <element name ='damping' required ='0' type ='double' default ='0'>
                  <description>The physical velocity dependent viscous damping coefficient of the joint. EXPERIMENTAL: if damping coefficient is negative and implicit_spring_damper is true, adaptive damping is used.</description>
                </element>
                <element name ='friction' required ='0' type ='double' default ='0'>
                  <description>The physical static friction value of the joint.</description>
                </element>
                <element name ='spring_reference' required ='1' type ='double' default ='0'>
                  <description>The spring reference position for this joint axis.</description>
                </element>
                <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
                  <description>The spring stiffness for this joint axis.</description>
                </element>
              </element>
              <element name ='limit' required ='0'>
                <description></description>
                <element name ='lower' required ='0' type ='double' default ='-1e+16'>
                  <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
                </element>
                <element name ='upper' required ='0' type ='double' default ='1e+16'>
                  <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
                </element>
                <element name ='effort' required ='0' type ='double' default ='-1'>
                  <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
                </element>
                <element name ='velocity' required ='0' type ='double' default ='-1'>
                  <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
                </element>
                <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
                  <description>Joint stop stiffness. Supported physics engines: SimBody.</description>
                </element>
                <element name ='dissipation' required ='0' type ='double' default ='1'>
                  <description>Joint stop dissipation. Supported physics engines: SimBody.</description>
                </element>
              </element>
            </element>
            <element name ='physics' required ='0'>
              <description>Parameters that are specific to a certain physics engine.</description>
              <element name ='simbody' required ='0'>
                <description>Simbody specific parameters</description>
                <element name ='must_be_loop_joint' required ='0' type ='bool' default ='0'>
                  <description>Force cut in the multibody graph at this joint.</description>
                </element>
              </element>
              <element name ='ode' required ='0'>
                <description>ODE specific parameters</description>
                <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
                  <description>(DEPRECATION WARNING: In SDF 1.5 this tag will be replaced by the same tag directly under the physics-block. For now, this tag overrides the one outside of ode-block, but in SDF 1.5 this tag will be removed completely.) If provide feedback is set to true, ODE will compute the constraint forces at this joint.</description>
                </element>
                <element name ='cfm_damping' required ='0' type ='bool' default ='0'>
                  <description>If cfm damping is set to true, ODE will use CFM to simulate damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active.</description>
                </element>
                <element name ='implicit_spring_damper' required ='0' type ='bool' default ='0'>
                  <description>If implicit_spring_damper is set to true, ODE will use CFM, ERP to simulate stiffness and damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active. This replaces cfm_damping parameter in sdf 1.4.</description>
                </element>
                <element name ='fudge_factor' required ='0' type ='double' default ='0'>
                  <description>Scale the excess for in a joint motor at joint limits. Should be between zero and one.</description>
                </element>
                <element name ='cfm' required ='0' type ='double' default ='0'>
                  <description>Constraint force mixing for constrained directions</description>
                </element>
                <element name ='erp' required ='0' type ='double' default ='0.2'>
                  <description>Error reduction parameter for constrained directions</description>
                </element>
                <element name ='bounce' required ='0' type ='double' default ='0'>
                  <description>Bounciness of the limits</description>
                </element>
                <element name ='max_force' required ='0' type ='double' default ='0'>
                  <description>Maximum force or torque used to reach the desired velocity.</description>
                </element>
                <element name ='velocity' required ='0' type ='double' default ='0'>
                  <description>The desired velocity of the joint. Should only be set if you want the joint to move on load.</description>
                </element>
                <element name ='limit' required ='0'>
                  <description></description>
                  <element name ='cfm' required ='1' type ='double' default ='0'>
                    <description>Constraint force mixing parameter used by the joint stop</description>
                  </element>
                  <element name ='erp' required ='1' type ='double' default ='0.2'>
                    <description>Error reduction parameter used by the joint stop</description>
                  </element>
                </element>
                <element name ='suspension' required ='0'>
                  <description></description>
                  <element name ='cfm' required ='1' type ='double' default ='0'>
                    <description>Suspension constraint force mixing parameter</description>
                  </element>
                  <element name ='erp' required ='1' type ='double' default ='0.2'>
                    <description>Suspension error reduction parameter</description>
                  </element>
                </element>
              </element>
              <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
                <description>If provide feedback is set to true, physics engine will compute the constraint forces at this joint. For now, provide_feedback under ode block will override this tag and given user warning about the migration. provide_feedback under ode is scheduled to be removed in SDF 1.5.</description>
              </element>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
            <element name ='sensor' required ='0'>
              <description>The sensor tag describes the type and properties of a sensor.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='1'>
                <description>A unique name for the sensor. This name must not match another model in the model.</description>
              </attribute>
              <attribute name ='type' type ='string' default ='__default__' required ='1'>
                <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
              </attribute>
              <element name ='always_on' required ='0' type ='bool' default ='0'>
                <description>If true the sensor will always be updated according to the update rate.</description>
              </element>
              <element name ='update_rate' required ='0' type ='double' default ='0'>
                <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
              </element>
              <element name ='visualize' required ='0' type ='bool' default ='0'>
                <description>If true, the sensor is visualized in the GUI</description>
              </element>
              <element name ='topic' required ='0' type ='string' default ='__default__'>
                <description>Name of the topic on which data is published. This is necessary for visualization</description>
              </element>
              <element name ='frame' required ='*'>
                <description>A frame of reference to which a pose is relative.</description>
                <attribute name ='name' type ='string' default ='' required ='1'>
                  <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                </attribute>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
              <element name ='plugin' required ='*'>
                <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
                <attribute name ='name' type ='string' default ='__default__' required ='1'>
                  <description>A unique name for the plugin, scoped to its parent.</description>
                </attribute>
                <attribute name ='filename' type ='string' default ='__default__' required ='1'>
                  <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
                </attribute>
                <element copy_data ='true' required ='*'/>
              </element>
              <element name ='altimeter' required ='0'>
                <description>These elements are specific to an altimeter sensor.</description>
                <element name ='vertical_position' required ='0'>
                  <description>Noise parameters for vertical position</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='vertical_velocity' required ='0'>
                  <description>Noise parameters for vertical velocity</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='camera' required ='0'>
                <description>These elements are specific to camera sensors.</description>
                <attribute name ='name' type ='string' default ='__default__' required ='0'>
                  <description>An optional name for the camera.</description>
                </attribute>
                <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
                  <description>Horizontal field of view</description>
                </element>
                <element name ='image' required ='1'>
                  <description>The image size in pixels and format.</description>
                  <element name ='width' required ='1' type ='int' default ='320'>
                    <description>Width in pixels</description>
                  </element>
                  <element name ='height' required ='1' type ='int' default ='240'>
                    <description>Height in pixels</description>
                  </element>
                  <element name ='format' required ='0' type ='string' default ='R8G8B8'>
                    <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
                  </element>
                </element>
                <element name ='clip' required ='1'>
                  <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
                  <element name ='near' required ='1' type ='double' default ='0.1'>
                    <description>Near clipping plane</description>
                  </element>
                  <element name ='far' required ='1' type ='double' default ='100'>
                    <description>Far clipping plane</description>
                  </element>
                </element>
                <element name ='save' required ='0'>
                  <description>Enable or disable saving of camera frames.</description>
                  <attribute name ='enabled' type ='bool' default ='0' required ='1'>
                    <description>True = saving enabled</description>
                  </attribute>
                  <element name ='path' required ='1' type ='string' default ='__default__'>
                    <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
                  </element>
                </element>
                <element name ='depth_camera' required ='0'>
                  <description>Depth camera parameters</description>
                  <element name ='output' required ='1' type ='string' default ='depths'>
                    <description>Type of output</description>
                  </element>
                </element>
                <element name ='noise' required ='0'>
                  <description>The properties of the noise model that should be applied to generated images</description>
                  <element name ='type' required ='1' type ='string' default ='gaussian'>
                    <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
                  </element>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                </element>
                <element name ='distortion' required ='0'>
                  <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
                  <element name ='k1' required ='0' type ='double' default ='0'>
                    <description>The radial distortion coefficient k1</description>
                  </element>
                  <element name ='k2' required ='0' type ='double' default ='0'>
                    <description>The radial distortion coefficient k2</description>
                  </element>
                  <element name ='k3' required ='0' type ='double' default ='0'>
                    <description>The radial distortion coefficient k3</description>
                  </element>
                  <element name ='p1' required ='0' type ='double' default ='0'>
                    <description>The tangential distortion coefficient p1</description>
                  </element>
                  <element name ='p2' required ='0' type ='double' default ='0'>
                    <description>The tangential distortion coefficient p2</description>
                  </element>
                  <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
                    <description>The distortion center or principal point</description>
                  </element>
                </element>
                <element name ='lens' required ='0'>
                  <description>Lens projection description</description>
                  <element name ='type' required ='1' type ='string' default ='stereographic'>
                    <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
                  </element>
                  <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
                    <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
                  </element>
                  <element name ='custom_function' required ='0'>
                    <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
                    <element name ='c1' required ='0' type ='double' default ='1'>
                      <description>Linear scaling constant</description>
                    </element>
                    <element name ='c2' required ='0' type ='double' default ='1'>
                      <description>Angle scaling constant</description>
                    </element>
                    <element name ='c3' required ='0' type ='double' default ='0'>
                      <description>Angle offset constant</description>
                    </element>
                    <element name ='f' required ='0' type ='double' default ='1'>
                      <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
                    </element>
                    <element name ='fun' required ='1' type ='string' default ='tan'>
                      <description>Possible values are 'sin', 'tan' and 'id'</description>
                    </element>
                  </element>
                  <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
                    <description>Everything outside of the specified angle will be hidden, 90° by default</description>
                  </element>
                  <element name ='env_texture_size' required ='0' type ='int' default ='256'>
                    <description>Resolution of the environment cube map used to draw the world</description>
                  </element>
                  <element name ='intrinsics' required ='0'>
                    <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
                    <element name ='fx' required ='1' type ='double' default ='277'>
                      <description>X focal length (in pixels, overrides horizontal_fov)</description>
                    </element>
                    <element name ='fy' required ='1' type ='double' default ='277'>
                      <description>Y focal length (in pixels, overrides horizontal_fov)</description>
                    </element>
                    <element name ='cx' required ='1' type ='double' default ='160'>
                      <description>X principal point (in pixels)</description>
                    </element>
                    <element name ='cy' required ='1' type ='double' default ='120'>
                      <description>Y principal point (in pixels)</description>
                    </element>
                    <element name ='s' required ='1' type ='double' default ='1'>
                      <description>XY axis skew</description>
                    </element>
                  </element>
                </element>
                <element name ='frame' required ='*'>
                  <description>A frame of reference to which a pose is relative.</description>
                  <attribute name ='name' type ='string' default ='' required ='1'>
                    <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                  </attribute>
                  <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                    <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                    <attribute name ='frame' type ='string' default ='' required ='0'>
                      <description>Name of frame which the pose is defined relative to.</description>
                    </attribute>
                  </element>
                </element>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='contact' required ='0'>
                <description>These elements are specific to the contact sensor.</description>
                <element name ='collision' required ='1' type ='string' default ='__default__'>
                  <description>name of the collision element within a link that acts as the contact sensor.</description>
                </element>
                <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
                  <description>Topic on which contact data is published.</description>
                </element>
              </element>
              <element name ='gps' required ='0'>
                <description>These elements are specific to the GPS sensor.</description>
                <element name ='position_sensing' required ='0'>
                  <description>Parameters related to GPS position measurement.</description>
                  <element name ='horizontal' required ='0'>
                    <description>Noise parameters for horizontal position measurement, in units of meters.</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='vertical' required ='0'>
                    <description>Noise parameters for vertical position measurement, in units of meters.</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                </element>
                <element name ='velocity_sensing' required ='0'>
                  <description>Parameters related to GPS position measurement.</description>
                  <element name ='horizontal' required ='0'>
                    <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='vertical' required ='0'>
                    <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='imu' required ='0'>
                <description>These elements are specific to the IMU sensor.</description>
                <element name ='orientation_reference_frame' required ='0'>
                  <description></description>
                  <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
                    <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
                  </element>
                  <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
                    <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
                    <element name ='parent_frame' required ='0' type ='string' default =''>
                      <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                    </element>
                  </element>
                  <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
                    <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
                    <element name ='parent_frame' required ='0' type ='string' default =''>
                      <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                    </element>
                  </element>
                </element>
                <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
                  <description>Topic on which data is published.</description>
                </element>
                <element name ='angular_velocity' required ='0'>
                  <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
                  <element name ='x' required ='0'>
                    <description>Angular velocity about the X axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='y' required ='0'>
                    <description>Angular velocity about the Y axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='z' required ='0'>
                    <description>Angular velocity about the Z axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                </element>
                <element name ='linear_acceleration' required ='0'>
                  <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
                  <element name ='x' required ='0'>
                    <description>Linear acceleration about the X axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='y' required ='0'>
                    <description>Linear acceleration about the Y axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                  <element name ='z' required ='0'>
                    <description>Linear acceleration about the Z axis</description>
                    <element name ='noise' required ='1'>
                      <description>The properties of a sensor noise model.</description>
                      <attribute name ='type' type ='string' default ='none' required ='1'>
                        <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                      </attribute>
                      <element name ='mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                      </element>
                      <element name ='bias_mean' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                      </element>
                      <element name ='precision' required ='0' type ='double' default ='0'>
                        <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                      </element>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='logical_camera' required ='0'>
                <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
                <element name ='near' required ='1' type ='double' default ='0'>
                  <description>Near clipping distance of the view frustum</description>
                </element>
                <element name ='far' required ='1' type ='double' default ='1'>
                  <description>Far clipping distance of the view frustum</description>
                </element>
                <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
                  <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
                </element>
                <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
                  <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
                </element>
              </element>
              <element name ='magnetometer' required ='0'>
                <description>These elements are specific to a Magnetometer sensor.</description>
                <element name ='x' required ='0'>
                  <description>Parameters related to the body-frame X axis of the magnetometer</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='y' required ='0'>
                  <description>Parameters related to the body-frame Y axis of the magnetometer</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='z' required ='0'>
                  <description>Parameters related to the body-frame Z axis of the magnetometer</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='ray' required ='0'>
                <description>These elements are specific to the ray (laser) sensor.</description>
                <element name ='scan' required ='1'>
                  <description></description>
                  <element name ='horizontal' required ='1'>
                    <description></description>
                    <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                      <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                    </element>
                    <element name ='resolution' required ='1' type ='double' default ='1'>
                      <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                    </element>
                    <element name ='min_angle' required ='1' type ='double' default ='0'>
                      <description></description>
                    </element>
                    <element name ='max_angle' required ='1' type ='double' default ='0'>
                      <description>Must be greater or equal to min_angle</description>
                    </element>
                  </element>
                  <element name ='vertical' required ='0'>
                    <description></description>
                    <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                      <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                    </element>
                    <element name ='resolution' required ='0' type ='double' default ='1'>
                      <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                    </element>
                    <element name ='min_angle' required ='1' type ='double' default ='0'>
                      <description></description>
                    </element>
                    <element name ='max_angle' required ='1' type ='double' default ='0'>
                      <description>Must be greater or equal to min_angle</description>
                    </element>
                  </element>
                </element>
                <element name ='range' required ='1'>
                  <description>specifies range properties of each simulated ray</description>
                  <element name ='min' required ='1' type ='double' default ='0'>
                    <description>The minimum distance for each ray.</description>
                  </element>
                  <element name ='max' required ='1' type ='double' default ='0'>
                    <description>The maximum distance for each ray.</description>
                  </element>
                  <element name ='resolution' required ='0' type ='double' default ='0'>
                    <description>Linear resolution of each ray.</description>
                  </element>
                </element>
                <element name ='noise' required ='0'>
                  <description>The properties of the noise model that should be applied to generated scans</description>
                  <element name ='type' required ='1' type ='string' default ='gaussian'>
                    <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
                  </element>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                </element>
              </element>
              <element name ='rfidtag' required ='0'>
                <description></description>
              </element>
              <element name ='rfid' required ='0'>
                <description></description>
              </element>
              <element name ='sonar' required ='0'>
                <description>These elements are specific to the sonar sensor.</description>
                <element name ='geometry' required ='0' type ='string' default ='cone'>
                  <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
                </element>
                <element name ='min' required ='1' type ='double' default ='0'>
                  <description>Minimum range</description>
                </element>
                <element name ='max' required ='1' type ='double' default ='1'>
                  <description>Max range</description>
                </element>
                <element name ='radius' required ='0' type ='double' default ='0.5'>
                  <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
                </element>
              </element>
              <element name ='transceiver' required ='0'>
                <description>These elements are specific to a wireless transceiver.</description>
                <element name ='essid' required ='0' type ='string' default ='wireless'>
                  <description>Service set identifier (network name)</description>
                </element>
                <element name ='frequency' required ='0' type ='double' default ='2442'>
                  <description>Specifies the frequency of transmission in MHz</description>
                </element>
                <element name ='min_frequency' required ='0' type ='double' default ='2412'>
                  <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
                </element>
                <element name ='max_frequency' required ='0' type ='double' default ='2484'>
                  <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
                </element>
                <element name ='gain' required ='1' type ='double' default ='2.5'>
                  <description>Specifies the antenna gain in dBi</description>
                </element>
                <element name ='power' required ='1' type ='double' default ='14.5'>
                  <description>Specifies the transmission power in dBm</description>
                </element>
                <element name ='sensitivity' required ='0' type ='double' default ='-90'>
                  <description>Mininum received signal power in dBm</description>
                </element>
              </element>
              <element name ='force_torque' required ='0'>
                <description>These elements are specific to the force torque sensor.</description>
                <element name ='frame' required ='0' type ='string' default ='child'>
                  <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
                </element>
                <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
                  <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='plugin' required ='*'>
            <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the plugin, scoped to its parent.</description>
            </attribute>
            <attribute name ='filename' type ='string' default ='__default__' required ='1'>
              <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
            </attribute>
            <element copy_data ='true' required ='*'/>
          </element>
          <element name ='gripper' required ='*'>
            <description></description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description></description>
            </attribute>
            <element name ='grasp_check' required ='0'>
              <description></description>
              <element name ='detach_steps' required ='0' type ='int' default ='40'>
                <description></description>
              </element>
              <element name ='attach_steps' required ='0' type ='int' default ='20'>
                <description></description>
              </element>
              <element name ='min_contact_count' required ='0' type ='unsigned int' default ='2'>
                <description></description>
              </element>
            </element>
            <element name ='gripper_link' required ='+' type ='string' default ='__default__'>
              <description></description>
            </element>
            <element name ='palm_link' required ='1' type ='string' default ='__default__'>
              <description></description>
            </element>
          </element>
        </element>
        <element name ='light' required ='*'>
          <description>The light element describes a light source.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='0'>
            <description>A unique name for the light.</description>
          </attribute>
          <attribute name ='type' type ='string' default ='point' required ='1'>
            <description>The light type: point, directional, spot.</description>
          </attribute>
          <element name ='cast_shadows' required ='0' type ='bool' default ='0'>
            <description>When true, the light will cast shadows.</description>
          </element>
          <element name ='diffuse' required ='1' type ='color' default ='1 1 1 1'>
            <description>Diffuse light color</description>
          </element>
          <element name ='specular' required ='1' type ='color' default ='0.1 0.1 0.1 1'>
            <description>Specular light color</description>
          </element>
          <element name ='attenuation' required ='0'>
            <description>Light attenuation</description>
            <element name ='range' required ='1' type ='double' default ='10'>
              <description>Range of the light</description>
            </element>
            <element name ='linear' required ='0' type ='double' default ='1'>
              <description>The linear attenuation factor: 1 means attenuate evenly over the distance.</description>
            </element>
            <element name ='constant' required ='0' type ='double' default ='1'>
              <description>The constant attenuation factor: 1.0 means never attenuate, 0.0 is complete attenutation.</description>
            </element>
            <element name ='quadratic' required ='0' type ='double' default ='0'>
              <description>The quadratic attenuation factor: adds a curvature to the attenuation.</description>
            </element>
          </element>
          <element name ='direction' required ='1' type ='vector3' default ='0 0 -1'>
            <description>Direction of the light, only applicable for spot and directional lights.</description>
          </element>
          <element name ='spot' required ='0'>
            <description>Spot light parameters</description>
            <element name ='inner_angle' required ='1' type ='double' default ='0'>
              <description>Angle covered by the bright inner cone</description>
            </element>
            <element name ='outer_angle' required ='1' type ='double' default ='0'>
              <description>Angle covered by the outer cone</description>
            </element>
            <element name ='falloff' required ='1' type ='double' default ='0'>
              <description>The rate of falloff between the inner and outer cones. 1.0 means a linear falloff, less means slower falloff, higher means faster falloff.</description>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
      </element>
      <element name ='deletions' required ='0'>
        <description>A list of names of deleted entities/</description>
        <element name ='name' required ='+' type ='string' default ='__default__'>
          <description>The name of a deleted entity.</description>
        </element>
      </element>
      <element name ='model' required ='*'>
        <description>Model state</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Name of the model</description>
        </attribute>
        <element name ='joint' required ='*'>
          <description>Joint angle</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Name of the joint</description>
          </attribute>
          <element name ='angle' required ='+' type ='double' default ='0'>
            <description>Angle of an axis</description>
            <attribute name ='axis' type ='unsigned int' default ='0' required ='1'>
              <description>Index of the axis.</description>
            </attribute>
          </element>
        </element>
        <element name ='model' required ='*'>
          <description>A nested model state element</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Name of the model.</description>
          </attribute>
          <element ref ='model_state' required ='*'/>
        </element>
        <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
          <description>Scale for the 3 dimensions of the model.</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='link' required ='*'>
          <description>Link state</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>Name of the link</description>
          </attribute>
          <element name ='velocity' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>Velocity of the link. The x, y, z components of the pose correspond to the linear velocity of the link, and the roll, pitch, yaw components correspond to the angular velocity of the link</description>
          </element>
          <element name ='acceleration' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>Acceleration of the link. The x, y, z components of the pose correspond to the linear acceleration of the link, and the roll, pitch, yaw components correspond to the angular acceleration of the link</description>
          </element>
          <element name ='wrench' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>Force and torque applied to the link. The x, y, z components of the pose correspond to the force applied to the link, and the roll, pitch, yaw components correspond to the torque applied to the link</description>
          </element>
          <element name ='collision' required ='*'>
            <description>Collision state</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>Name of the collision</description>
            </attribute>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
      </element>
      <element name ='light' required ='*'>
        <description>Light state</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Name of the light</description>
        </attribute>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
    </element>
    <element name ='population' required ='*'>
      <description>The population element defines how and where a set of models will be automatically populated in Gazebo.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the population. This name must not match another population in the world.</description>
      </attribute>
      <element name ='model_count' required ='1' type ='int' default ='1'>
        <description>The number of models to place.</description>
      </element>
      <element name ='distribution' required ='1'>
        <description>Specifies the type of object distribution and its optional parameters.</description>
        <element name ='type' required ='1' type ='string' default ='random'>
          <description>Define how the objects will be placed in the specified region. - random: Models placed at random. - uniform: Models approximately placed in a 2D grid pattern with control over the number of objects. - grid: Models evenly placed in a 2D grid pattern. The number of objects is not explicitly specified, it is based on the number of rows and columns of the grid. - linear-x: Models evently placed in a row along the global x-axis. - linear-y: Models evently placed in a row along the global y-axis. - linear-z: Models evently placed in a row along the global z-axis.</description>
        </element>
        <element name ='rows' required ='0' type ='int' default ='1'>
          <description>Number of rows in the grid.</description>
        </element>
        <element name ='cols' required ='0' type ='int' default ='1'>
          <description>Number of columns in the grid.</description>
        </element>
        <element name ='step' required ='0' type ='vector3' default ='0.5 0.5 0'>
          <description>Distance between elements of the grid.</description>
        </element>
      </element>
      <element name ='box' required ='0'>
        <description>Box shape</description>
        <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
          <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
        </element>
      </element>
      <element name ='cylinder' required ='0'>
        <description>Cylinder shape</description>
        <element name ='radius' required ='1' type ='double' default ='1'>
          <description>Radius of the cylinder</description>
        </element>
        <element name ='length' required ='1' type ='double' default ='1'>
          <description>Length of the cylinder</description>
        </element>
      </element>
      <element name ='frame' required ='*'>
        <description>A frame of reference to which a pose is relative.</description>
        <attribute name ='name' type ='string' default ='' required ='1'>
          <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
        </attribute>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
      <element name ='model' required ='*'>
        <description>The model element defines a complete robot or any other physical object.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the model. This name must not match another model in the world.</description>
        </attribute>
        <element name ='static' required ='0' type ='bool' default ='0'>
          <description>If set to true, the model is immovable. Otherwise the model is simulated in the dynamics engine.</description>
        </element>
        <element name ='self_collide' required ='0' type ='bool' default ='0'>
          <description>If set to true, all links in the model will collide with each other (except those connected by a joint). Can be overridden by the link or collision element self_collide property. Two links within a model will collide if link1.self_collide OR link2.self_collide. Links connected by a joint will never collide.</description>
        </element>
        <element name ='allow_auto_disable' required ='0' type ='bool' default ='1'>
          <description>Allows a model to auto-disable, which is means the physics engine can skip updating the model when the model is at rest. This parameter is only used by models with no joints.</description>
        </element>
        <element name ='include' required ='*'>
          <description>Include resources from a URI. This can be used to nest models.</description>
          <element name ='uri' required ='1' type ='string' default ='__default__'>
            <description>URI to a resource, such as a model</description>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>Override the pose of the included model. A position and orientation in the global coordinate frame for the model. Position(x,y,z) and rotation (roll, pitch yaw) in the global coordinate frame.</description>
          </element>
          <element name ='name' required ='0' type ='string' default =''>
            <description>Override the name of the included model.</description>
          </element>
          <element name ='static' required ='0' type ='bool' default ='0'>
            <description>Override the static value of the included model.</description>
          </element>
        </element>
        <element name ='model' required ='*'>
          <description>A nested model element</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the model. This name must not match another nested model in the same level as this model.</description>
          </attribute>
          <element ref ='model' required ='*'/>
        </element>
        <element name ='enable_wind' required ='0' type ='bool' default ='0'>
          <description>If set to true, all links in the model will be affected by the wind. Can be overriden by the link wind property.</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='link' required ='*'>
          <description>A physical link with inertia, collision, and visual properties. A link must be a child of a model, and any number of links may exist in a model.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the link within the scope of the model.</description>
          </attribute>
          <element name ='gravity' required ='0' type ='bool' default ='1'>
            <description>If true, the link is affected by gravity.</description>
          </element>
          <element name ='enable_wind' required ='0' type ='bool' default ='0'>
            <description>If true, the link is affected by the wind.</description>
          </element>
          <element name ='self_collide' required ='0' type ='bool' default ='0'>
            <description>If true, the link can collide with other links in the model. Two links within a model will collide if link1.self_collide OR link2.self_collide. Links connected by a joint will never collide.</description>
          </element>
          <element name ='kinematic' required ='0' type ='bool' default ='0'>
            <description>If true, the link is kinematic only</description>
          </element>
          <element name ='must_be_base_link' required ='0' type ='bool' default ='0'>
            <description>If true, the link will have 6DOF and be a direct child of world.</description>
          </element>
          <element name ='velocity_decay' required ='0'>
            <description>Exponential damping of the link's velocity.</description>
            <element name ='linear' required ='0' type ='double' default ='0'>
              <description>Linear damping</description>
            </element>
            <element name ='angular' required ='0' type ='double' default ='0'>
              <description>Angular damping</description>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='inertial' required ='0'>
            <description>The inertial properties of the link.</description>
            <element name ='mass' required ='0' type ='double' default ='1'>
              <description>The mass of the link.</description>
            </element>
            <element name ='inertia' required ='0'>
              <description>The 3x3 rotational inertia matrix. Because the rotational inertia matrix is symmetric, only 6 above-diagonal elements of this matrix are specified here, using the attributes ixx, ixy, ixz, iyy, iyz, izz.</description>
              <element name ='ixx' required ='1' type ='double' default ='1'>
                <description></description>
              </element>
              <element name ='ixy' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='ixz' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='iyy' required ='1' type ='double' default ='1'>
                <description></description>
              </element>
              <element name ='iyz' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='izz' required ='1' type ='double' default ='1'>
                <description></description>
              </element>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>This is the pose of the inertial reference frame, relative to the specified reference frame. The origin of the inertial reference frame needs to be at the center of gravity. The axes of the inertial reference frame do not need to be aligned with the principal axes of the inertia.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='collision' required ='*'>
            <description>The collision properties of a link. Note that this can be different from the visual properties of a link, for example, simpler collision models are often used to reduce computation time.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>Unique name for the collision element within the scope of the parent link.</description>
            </attribute>
            <element name ='laser_retro' required ='0' type ='double' default ='0'>
              <description>intensity value returned by laser sensor.</description>
            </element>
            <element name ='max_contacts' required ='0' type ='int' default ='10'>
              <description>Maximum number of contacts allowed between two entities. This value overrides the max_contacts element defined in physics.</description>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
            <element name ='geometry' required ='1'>
              <description>The shape of the visual or collision object.</description>
              <element name ='empty' required ='0'>
                <description>You can use the empty tag to make empty geometries.</description>
              </element>
              <element name ='box' required ='0'>
                <description>Box shape</description>
                <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
                  <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
                </element>
              </element>
              <element name ='cylinder' required ='0'>
                <description>Cylinder shape</description>
                <element name ='radius' required ='1' type ='double' default ='1'>
                  <description>Radius of the cylinder</description>
                </element>
                <element name ='length' required ='1' type ='double' default ='1'>
                  <description>Length of the cylinder</description>
                </element>
              </element>
              <element name ='heightmap' required ='0'>
                <description>A heightmap based on a 2d grayscale image.</description>
                <element name ='uri' required ='1' type ='string' default ='__default__'>
                  <description>URI to a grayscale image file</description>
                </element>
                <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
                  <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
                </element>
                <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
                  <description>A position offset.</description>
                </element>
                <element name ='texture' required ='*'>
                  <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
                  <element name ='size' required ='1' type ='double' default ='10'>
                    <description>Size of the applied texture in meters.</description>
                  </element>
                  <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                    <description>Diffuse texture image filename</description>
                  </element>
                  <element name ='normal' required ='1' type ='string' default ='__default__'>
                    <description>Normalmap texture image filename</description>
                  </element>
                </element>
                <element name ='blend' required ='*'>
                  <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
                  <element name ='min_height' required ='1' type ='double' default ='0'>
                    <description>Min height of a blend layer</description>
                  </element>
                  <element name ='fade_dist' required ='1' type ='double' default ='0'>
                    <description>Distance over which the blend occurs</description>
                  </element>
                </element>
                <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
                  <description>Set if the rendering engine will use terrain paging</description>
                </element>
                <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
                  <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
                </element>
              </element>
              <element name ='image' required ='0'>
                <description>Extrude a set of boxes from a grayscale image.</description>
                <element name ='uri' required ='1' type ='string' default ='__default__'>
                  <description>URI of the grayscale image file</description>
                </element>
                <element name ='scale' required ='1' type ='double' default ='1'>
                  <description>Scaling factor applied to the image</description>
                </element>
                <element name ='threshold' required ='1' type ='int' default ='200'>
                  <description>Grayscale threshold</description>
                </element>
                <element name ='height' required ='1' type ='double' default ='1'>
                  <description>Height of the extruded boxes</description>
                </element>
                <element name ='granularity' required ='1' type ='int' default ='1'>
                  <description>The amount of error in the model</description>
                </element>
              </element>
              <element name ='mesh' required ='0'>
                <description>Mesh shape</description>
                <element name ='uri' required ='1' type ='string' default ='__default__'>
                  <description>Mesh uri</description>
                </element>
                <element name ='submesh' required ='0'>
                  <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
                  <element name ='name' required ='1' type ='string' default ='__default__'>
                    <description>Name of the submesh within the parent mesh</description>
                  </element>
                  <element name ='center' required ='0' type ='bool' default ='0'>
                    <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
                  </element>
                </element>
                <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
                  <description>Scaling factor applied to the mesh</description>
                </element>
              </element>
              <element name ='plane' required ='0'>
                <description>Plane shape</description>
                <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
                  <description>Normal direction for the plane</description>
                </element>
                <element name ='size' required ='1' type ='vector2d' default ='1 1'>
                  <description>Length of each side of the plane</description>
                </element>
              </element>
              <element name ='polyline' required ='0'>
                <description>Defines an extruded polyline shape</description>
                <element name ='point' required ='+' type ='vector2d' default ='0 0'>
                  <description>A series of points that define the path of the polyline.</description>
                </element>
                <element name ='height' required ='1' type ='double' default ='1'>
                  <description>Height of the polyline</description>
                </element>
              </element>
              <element name ='sphere' required ='0'>
                <description>Sphere shape</description>
                <element name ='radius' required ='1' type ='double' default ='1'>
                  <description>radius of the sphere</description>
                </element>
              </element>
            </element>
            <element name ='surface' required ='0'>
              <description>The surface parameters</description>
              <element name ='bounce' required ='0'>
                <description></description>
                <element name ='restitution_coefficient' required ='0' type ='double' default ='0'>
                  <description>Bounciness coefficient of restitution, from [0...1], where 0=no bounciness.</description>
                </element>
                <element name ='threshold' required ='0' type ='double' default ='100000'>
                  <description>Bounce capture velocity, below which effective coefficient of restitution is 0.</description>
                </element>
              </element>
              <element name ='friction' required ='0'>
                <description></description>
                <element name ='torsional' required ='0'>
                  <description>Parameters for torsional friction</description>
                  <element name ='coefficient' required ='0' type ='double' default ='1'>
                    <description>Torsional friction coefficient, unitless maximum ratio of tangential stress to normal stress.</description>
                  </element>
                  <element name ='use_patch_radius' required ='0' type ='bool' default ='1'>
                    <description>If this flag is true, torsional friction is calculated using the "patch_radius" parameter. If this flag is set to false, "surface_radius" (R) and contact depth (d) are used to compute the patch radius as sqrt(R*d).</description>
                  </element>
                  <element name ='patch_radius' required ='0' type ='double' default ='0'>
                    <description>Radius of contact patch surface.</description>
                  </element>
                  <element name ='surface_radius' required ='0' type ='double' default ='0'>
                    <description>Surface radius on the point of contact.</description>
                  </element>
                  <element name ='ode' required ='0'>
                    <description>Torsional friction parameters for ODE</description>
                    <element name ='slip' required ='0' type ='double' default ='0'>
                      <description>Force dependent slip for torsional friction, equivalent to inverse of viscous damping coefficient with units of rad/s/(Nm). A slip value of 0 is infinitely viscous.</description>
                    </element>
                  </element>
                </element>
                <element name ='ode' required ='0'>
                  <description>ODE friction parameters</description>
                  <element name ='mu' required ='0' type ='double' default ='1'>
                    <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
                  </element>
                  <element name ='mu2' required ='0' type ='double' default ='1'>
                    <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
                  </element>
                  <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                    <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the ODE Collide callback function will align the friction pyramid directions with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
                  </element>
                  <element name ='slip1' required ='0' type ='double' default ='0'>
                    <description>Force dependent slip in first friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
                  </element>
                  <element name ='slip2' required ='0' type ='double' default ='0'>
                    <description>Force dependent slip in second friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
                  </element>
                </element>
                <element name ='bullet' required ='0'>
                  <description></description>
                  <element name ='friction' required ='0' type ='double' default ='1'>
                    <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
                  </element>
                  <element name ='friction2' required ='0' type ='double' default ='1'>
                    <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
                  </element>
                  <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                    <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the friction pyramid directions will be aligned with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
                  </element>
                  <element name ='rolling_friction' required ='0' type ='double' default ='1'>
                    <description>Coefficient of rolling friction</description>
                  </element>
                </element>
              </element>
              <element name ='contact' required ='0'>
                <description></description>
                <element name ='collide_without_contact' required ='0' type ='bool' default ='0'>
                  <description>Flag to disable contact force generation, while still allowing collision checks and contact visualization to occur.</description>
                </element>
                <element name ='collide_without_contact_bitmask' required ='0' type ='unsigned int' default ='1'>
                  <description>Bitmask for collision filtering when collide_without_contact is on</description>
                </element>
                <element name ='collide_bitmask' required ='0' type ='unsigned int' default ='65535'>
                  <description>Bitmask for collision filtering. This will override collide_without_contact</description>
                </element>
                <element name ='category_bitmask' required ='0' type ='unsigned int' default ='65535'>
                  <description>Bitmask for category of collision filtering. Collision happens if ((category1 & collision2) | (category2 & collision1)) is not zero. If not specified, the category_bitmask should be interpreted as being the same as collide_bitmask.</description>
                </element>
                <element name ='poissons_ratio' required ='0' type ='double' default ='0.3'>
                  <description>Poisson's ratio is the unitless ratio between transverse and axial strain. This value must lie between (-1, 0.5). Defaults to 0.3 for typical steel. Note typical silicone elastomers have Poisson's ratio near 0.49 ~ 0.50. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
                </element>
                <element name ='elastic_modulus' required ='0' type ='double' default ='-1'>
                  <description>Young's Modulus in SI derived unit Pascal. Defaults to -1. If value is less or equal to zero, contact using elastic modulus (with Poisson's Ratio) is disabled. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
                </element>
                <element name ='ode' required ='0'>
                  <description>ODE contact parameters</description>
                  <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                    <description>Soft constraint force mixing.</description>
                  </element>
                  <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                    <description>Soft error reduction parameter</description>
                  </element>
                  <element name ='kp' required ='0' type ='double' default ='1e+12'>
                    <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
                  </element>
                  <element name ='kd' required ='0' type ='double' default ='1'>
                    <description>dynamically "damping"-equivalent coefficient for contact joints</description>
                  </element>
                  <element name ='max_vel' required ='0' type ='double' default ='0.01'>
                    <description>maximum contact correction velocity truncation term.</description>
                  </element>
                  <element name ='min_depth' required ='0' type ='double' default ='0'>
                    <description>minimum allowable depth before contact correction impulse is applied</description>
                  </element>
                </element>
                <element name ='bullet' required ='0'>
                  <description>Bullet contact parameters</description>
                  <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                    <description>Soft constraint force mixing.</description>
                  </element>
                  <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                    <description>Soft error reduction parameter</description>
                  </element>
                  <element name ='kp' required ='0' type ='double' default ='1e+12'>
                    <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
                  </element>
                  <element name ='kd' required ='0' type ='double' default ='1'>
                    <description>dynamically "damping"-equivalent coefficient for contact joints</description>
                  </element>
                  <element name ='split_impulse' required ='1' type ='bool' default ='1'>
                    <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
                  </element>
                  <element name ='split_impulse_penetration_threshold' required ='1' type ='double' default ='-0.01'>
                    <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
                  </element>
                </element>
              </element>
              <element name ='soft_contact' required ='0'>
                <description></description>
                <element name ='dart' required ='0'>
                  <description>soft contact pamameters based on paper: http://www.cc.gatech.edu/graphics/projects/Sumit/homepage/papers/sigasia11/jain_softcontacts_siga11.pdf</description>
                  <element name ='bone_attachment' required ='1' type ='double' default ='100'>
                    <description>This is variable k_v in the soft contacts paper. Its unit is N/m.</description>
                  </element>
                  <element name ='stiffness' required ='1' type ='double' default ='100'>
                    <description>This is variable k_e in the soft contacts paper. Its unit is N/m.</description>
                  </element>
                  <element name ='damping' required ='1' type ='double' default ='10'>
                    <description>Viscous damping of point velocity in body frame. Its unit is N/m/s.</description>
                  </element>
                  <element name ='flesh_mass_fraction' required ='1' type ='double' default ='0.05'>
                    <description>Fraction of mass to be distributed among deformable nodes.</description>
                  </element>
                </element>
              </element>
            </element>
          </element>
          <element name ='visual' required ='*'>
            <description>The visual properties of the link. This element specifies the shape of the object (box, cylinder, etc.) for visualization purposes.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>Unique name for the visual element within the scope of the parent link.</description>
            </attribute>
            <element name ='cast_shadows' required ='0' type ='bool' default ='1'>
              <description>If true the visual will cast shadows.</description>
            </element>
            <element name ='laser_retro' required ='0' type ='double' default ='0'>
              <description>will be implemented in the future release.</description>
            </element>
            <element name ='transparency' required ='0' type ='double' default ='0'>
              <description>The amount of transparency( 0=opaque, 1 = fully transparent)</description>
            </element>
            <element name ='meta' required ='0'>
              <description>Optional meta information for the visual. The information contained within this element should be used to provide additional feedback to an end user.</description>
              <element name ='layer' required ='0' type ='int' default ='0'>
                <description>The layer in which this visual is displayed. The layer number is useful for programs, such as Gazebo, that put visuals in different layers for enhanced visualization.</description>
              </element>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
            <element name ='material' required ='0'>
              <description>The material of the visual element.</description>
              <element name ='script' required ='0'>
                <description>Name of material from an installed script file. This will override the color element if the script exists.</description>
                <element name ='uri' required ='+' type ='string' default ='__default__'>
                  <description>URI of the material script file</description>
                </element>
                <element name ='name' required ='1' type ='string' default ='__default__'>
                  <description>Name of the script within the script file</description>
                </element>
              </element>
              <element name ='shader' required ='0'>
                <description></description>
                <attribute name ='type' type ='string' default ='pixel' required ='1'>
                  <description>vertex, pixel, normal_map_objectspace, normal_map_tangentspace</description>
                </attribute>
                <element name ='normal_map' required ='0' type ='string' default ='__default__'>
                  <description>filename of the normal map</description>
                </element>
              </element>
              <element name ='lighting' required ='0' type ='bool' default ='1'>
                <description>If false, dynamic lighting will be disabled</description>
              </element>
              <element name ='ambient' required ='0' type ='color' default ='0 0 0 1'>
                <description>The ambient color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
              </element>
              <element name ='diffuse' required ='0' type ='color' default ='0 0 0 1'>
                <description>The diffuse color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
              </element>
              <element name ='specular' required ='0' type ='color' default ='0 0 0 1'>
                <description>The specular color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
              </element>
              <element name ='emissive' required ='0' type ='color' default ='0 0 0 1'>
                <description>The emissive color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
              </element>
            </element>
            <element name ='geometry' required ='1'>
              <description>The shape of the visual or collision object.</description>
              <element name ='empty' required ='0'>
                <description>You can use the empty tag to make empty geometries.</description>
              </element>
              <element name ='box' required ='0'>
                <description>Box shape</description>
                <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
                  <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
                </element>
              </element>
              <element name ='cylinder' required ='0'>
                <description>Cylinder shape</description>
                <element name ='radius' required ='1' type ='double' default ='1'>
                  <description>Radius of the cylinder</description>
                </element>
                <element name ='length' required ='1' type ='double' default ='1'>
                  <description>Length of the cylinder</description>
                </element>
              </element>
              <element name ='heightmap' required ='0'>
                <description>A heightmap based on a 2d grayscale image.</description>
                <element name ='uri' required ='1' type ='string' default ='__default__'>
                  <description>URI to a grayscale image file</description>
                </element>
                <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
                  <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
                </element>
                <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
                  <description>A position offset.</description>
                </element>
                <element name ='texture' required ='*'>
                  <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
                  <element name ='size' required ='1' type ='double' default ='10'>
                    <description>Size of the applied texture in meters.</description>
                  </element>
                  <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                    <description>Diffuse texture image filename</description>
                  </element>
                  <element name ='normal' required ='1' type ='string' default ='__default__'>
                    <description>Normalmap texture image filename</description>
                  </element>
                </element>
                <element name ='blend' required ='*'>
                  <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
                  <element name ='min_height' required ='1' type ='double' default ='0'>
                    <description>Min height of a blend layer</description>
                  </element>
                  <element name ='fade_dist' required ='1' type ='double' default ='0'>
                    <description>Distance over which the blend occurs</description>
                  </element>
                </element>
                <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
                  <description>Set if the rendering engine will use terrain paging</description>
                </element>
                <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
                  <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
                </element>
              </element>
              <element name ='image' required ='0'>
                <description>Extrude a set of boxes from a grayscale image.</description>
                <element name ='uri' required ='1' type ='string' default ='__default__'>
                  <description>URI of the grayscale image file</description>
                </element>
                <element name ='scale' required ='1' type ='double' default ='1'>
                  <description>Scaling factor applied to the image</description>
                </element>
                <element name ='threshold' required ='1' type ='int' default ='200'>
                  <description>Grayscale threshold</description>
                </element>
                <element name ='height' required ='1' type ='double' default ='1'>
                  <description>Height of the extruded boxes</description>
                </element>
                <element name ='granularity' required ='1' type ='int' default ='1'>
                  <description>The amount of error in the model</description>
                </element>
              </element>
              <element name ='mesh' required ='0'>
                <description>Mesh shape</description>
                <element name ='uri' required ='1' type ='string' default ='__default__'>
                  <description>Mesh uri</description>
                </element>
                <element name ='submesh' required ='0'>
                  <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
                  <element name ='name' required ='1' type ='string' default ='__default__'>
                    <description>Name of the submesh within the parent mesh</description>
                  </element>
                  <element name ='center' required ='0' type ='bool' default ='0'>
                    <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
                  </element>
                </element>
                <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
                  <description>Scaling factor applied to the mesh</description>
                </element>
              </element>
              <element name ='plane' required ='0'>
                <description>Plane shape</description>
                <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
                  <description>Normal direction for the plane</description>
                </element>
                <element name ='size' required ='1' type ='vector2d' default ='1 1'>
                  <description>Length of each side of the plane</description>
                </element>
              </element>
              <element name ='polyline' required ='0'>
                <description>Defines an extruded polyline shape</description>
                <element name ='point' required ='+' type ='vector2d' default ='0 0'>
                  <description>A series of points that define the path of the polyline.</description>
                </element>
                <element name ='height' required ='1' type ='double' default ='1'>
                  <description>Height of the polyline</description>
                </element>
              </element>
              <element name ='sphere' required ='0'>
                <description>Sphere shape</description>
                <element name ='radius' required ='1' type ='double' default ='1'>
                  <description>radius of the sphere</description>
                </element>
              </element>
            </element>
            <element name ='plugin' required ='*'>
              <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='1'>
                <description>A unique name for the plugin, scoped to its parent.</description>
              </attribute>
              <attribute name ='filename' type ='string' default ='__default__' required ='1'>
                <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
              </attribute>
              <element copy_data ='true' required ='*'/>
            </element>
          </element>
          <element name ='sensor' required ='0'>
            <description>The sensor tag describes the type and properties of a sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the sensor. This name must not match another model in the model.</description>
            </attribute>
            <attribute name ='type' type ='string' default ='__default__' required ='1'>
              <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
            </attribute>
            <element name ='always_on' required ='0' type ='bool' default ='0'>
              <description>If true the sensor will always be updated according to the update rate.</description>
            </element>
            <element name ='update_rate' required ='0' type ='double' default ='0'>
              <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
            </element>
            <element name ='visualize' required ='0' type ='bool' default ='0'>
              <description>If true, the sensor is visualized in the GUI</description>
            </element>
            <element name ='topic' required ='0' type ='string' default ='__default__'>
              <description>Name of the topic on which data is published. This is necessary for visualization</description>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
            <element name ='plugin' required ='*'>
              <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='1'>
                <description>A unique name for the plugin, scoped to its parent.</description>
              </attribute>
              <attribute name ='filename' type ='string' default ='__default__' required ='1'>
                <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
              </attribute>
              <element copy_data ='true' required ='*'/>
            </element>
            <element name ='altimeter' required ='0'>
              <description>These elements are specific to an altimeter sensor.</description>
              <element name ='vertical_position' required ='0'>
                <description>Noise parameters for vertical position</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='vertical_velocity' required ='0'>
                <description>Noise parameters for vertical velocity</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='camera' required ='0'>
              <description>These elements are specific to camera sensors.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='0'>
                <description>An optional name for the camera.</description>
              </attribute>
              <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
                <description>Horizontal field of view</description>
              </element>
              <element name ='image' required ='1'>
                <description>The image size in pixels and format.</description>
                <element name ='width' required ='1' type ='int' default ='320'>
                  <description>Width in pixels</description>
                </element>
                <element name ='height' required ='1' type ='int' default ='240'>
                  <description>Height in pixels</description>
                </element>
                <element name ='format' required ='0' type ='string' default ='R8G8B8'>
                  <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
                </element>
              </element>
              <element name ='clip' required ='1'>
                <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
                <element name ='near' required ='1' type ='double' default ='0.1'>
                  <description>Near clipping plane</description>
                </element>
                <element name ='far' required ='1' type ='double' default ='100'>
                  <description>Far clipping plane</description>
                </element>
              </element>
              <element name ='save' required ='0'>
                <description>Enable or disable saving of camera frames.</description>
                <attribute name ='enabled' type ='bool' default ='0' required ='1'>
                  <description>True = saving enabled</description>
                </attribute>
                <element name ='path' required ='1' type ='string' default ='__default__'>
                  <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
                </element>
              </element>
              <element name ='depth_camera' required ='0'>
                <description>Depth camera parameters</description>
                <element name ='output' required ='1' type ='string' default ='depths'>
                  <description>Type of output</description>
                </element>
              </element>
              <element name ='noise' required ='0'>
                <description>The properties of the noise model that should be applied to generated images</description>
                <element name ='type' required ='1' type ='string' default ='gaussian'>
                  <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
                </element>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
              </element>
              <element name ='distortion' required ='0'>
                <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
                <element name ='k1' required ='0' type ='double' default ='0'>
                  <description>The radial distortion coefficient k1</description>
                </element>
                <element name ='k2' required ='0' type ='double' default ='0'>
                  <description>The radial distortion coefficient k2</description>
                </element>
                <element name ='k3' required ='0' type ='double' default ='0'>
                  <description>The radial distortion coefficient k3</description>
                </element>
                <element name ='p1' required ='0' type ='double' default ='0'>
                  <description>The tangential distortion coefficient p1</description>
                </element>
                <element name ='p2' required ='0' type ='double' default ='0'>
                  <description>The tangential distortion coefficient p2</description>
                </element>
                <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
                  <description>The distortion center or principal point</description>
                </element>
              </element>
              <element name ='lens' required ='0'>
                <description>Lens projection description</description>
                <element name ='type' required ='1' type ='string' default ='stereographic'>
                  <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
                </element>
                <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
                  <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
                </element>
                <element name ='custom_function' required ='0'>
                  <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
                  <element name ='c1' required ='0' type ='double' default ='1'>
                    <description>Linear scaling constant</description>
                  </element>
                  <element name ='c2' required ='0' type ='double' default ='1'>
                    <description>Angle scaling constant</description>
                  </element>
                  <element name ='c3' required ='0' type ='double' default ='0'>
                    <description>Angle offset constant</description>
                  </element>
                  <element name ='f' required ='0' type ='double' default ='1'>
                    <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
                  </element>
                  <element name ='fun' required ='1' type ='string' default ='tan'>
                    <description>Possible values are 'sin', 'tan' and 'id'</description>
                  </element>
                </element>
                <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
                  <description>Everything outside of the specified angle will be hidden, 90° by default</description>
                </element>
                <element name ='env_texture_size' required ='0' type ='int' default ='256'>
                  <description>Resolution of the environment cube map used to draw the world</description>
                </element>
                <element name ='intrinsics' required ='0'>
                  <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
                  <element name ='fx' required ='1' type ='double' default ='277'>
                    <description>X focal length (in pixels, overrides horizontal_fov)</description>
                  </element>
                  <element name ='fy' required ='1' type ='double' default ='277'>
                    <description>Y focal length (in pixels, overrides horizontal_fov)</description>
                  </element>
                  <element name ='cx' required ='1' type ='double' default ='160'>
                    <description>X principal point (in pixels)</description>
                  </element>
                  <element name ='cy' required ='1' type ='double' default ='120'>
                    <description>Y principal point (in pixels)</description>
                  </element>
                  <element name ='s' required ='1' type ='double' default ='1'>
                    <description>XY axis skew</description>
                  </element>
                </element>
              </element>
              <element name ='frame' required ='*'>
                <description>A frame of reference to which a pose is relative.</description>
                <attribute name ='name' type ='string' default ='' required ='1'>
                  <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                </attribute>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='contact' required ='0'>
              <description>These elements are specific to the contact sensor.</description>
              <element name ='collision' required ='1' type ='string' default ='__default__'>
                <description>name of the collision element within a link that acts as the contact sensor.</description>
              </element>
              <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
                <description>Topic on which contact data is published.</description>
              </element>
            </element>
            <element name ='gps' required ='0'>
              <description>These elements are specific to the GPS sensor.</description>
              <element name ='position_sensing' required ='0'>
                <description>Parameters related to GPS position measurement.</description>
                <element name ='horizontal' required ='0'>
                  <description>Noise parameters for horizontal position measurement, in units of meters.</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='vertical' required ='0'>
                  <description>Noise parameters for vertical position measurement, in units of meters.</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='velocity_sensing' required ='0'>
                <description>Parameters related to GPS position measurement.</description>
                <element name ='horizontal' required ='0'>
                  <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='vertical' required ='0'>
                  <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
            </element>
            <element name ='imu' required ='0'>
              <description>These elements are specific to the IMU sensor.</description>
              <element name ='orientation_reference_frame' required ='0'>
                <description></description>
                <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
                  <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
                </element>
                <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
                  <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
                  <element name ='parent_frame' required ='0' type ='string' default =''>
                    <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                  </element>
                </element>
                <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
                  <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
                  <element name ='parent_frame' required ='0' type ='string' default =''>
                    <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                  </element>
                </element>
              </element>
              <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
                <description>Topic on which data is published.</description>
              </element>
              <element name ='angular_velocity' required ='0'>
                <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
                <element name ='x' required ='0'>
                  <description>Angular velocity about the X axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='y' required ='0'>
                  <description>Angular velocity about the Y axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='z' required ='0'>
                  <description>Angular velocity about the Z axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='linear_acceleration' required ='0'>
                <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
                <element name ='x' required ='0'>
                  <description>Linear acceleration about the X axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='y' required ='0'>
                  <description>Linear acceleration about the Y axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='z' required ='0'>
                  <description>Linear acceleration about the Z axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
            </element>
            <element name ='logical_camera' required ='0'>
              <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
              <element name ='near' required ='1' type ='double' default ='0'>
                <description>Near clipping distance of the view frustum</description>
              </element>
              <element name ='far' required ='1' type ='double' default ='1'>
                <description>Far clipping distance of the view frustum</description>
              </element>
              <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
                <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
              </element>
              <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
                <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
              </element>
            </element>
            <element name ='magnetometer' required ='0'>
              <description>These elements are specific to a Magnetometer sensor.</description>
              <element name ='x' required ='0'>
                <description>Parameters related to the body-frame X axis of the magnetometer</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='y' required ='0'>
                <description>Parameters related to the body-frame Y axis of the magnetometer</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='z' required ='0'>
                <description>Parameters related to the body-frame Z axis of the magnetometer</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='ray' required ='0'>
              <description>These elements are specific to the ray (laser) sensor.</description>
              <element name ='scan' required ='1'>
                <description></description>
                <element name ='horizontal' required ='1'>
                  <description></description>
                  <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                    <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                  </element>
                  <element name ='resolution' required ='1' type ='double' default ='1'>
                    <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                  </element>
                  <element name ='min_angle' required ='1' type ='double' default ='0'>
                    <description></description>
                  </element>
                  <element name ='max_angle' required ='1' type ='double' default ='0'>
                    <description>Must be greater or equal to min_angle</description>
                  </element>
                </element>
                <element name ='vertical' required ='0'>
                  <description></description>
                  <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                    <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                  </element>
                  <element name ='resolution' required ='0' type ='double' default ='1'>
                    <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                  </element>
                  <element name ='min_angle' required ='1' type ='double' default ='0'>
                    <description></description>
                  </element>
                  <element name ='max_angle' required ='1' type ='double' default ='0'>
                    <description>Must be greater or equal to min_angle</description>
                  </element>
                </element>
              </element>
              <element name ='range' required ='1'>
                <description>specifies range properties of each simulated ray</description>
                <element name ='min' required ='1' type ='double' default ='0'>
                  <description>The minimum distance for each ray.</description>
                </element>
                <element name ='max' required ='1' type ='double' default ='0'>
                  <description>The maximum distance for each ray.</description>
                </element>
                <element name ='resolution' required ='0' type ='double' default ='0'>
                  <description>Linear resolution of each ray.</description>
                </element>
              </element>
              <element name ='noise' required ='0'>
                <description>The properties of the noise model that should be applied to generated scans</description>
                <element name ='type' required ='1' type ='string' default ='gaussian'>
                  <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
                </element>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
              </element>
            </element>
            <element name ='rfidtag' required ='0'>
              <description></description>
            </element>
            <element name ='rfid' required ='0'>
              <description></description>
            </element>
            <element name ='sonar' required ='0'>
              <description>These elements are specific to the sonar sensor.</description>
              <element name ='geometry' required ='0' type ='string' default ='cone'>
                <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
              </element>
              <element name ='min' required ='1' type ='double' default ='0'>
                <description>Minimum range</description>
              </element>
              <element name ='max' required ='1' type ='double' default ='1'>
                <description>Max range</description>
              </element>
              <element name ='radius' required ='0' type ='double' default ='0.5'>
                <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
              </element>
            </element>
            <element name ='transceiver' required ='0'>
              <description>These elements are specific to a wireless transceiver.</description>
              <element name ='essid' required ='0' type ='string' default ='wireless'>
                <description>Service set identifier (network name)</description>
              </element>
              <element name ='frequency' required ='0' type ='double' default ='2442'>
                <description>Specifies the frequency of transmission in MHz</description>
              </element>
              <element name ='min_frequency' required ='0' type ='double' default ='2412'>
                <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
              </element>
              <element name ='max_frequency' required ='0' type ='double' default ='2484'>
                <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
              </element>
              <element name ='gain' required ='1' type ='double' default ='2.5'>
                <description>Specifies the antenna gain in dBi</description>
              </element>
              <element name ='power' required ='1' type ='double' default ='14.5'>
                <description>Specifies the transmission power in dBm</description>
              </element>
              <element name ='sensitivity' required ='0' type ='double' default ='-90'>
                <description>Mininum received signal power in dBm</description>
              </element>
            </element>
            <element name ='force_torque' required ='0'>
              <description>These elements are specific to the force torque sensor.</description>
              <element name ='frame' required ='0' type ='string' default ='child'>
                <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
              </element>
              <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
                <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
              </element>
            </element>
          </element>
          <element name ='projector' required ='0'>
            <description></description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>Name of the projector</description>
            </attribute>
            <element name ='texture' required ='1' type ='string' default ='__default__'>
              <description>Texture name</description>
            </element>
            <element name ='fov' required ='0' type ='double' default ='0.785'>
              <description>Field of view</description>
            </element>
            <element name ='near_clip' required ='0' type ='double' default ='0.1'>
              <description>Near clip distance</description>
            </element>
            <element name ='far_clip' required ='0' type ='double' default ='10'>
              <description>far clip distance</description>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
            <element name ='plugin' required ='*'>
              <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='1'>
                <description>A unique name for the plugin, scoped to its parent.</description>
              </attribute>
              <attribute name ='filename' type ='string' default ='__default__' required ='1'>
                <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
              </attribute>
              <element copy_data ='true' required ='*'/>
            </element>
          </element>
          <element name ='audio_sink' required ='*'>
            <description>An audio sink.</description>
          </element>
          <element name ='audio_source' required ='*'>
            <description>An audio source.</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>URI of the audio media.</description>
            </element>
            <element name ='pitch' required ='0' type ='double' default ='1'>
              <description>Pitch for the audio media, in Hz</description>
            </element>
            <element name ='gain' required ='0' type ='double' default ='1'>
              <description>Gain for the audio media, in dB.</description>
            </element>
            <element name ='contact' required ='0'>
              <description>List of collision objects that will trigger audio playback.</description>
              <element name ='collision' required ='+' type ='string' default ='__default__'>
                <description>Name of child collision element that will trigger audio playback.</description>
              </element>
            </element>
            <element name ='loop' required ='0' type ='bool' default ='0'>
              <description>True to make the audio source loop playback.</description>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='battery' required ='*'>
            <description>Description of a battery.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>Unique name for the battery.</description>
            </attribute>
            <element name ='voltage' required ='1' type ='double' default ='0'>
              <description>Initial voltage in volts.</description>
            </element>
          </element>
          <element name ='light' required ='*'>
            <description>The light element describes a light source.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='0'>
              <description>A unique name for the light.</description>
            </attribute>
            <attribute name ='type' type ='string' default ='point' required ='1'>
              <description>The light type: point, directional, spot.</description>
            </attribute>
            <element name ='cast_shadows' required ='0' type ='bool' default ='0'>
              <description>When true, the light will cast shadows.</description>
            </element>
            <element name ='diffuse' required ='1' type ='color' default ='1 1 1 1'>
              <description>Diffuse light color</description>
            </element>
            <element name ='specular' required ='1' type ='color' default ='0.1 0.1 0.1 1'>
              <description>Specular light color</description>
            </element>
            <element name ='attenuation' required ='0'>
              <description>Light attenuation</description>
              <element name ='range' required ='1' type ='double' default ='10'>
                <description>Range of the light</description>
              </element>
              <element name ='linear' required ='0' type ='double' default ='1'>
                <description>The linear attenuation factor: 1 means attenuate evenly over the distance.</description>
              </element>
              <element name ='constant' required ='0' type ='double' default ='1'>
                <description>The constant attenuation factor: 1.0 means never attenuate, 0.0 is complete attenutation.</description>
              </element>
              <element name ='quadratic' required ='0' type ='double' default ='0'>
                <description>The quadratic attenuation factor: adds a curvature to the attenuation.</description>
              </element>
            </element>
            <element name ='direction' required ='1' type ='vector3' default ='0 0 -1'>
              <description>Direction of the light, only applicable for spot and directional lights.</description>
            </element>
            <element name ='spot' required ='0'>
              <description>Spot light parameters</description>
              <element name ='inner_angle' required ='1' type ='double' default ='0'>
                <description>Angle covered by the bright inner cone</description>
              </element>
              <element name ='outer_angle' required ='1' type ='double' default ='0'>
                <description>Angle covered by the outer cone</description>
              </element>
              <element name ='falloff' required ='1' type ='double' default ='0'>
                <description>The rate of falloff between the inner and outer cones. 1.0 means a linear falloff, less means slower falloff, higher means faster falloff.</description>
              </element>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
        </element>
        <element name ='joint' required ='*'>
          <description>A joint connections two links with kinematic and dynamic properties.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the joint within the scope of the model.</description>
          </attribute>
          <attribute name ='type' type ='string' default ='__default__' required ='1'>
            <description>The type of joint, which must be one of the following: (revolute) a hinge joint that rotates on a single axis with either a fixed or continuous range of motion, (gearbox) geared revolute joints, (revolute2) same as two revolute joints connected in series, (prismatic) a sliding joint that slides along an axis with a limited range specified by upper and lower limits, (ball) a ball and socket joint, (screw) a single degree of freedom joint with coupled sliding and rotational motion, (universal) like a ball joint, but constrains one degree of freedom, (fixed) a joint with zero degrees of freedom that rigidly connects two links.</description>
          </attribute>
          <element name ='parent' required ='1' type ='string' default ='__default__'>
            <description>Name of the parent link</description>
          </element>
          <element name ='child' required ='1' type ='string' default ='__default__'>
            <description>Name of the child link</description>
          </element>
          <element name ='gearbox_ratio' required ='0' type ='double' default ='1'>
            <description>Parameter for gearbox joints. Given theta_1 and theta_2 defined in description for gearbox_reference_body, theta_2 = -gearbox_ratio * theta_1.</description>
          </element>
          <element name ='gearbox_reference_body' required ='0' type ='string' default ='__default__'>
            <description>Parameter for gearbox joints. Gearbox ratio is enforced over two joint angles. First joint angle (theta_1) is the angle from the gearbox_reference_body to the parent link in the direction of the axis element and the second joint angle (theta_2) is the angle from the gearbox_reference_body to the child link in the direction of the axis2 element.</description>
          </element>
          <element name ='thread_pitch' required ='0' type ='double' default ='1'>
            <description>Parameter for screw joints.</description>
          </element>
          <element name ='axis' required ='0'>
            <description>Parameters related to the axis of rotation for revolute joints, the axis of translation for prismatic joints.</description>
            <element name ='initial_position' required ='0' type ='double' default ='0'>
              <description>Default joint position for this joint axis.</description>
            </element>
            <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
              <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
            </element>
            <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
              <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
            </element>
            <element name ='dynamics' required ='0'>
              <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
              <element name ='damping' required ='0' type ='double' default ='0'>
                <description>The physical velocity dependent viscous damping coefficient of the joint.</description>
              </element>
              <element name ='friction' required ='0' type ='double' default ='0'>
                <description>The physical static friction value of the joint.</description>
              </element>
              <element name ='spring_reference' required ='1' type ='double' default ='0'>
                <description>The spring reference position for this joint axis.</description>
              </element>
              <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
                <description>The spring stiffness for this joint axis.</description>
              </element>
            </element>
            <element name ='limit' required ='1'>
              <description>specifies the limits of this joint</description>
              <element name ='lower' required ='1' type ='double' default ='-1e+16'>
                <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
              </element>
              <element name ='upper' required ='1' type ='double' default ='1e+16'>
                <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
              </element>
              <element name ='effort' required ='0' type ='double' default ='-1'>
                <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
              </element>
              <element name ='velocity' required ='0' type ='double' default ='-1'>
                <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
              </element>
              <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
                <description>Joint stop stiffness. Support physics engines: SimBody.</description>
              </element>
              <element name ='dissipation' required ='0' type ='double' default ='1'>
                <description>Joint stop dissipation.</description>
              </element>
            </element>
          </element>
          <element name ='axis2' required ='0'>
            <description>Parameters related to the second axis of rotation for revolute2 joints and universal joints.</description>
            <element name ='initial_position' required ='0' type ='double' default ='0'>
              <description>Default joint position for this joint axis.</description>
            </element>
            <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
              <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
            </element>
            <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
              <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
            </element>
            <element name ='dynamics' required ='0'>
              <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
              <element name ='damping' required ='0' type ='double' default ='0'>
                <description>The physical velocity dependent viscous damping coefficient of the joint. EXPERIMENTAL: if damping coefficient is negative and implicit_spring_damper is true, adaptive damping is used.</description>
              </element>
              <element name ='friction' required ='0' type ='double' default ='0'>
                <description>The physical static friction value of the joint.</description>
              </element>
              <element name ='spring_reference' required ='1' type ='double' default ='0'>
                <description>The spring reference position for this joint axis.</description>
              </element>
              <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
                <description>The spring stiffness for this joint axis.</description>
              </element>
            </element>
            <element name ='limit' required ='0'>
              <description></description>
              <element name ='lower' required ='0' type ='double' default ='-1e+16'>
                <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
              </element>
              <element name ='upper' required ='0' type ='double' default ='1e+16'>
                <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
              </element>
              <element name ='effort' required ='0' type ='double' default ='-1'>
                <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
              </element>
              <element name ='velocity' required ='0' type ='double' default ='-1'>
                <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
              </element>
              <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
                <description>Joint stop stiffness. Supported physics engines: SimBody.</description>
              </element>
              <element name ='dissipation' required ='0' type ='double' default ='1'>
                <description>Joint stop dissipation. Supported physics engines: SimBody.</description>
              </element>
            </element>
          </element>
          <element name ='physics' required ='0'>
            <description>Parameters that are specific to a certain physics engine.</description>
            <element name ='simbody' required ='0'>
              <description>Simbody specific parameters</description>
              <element name ='must_be_loop_joint' required ='0' type ='bool' default ='0'>
                <description>Force cut in the multibody graph at this joint.</description>
              </element>
            </element>
            <element name ='ode' required ='0'>
              <description>ODE specific parameters</description>
              <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
                <description>(DEPRECATION WARNING: In SDF 1.5 this tag will be replaced by the same tag directly under the physics-block. For now, this tag overrides the one outside of ode-block, but in SDF 1.5 this tag will be removed completely.) If provide feedback is set to true, ODE will compute the constraint forces at this joint.</description>
              </element>
              <element name ='cfm_damping' required ='0' type ='bool' default ='0'>
                <description>If cfm damping is set to true, ODE will use CFM to simulate damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active.</description>
              </element>
              <element name ='implicit_spring_damper' required ='0' type ='bool' default ='0'>
                <description>If implicit_spring_damper is set to true, ODE will use CFM, ERP to simulate stiffness and damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active. This replaces cfm_damping parameter in sdf 1.4.</description>
              </element>
              <element name ='fudge_factor' required ='0' type ='double' default ='0'>
                <description>Scale the excess for in a joint motor at joint limits. Should be between zero and one.</description>
              </element>
              <element name ='cfm' required ='0' type ='double' default ='0'>
                <description>Constraint force mixing for constrained directions</description>
              </element>
              <element name ='erp' required ='0' type ='double' default ='0.2'>
                <description>Error reduction parameter for constrained directions</description>
              </element>
              <element name ='bounce' required ='0' type ='double' default ='0'>
                <description>Bounciness of the limits</description>
              </element>
              <element name ='max_force' required ='0' type ='double' default ='0'>
                <description>Maximum force or torque used to reach the desired velocity.</description>
              </element>
              <element name ='velocity' required ='0' type ='double' default ='0'>
                <description>The desired velocity of the joint. Should only be set if you want the joint to move on load.</description>
              </element>
              <element name ='limit' required ='0'>
                <description></description>
                <element name ='cfm' required ='1' type ='double' default ='0'>
                  <description>Constraint force mixing parameter used by the joint stop</description>
                </element>
                <element name ='erp' required ='1' type ='double' default ='0.2'>
                  <description>Error reduction parameter used by the joint stop</description>
                </element>
              </element>
              <element name ='suspension' required ='0'>
                <description></description>
                <element name ='cfm' required ='1' type ='double' default ='0'>
                  <description>Suspension constraint force mixing parameter</description>
                </element>
                <element name ='erp' required ='1' type ='double' default ='0.2'>
                  <description>Suspension error reduction parameter</description>
                </element>
              </element>
            </element>
            <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
              <description>If provide feedback is set to true, physics engine will compute the constraint forces at this joint. For now, provide_feedback under ode block will override this tag and given user warning about the migration. provide_feedback under ode is scheduled to be removed in SDF 1.5.</description>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
          <element name ='sensor' required ='0'>
            <description>The sensor tag describes the type and properties of a sensor.</description>
            <attribute name ='name' type ='string' default ='__default__' required ='1'>
              <description>A unique name for the sensor. This name must not match another model in the model.</description>
            </attribute>
            <attribute name ='type' type ='string' default ='__default__' required ='1'>
              <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
            </attribute>
            <element name ='always_on' required ='0' type ='bool' default ='0'>
              <description>If true the sensor will always be updated according to the update rate.</description>
            </element>
            <element name ='update_rate' required ='0' type ='double' default ='0'>
              <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
            </element>
            <element name ='visualize' required ='0' type ='bool' default ='0'>
              <description>If true, the sensor is visualized in the GUI</description>
            </element>
            <element name ='topic' required ='0' type ='string' default ='__default__'>
              <description>Name of the topic on which data is published. This is necessary for visualization</description>
            </element>
            <element name ='frame' required ='*'>
              <description>A frame of reference to which a pose is relative.</description>
              <attribute name ='name' type ='string' default ='' required ='1'>
                <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
              </attribute>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
            <element name ='plugin' required ='*'>
              <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='1'>
                <description>A unique name for the plugin, scoped to its parent.</description>
              </attribute>
              <attribute name ='filename' type ='string' default ='__default__' required ='1'>
                <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
              </attribute>
              <element copy_data ='true' required ='*'/>
            </element>
            <element name ='altimeter' required ='0'>
              <description>These elements are specific to an altimeter sensor.</description>
              <element name ='vertical_position' required ='0'>
                <description>Noise parameters for vertical position</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='vertical_velocity' required ='0'>
                <description>Noise parameters for vertical velocity</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='camera' required ='0'>
              <description>These elements are specific to camera sensors.</description>
              <attribute name ='name' type ='string' default ='__default__' required ='0'>
                <description>An optional name for the camera.</description>
              </attribute>
              <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
                <description>Horizontal field of view</description>
              </element>
              <element name ='image' required ='1'>
                <description>The image size in pixels and format.</description>
                <element name ='width' required ='1' type ='int' default ='320'>
                  <description>Width in pixels</description>
                </element>
                <element name ='height' required ='1' type ='int' default ='240'>
                  <description>Height in pixels</description>
                </element>
                <element name ='format' required ='0' type ='string' default ='R8G8B8'>
                  <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
                </element>
              </element>
              <element name ='clip' required ='1'>
                <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
                <element name ='near' required ='1' type ='double' default ='0.1'>
                  <description>Near clipping plane</description>
                </element>
                <element name ='far' required ='1' type ='double' default ='100'>
                  <description>Far clipping plane</description>
                </element>
              </element>
              <element name ='save' required ='0'>
                <description>Enable or disable saving of camera frames.</description>
                <attribute name ='enabled' type ='bool' default ='0' required ='1'>
                  <description>True = saving enabled</description>
                </attribute>
                <element name ='path' required ='1' type ='string' default ='__default__'>
                  <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
                </element>
              </element>
              <element name ='depth_camera' required ='0'>
                <description>Depth camera parameters</description>
                <element name ='output' required ='1' type ='string' default ='depths'>
                  <description>Type of output</description>
                </element>
              </element>
              <element name ='noise' required ='0'>
                <description>The properties of the noise model that should be applied to generated images</description>
                <element name ='type' required ='1' type ='string' default ='gaussian'>
                  <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
                </element>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
              </element>
              <element name ='distortion' required ='0'>
                <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
                <element name ='k1' required ='0' type ='double' default ='0'>
                  <description>The radial distortion coefficient k1</description>
                </element>
                <element name ='k2' required ='0' type ='double' default ='0'>
                  <description>The radial distortion coefficient k2</description>
                </element>
                <element name ='k3' required ='0' type ='double' default ='0'>
                  <description>The radial distortion coefficient k3</description>
                </element>
                <element name ='p1' required ='0' type ='double' default ='0'>
                  <description>The tangential distortion coefficient p1</description>
                </element>
                <element name ='p2' required ='0' type ='double' default ='0'>
                  <description>The tangential distortion coefficient p2</description>
                </element>
                <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
                  <description>The distortion center or principal point</description>
                </element>
              </element>
              <element name ='lens' required ='0'>
                <description>Lens projection description</description>
                <element name ='type' required ='1' type ='string' default ='stereographic'>
                  <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
                </element>
                <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
                  <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
                </element>
                <element name ='custom_function' required ='0'>
                  <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
                  <element name ='c1' required ='0' type ='double' default ='1'>
                    <description>Linear scaling constant</description>
                  </element>
                  <element name ='c2' required ='0' type ='double' default ='1'>
                    <description>Angle scaling constant</description>
                  </element>
                  <element name ='c3' required ='0' type ='double' default ='0'>
                    <description>Angle offset constant</description>
                  </element>
                  <element name ='f' required ='0' type ='double' default ='1'>
                    <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
                  </element>
                  <element name ='fun' required ='1' type ='string' default ='tan'>
                    <description>Possible values are 'sin', 'tan' and 'id'</description>
                  </element>
                </element>
                <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
                  <description>Everything outside of the specified angle will be hidden, 90° by default</description>
                </element>
                <element name ='env_texture_size' required ='0' type ='int' default ='256'>
                  <description>Resolution of the environment cube map used to draw the world</description>
                </element>
                <element name ='intrinsics' required ='0'>
                  <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
                  <element name ='fx' required ='1' type ='double' default ='277'>
                    <description>X focal length (in pixels, overrides horizontal_fov)</description>
                  </element>
                  <element name ='fy' required ='1' type ='double' default ='277'>
                    <description>Y focal length (in pixels, overrides horizontal_fov)</description>
                  </element>
                  <element name ='cx' required ='1' type ='double' default ='160'>
                    <description>X principal point (in pixels)</description>
                  </element>
                  <element name ='cy' required ='1' type ='double' default ='120'>
                    <description>Y principal point (in pixels)</description>
                  </element>
                  <element name ='s' required ='1' type ='double' default ='1'>
                    <description>XY axis skew</description>
                  </element>
                </element>
              </element>
              <element name ='frame' required ='*'>
                <description>A frame of reference to which a pose is relative.</description>
                <attribute name ='name' type ='string' default ='' required ='1'>
                  <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
                </attribute>
                <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                  <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                  <attribute name ='frame' type ='string' default ='' required ='0'>
                    <description>Name of frame which the pose is defined relative to.</description>
                  </attribute>
                </element>
              </element>
              <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
                <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
                <attribute name ='frame' type ='string' default ='' required ='0'>
                  <description>Name of frame which the pose is defined relative to.</description>
                </attribute>
              </element>
            </element>
            <element name ='contact' required ='0'>
              <description>These elements are specific to the contact sensor.</description>
              <element name ='collision' required ='1' type ='string' default ='__default__'>
                <description>name of the collision element within a link that acts as the contact sensor.</description>
              </element>
              <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
                <description>Topic on which contact data is published.</description>
              </element>
            </element>
            <element name ='gps' required ='0'>
              <description>These elements are specific to the GPS sensor.</description>
              <element name ='position_sensing' required ='0'>
                <description>Parameters related to GPS position measurement.</description>
                <element name ='horizontal' required ='0'>
                  <description>Noise parameters for horizontal position measurement, in units of meters.</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='vertical' required ='0'>
                  <description>Noise parameters for vertical position measurement, in units of meters.</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='velocity_sensing' required ='0'>
                <description>Parameters related to GPS position measurement.</description>
                <element name ='horizontal' required ='0'>
                  <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='vertical' required ='0'>
                  <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
            </element>
            <element name ='imu' required ='0'>
              <description>These elements are specific to the IMU sensor.</description>
              <element name ='orientation_reference_frame' required ='0'>
                <description></description>
                <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
                  <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
                </element>
                <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
                  <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
                  <element name ='parent_frame' required ='0' type ='string' default =''>
                    <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                  </element>
                </element>
                <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
                  <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
                  <element name ='parent_frame' required ='0' type ='string' default =''>
                    <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
                  </element>
                </element>
              </element>
              <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
                <description>Topic on which data is published.</description>
              </element>
              <element name ='angular_velocity' required ='0'>
                <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
                <element name ='x' required ='0'>
                  <description>Angular velocity about the X axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='y' required ='0'>
                  <description>Angular velocity about the Y axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='z' required ='0'>
                  <description>Angular velocity about the Z axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
              <element name ='linear_acceleration' required ='0'>
                <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
                <element name ='x' required ='0'>
                  <description>Linear acceleration about the X axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='y' required ='0'>
                  <description>Linear acceleration about the Y axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
                <element name ='z' required ='0'>
                  <description>Linear acceleration about the Z axis</description>
                  <element name ='noise' required ='1'>
                    <description>The properties of a sensor noise model.</description>
                    <attribute name ='type' type ='string' default ='none' required ='1'>
                      <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                    </attribute>
                    <element name ='mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                    </element>
                    <element name ='bias_mean' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                    </element>
                    <element name ='precision' required ='0' type ='double' default ='0'>
                      <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                    </element>
                  </element>
                </element>
              </element>
            </element>
            <element name ='logical_camera' required ='0'>
              <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
              <element name ='near' required ='1' type ='double' default ='0'>
                <description>Near clipping distance of the view frustum</description>
              </element>
              <element name ='far' required ='1' type ='double' default ='1'>
                <description>Far clipping distance of the view frustum</description>
              </element>
              <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
                <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
              </element>
              <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
                <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
              </element>
            </element>
            <element name ='magnetometer' required ='0'>
              <description>These elements are specific to a Magnetometer sensor.</description>
              <element name ='x' required ='0'>
                <description>Parameters related to the body-frame X axis of the magnetometer</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='y' required ='0'>
                <description>Parameters related to the body-frame Y axis of the magnetometer</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
              <element name ='z' required ='0'>
                <description>Parameters related to the body-frame Z axis of the magnetometer</description>
                <element name ='noise' required ='1'>
                  <description>The properties of a sensor noise model.</description>
                  <attribute name ='type' type ='string' default ='none' required ='1'>
                    <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                  </attribute>
                  <element name ='mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                  </element>
                  <element name ='bias_mean' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                  </element>
                  <element name ='precision' required ='0' type ='double' default ='0'>
                    <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                  </element>
                </element>
              </element>
            </element>
            <element name ='ray' required ='0'>
              <description>These elements are specific to the ray (laser) sensor.</description>
              <element name ='scan' required ='1'>
                <description></description>
                <element name ='horizontal' required ='1'>
                  <description></description>
                  <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                    <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                  </element>
                  <element name ='resolution' required ='1' type ='double' default ='1'>
                    <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                  </element>
                  <element name ='min_angle' required ='1' type ='double' default ='0'>
                    <description></description>
                  </element>
                  <element name ='max_angle' required ='1' type ='double' default ='0'>
                    <description>Must be greater or equal to min_angle</description>
                  </element>
                </element>
                <element name ='vertical' required ='0'>
                  <description></description>
                  <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                    <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
                  </element>
                  <element name ='resolution' required ='0' type ='double' default ='1'>
                    <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
                  </element>
                  <element name ='min_angle' required ='1' type ='double' default ='0'>
                    <description></description>
                  </element>
                  <element name ='max_angle' required ='1' type ='double' default ='0'>
                    <description>Must be greater or equal to min_angle</description>
                  </element>
                </element>
              </element>
              <element name ='range' required ='1'>
                <description>specifies range properties of each simulated ray</description>
                <element name ='min' required ='1' type ='double' default ='0'>
                  <description>The minimum distance for each ray.</description>
                </element>
                <element name ='max' required ='1' type ='double' default ='0'>
                  <description>The maximum distance for each ray.</description>
                </element>
                <element name ='resolution' required ='0' type ='double' default ='0'>
                  <description>Linear resolution of each ray.</description>
                </element>
              </element>
              <element name ='noise' required ='0'>
                <description>The properties of the noise model that should be applied to generated scans</description>
                <element name ='type' required ='1' type ='string' default ='gaussian'>
                  <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
                </element>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
              </element>
            </element>
            <element name ='rfidtag' required ='0'>
              <description></description>
            </element>
            <element name ='rfid' required ='0'>
              <description></description>
            </element>
            <element name ='sonar' required ='0'>
              <description>These elements are specific to the sonar sensor.</description>
              <element name ='geometry' required ='0' type ='string' default ='cone'>
                <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
              </element>
              <element name ='min' required ='1' type ='double' default ='0'>
                <description>Minimum range</description>
              </element>
              <element name ='max' required ='1' type ='double' default ='1'>
                <description>Max range</description>
              </element>
              <element name ='radius' required ='0' type ='double' default ='0.5'>
                <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
              </element>
            </element>
            <element name ='transceiver' required ='0'>
              <description>These elements are specific to a wireless transceiver.</description>
              <element name ='essid' required ='0' type ='string' default ='wireless'>
                <description>Service set identifier (network name)</description>
              </element>
              <element name ='frequency' required ='0' type ='double' default ='2442'>
                <description>Specifies the frequency of transmission in MHz</description>
              </element>
              <element name ='min_frequency' required ='0' type ='double' default ='2412'>
                <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
              </element>
              <element name ='max_frequency' required ='0' type ='double' default ='2484'>
                <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
              </element>
              <element name ='gain' required ='1' type ='double' default ='2.5'>
                <description>Specifies the antenna gain in dBi</description>
              </element>
              <element name ='power' required ='1' type ='double' default ='14.5'>
                <description>Specifies the transmission power in dBm</description>
              </element>
              <element name ='sensitivity' required ='0' type ='double' default ='-90'>
                <description>Mininum received signal power in dBm</description>
              </element>
            </element>
            <element name ='force_torque' required ='0'>
              <description>These elements are specific to the force torque sensor.</description>
              <element name ='frame' required ='0' type ='string' default ='child'>
                <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
              </element>
              <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
                <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='plugin' required ='*'>
          <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the plugin, scoped to its parent.</description>
          </attribute>
          <attribute name ='filename' type ='string' default ='__default__' required ='1'>
            <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
          </attribute>
          <element copy_data ='true' required ='*'/>
        </element>
        <element name ='gripper' required ='*'>
          <description></description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description></description>
          </attribute>
          <element name ='grasp_check' required ='0'>
            <description></description>
            <element name ='detach_steps' required ='0' type ='int' default ='40'>
              <description></description>
            </element>
            <element name ='attach_steps' required ='0' type ='int' default ='20'>
              <description></description>
            </element>
            <element name ='min_contact_count' required ='0' type ='unsigned int' default ='2'>
              <description></description>
            </element>
          </element>
          <element name ='gripper_link' required ='+' type ='string' default ='__default__'>
            <description></description>
          </element>
          <element name ='palm_link' required ='1' type ='string' default ='__default__'>
            <description></description>
          </element>
        </element>
      </element>
    </element>
  </element>
  <element name ='model' required ='*'>
    <description>The model element defines a complete robot or any other physical object.</description>
    <attribute name ='name' type ='string' default ='__default__' required ='1'>
      <description>A unique name for the model. This name must not match another model in the world.</description>
    </attribute>
    <element name ='static' required ='0' type ='bool' default ='0'>
      <description>If set to true, the model is immovable. Otherwise the model is simulated in the dynamics engine.</description>
    </element>
    <element name ='self_collide' required ='0' type ='bool' default ='0'>
      <description>If set to true, all links in the model will collide with each other (except those connected by a joint). Can be overridden by the link or collision element self_collide property. Two links within a model will collide if link1.self_collide OR link2.self_collide. Links connected by a joint will never collide.</description>
    </element>
    <element name ='allow_auto_disable' required ='0' type ='bool' default ='1'>
      <description>Allows a model to auto-disable, which is means the physics engine can skip updating the model when the model is at rest. This parameter is only used by models with no joints.</description>
    </element>
    <element name ='include' required ='*'>
      <description>Include resources from a URI. This can be used to nest models.</description>
      <element name ='uri' required ='1' type ='string' default ='__default__'>
        <description>URI to a resource, such as a model</description>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>Override the pose of the included model. A position and orientation in the global coordinate frame for the model. Position(x,y,z) and rotation (roll, pitch yaw) in the global coordinate frame.</description>
      </element>
      <element name ='name' required ='0' type ='string' default =''>
        <description>Override the name of the included model.</description>
      </element>
      <element name ='static' required ='0' type ='bool' default ='0'>
        <description>Override the static value of the included model.</description>
      </element>
    </element>
    <element name ='model' required ='*'>
      <description>A nested model element</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the model. This name must not match another nested model in the same level as this model.</description>
      </attribute>
      <element ref ='model' required ='*'/>
    </element>
    <element name ='enable_wind' required ='0' type ='bool' default ='0'>
      <description>If set to true, all links in the model will be affected by the wind. Can be overriden by the link wind property.</description>
    </element>
    <element name ='frame' required ='*'>
      <description>A frame of reference to which a pose is relative.</description>
      <attribute name ='name' type ='string' default ='' required ='1'>
        <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
      </attribute>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
    </element>
    <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
      <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
      <attribute name ='frame' type ='string' default ='' required ='0'>
        <description>Name of frame which the pose is defined relative to.</description>
      </attribute>
    </element>
    <element name ='link' required ='*'>
      <description>A physical link with inertia, collision, and visual properties. A link must be a child of a model, and any number of links may exist in a model.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the link within the scope of the model.</description>
      </attribute>
      <element name ='gravity' required ='0' type ='bool' default ='1'>
        <description>If true, the link is affected by gravity.</description>
      </element>
      <element name ='enable_wind' required ='0' type ='bool' default ='0'>
        <description>If true, the link is affected by the wind.</description>
      </element>
      <element name ='self_collide' required ='0' type ='bool' default ='0'>
        <description>If true, the link can collide with other links in the model. Two links within a model will collide if link1.self_collide OR link2.self_collide. Links connected by a joint will never collide.</description>
      </element>
      <element name ='kinematic' required ='0' type ='bool' default ='0'>
        <description>If true, the link is kinematic only</description>
      </element>
      <element name ='must_be_base_link' required ='0' type ='bool' default ='0'>
        <description>If true, the link will have 6DOF and be a direct child of world.</description>
      </element>
      <element name ='velocity_decay' required ='0'>
        <description>Exponential damping of the link's velocity.</description>
        <element name ='linear' required ='0' type ='double' default ='0'>
          <description>Linear damping</description>
        </element>
        <element name ='angular' required ='0' type ='double' default ='0'>
          <description>Angular damping</description>
        </element>
      </element>
      <element name ='frame' required ='*'>
        <description>A frame of reference to which a pose is relative.</description>
        <attribute name ='name' type ='string' default ='' required ='1'>
          <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
        </attribute>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
      <element name ='inertial' required ='0'>
        <description>The inertial properties of the link.</description>
        <element name ='mass' required ='0' type ='double' default ='1'>
          <description>The mass of the link.</description>
        </element>
        <element name ='inertia' required ='0'>
          <description>The 3x3 rotational inertia matrix. Because the rotational inertia matrix is symmetric, only 6 above-diagonal elements of this matrix are specified here, using the attributes ixx, ixy, ixz, iyy, iyz, izz.</description>
          <element name ='ixx' required ='1' type ='double' default ='1'>
            <description></description>
          </element>
          <element name ='ixy' required ='1' type ='double' default ='0'>
            <description></description>
          </element>
          <element name ='ixz' required ='1' type ='double' default ='0'>
            <description></description>
          </element>
          <element name ='iyy' required ='1' type ='double' default ='1'>
            <description></description>
          </element>
          <element name ='iyz' required ='1' type ='double' default ='0'>
            <description></description>
          </element>
          <element name ='izz' required ='1' type ='double' default ='1'>
            <description></description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>This is the pose of the inertial reference frame, relative to the specified reference frame. The origin of the inertial reference frame needs to be at the center of gravity. The axes of the inertial reference frame do not need to be aligned with the principal axes of the inertia.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='collision' required ='*'>
        <description>The collision properties of a link. Note that this can be different from the visual properties of a link, for example, simpler collision models are often used to reduce computation time.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Unique name for the collision element within the scope of the parent link.</description>
        </attribute>
        <element name ='laser_retro' required ='0' type ='double' default ='0'>
          <description>intensity value returned by laser sensor.</description>
        </element>
        <element name ='max_contacts' required ='0' type ='int' default ='10'>
          <description>Maximum number of contacts allowed between two entities. This value overrides the max_contacts element defined in physics.</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='geometry' required ='1'>
          <description>The shape of the visual or collision object.</description>
          <element name ='empty' required ='0'>
            <description>You can use the empty tag to make empty geometries.</description>
          </element>
          <element name ='box' required ='0'>
            <description>Box shape</description>
            <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
              <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
            </element>
          </element>
          <element name ='cylinder' required ='0'>
            <description>Cylinder shape</description>
            <element name ='radius' required ='1' type ='double' default ='1'>
              <description>Radius of the cylinder</description>
            </element>
            <element name ='length' required ='1' type ='double' default ='1'>
              <description>Length of the cylinder</description>
            </element>
          </element>
          <element name ='heightmap' required ='0'>
            <description>A heightmap based on a 2d grayscale image.</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>URI to a grayscale image file</description>
            </element>
            <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
              <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
            </element>
            <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
              <description>A position offset.</description>
            </element>
            <element name ='texture' required ='*'>
              <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
              <element name ='size' required ='1' type ='double' default ='10'>
                <description>Size of the applied texture in meters.</description>
              </element>
              <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                <description>Diffuse texture image filename</description>
              </element>
              <element name ='normal' required ='1' type ='string' default ='__default__'>
                <description>Normalmap texture image filename</description>
              </element>
            </element>
            <element name ='blend' required ='*'>
              <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
              <element name ='min_height' required ='1' type ='double' default ='0'>
                <description>Min height of a blend layer</description>
              </element>
              <element name ='fade_dist' required ='1' type ='double' default ='0'>
                <description>Distance over which the blend occurs</description>
              </element>
            </element>
            <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
              <description>Set if the rendering engine will use terrain paging</description>
            </element>
            <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
              <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
            </element>
          </element>
          <element name ='image' required ='0'>
            <description>Extrude a set of boxes from a grayscale image.</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>URI of the grayscale image file</description>
            </element>
            <element name ='scale' required ='1' type ='double' default ='1'>
              <description>Scaling factor applied to the image</description>
            </element>
            <element name ='threshold' required ='1' type ='int' default ='200'>
              <description>Grayscale threshold</description>
            </element>
            <element name ='height' required ='1' type ='double' default ='1'>
              <description>Height of the extruded boxes</description>
            </element>
            <element name ='granularity' required ='1' type ='int' default ='1'>
              <description>The amount of error in the model</description>
            </element>
          </element>
          <element name ='mesh' required ='0'>
            <description>Mesh shape</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>Mesh uri</description>
            </element>
            <element name ='submesh' required ='0'>
              <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
              <element name ='name' required ='1' type ='string' default ='__default__'>
                <description>Name of the submesh within the parent mesh</description>
              </element>
              <element name ='center' required ='0' type ='bool' default ='0'>
                <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
              </element>
            </element>
            <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
              <description>Scaling factor applied to the mesh</description>
            </element>
          </element>
          <element name ='plane' required ='0'>
            <description>Plane shape</description>
            <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
              <description>Normal direction for the plane</description>
            </element>
            <element name ='size' required ='1' type ='vector2d' default ='1 1'>
              <description>Length of each side of the plane</description>
            </element>
          </element>
          <element name ='polyline' required ='0'>
            <description>Defines an extruded polyline shape</description>
            <element name ='point' required ='+' type ='vector2d' default ='0 0'>
              <description>A series of points that define the path of the polyline.</description>
            </element>
            <element name ='height' required ='1' type ='double' default ='1'>
              <description>Height of the polyline</description>
            </element>
          </element>
          <element name ='sphere' required ='0'>
            <description>Sphere shape</description>
            <element name ='radius' required ='1' type ='double' default ='1'>
              <description>radius of the sphere</description>
            </element>
          </element>
        </element>
        <element name ='surface' required ='0'>
          <description>The surface parameters</description>
          <element name ='bounce' required ='0'>
            <description></description>
            <element name ='restitution_coefficient' required ='0' type ='double' default ='0'>
              <description>Bounciness coefficient of restitution, from [0...1], where 0=no bounciness.</description>
            </element>
            <element name ='threshold' required ='0' type ='double' default ='100000'>
              <description>Bounce capture velocity, below which effective coefficient of restitution is 0.</description>
            </element>
          </element>
          <element name ='friction' required ='0'>
            <description></description>
            <element name ='torsional' required ='0'>
              <description>Parameters for torsional friction</description>
              <element name ='coefficient' required ='0' type ='double' default ='1'>
                <description>Torsional friction coefficient, unitless maximum ratio of tangential stress to normal stress.</description>
              </element>
              <element name ='use_patch_radius' required ='0' type ='bool' default ='1'>
                <description>If this flag is true, torsional friction is calculated using the "patch_radius" parameter. If this flag is set to false, "surface_radius" (R) and contact depth (d) are used to compute the patch radius as sqrt(R*d).</description>
              </element>
              <element name ='patch_radius' required ='0' type ='double' default ='0'>
                <description>Radius of contact patch surface.</description>
              </element>
              <element name ='surface_radius' required ='0' type ='double' default ='0'>
                <description>Surface radius on the point of contact.</description>
              </element>
              <element name ='ode' required ='0'>
                <description>Torsional friction parameters for ODE</description>
                <element name ='slip' required ='0' type ='double' default ='0'>
                  <description>Force dependent slip for torsional friction, equivalent to inverse of viscous damping coefficient with units of rad/s/(Nm). A slip value of 0 is infinitely viscous.</description>
                </element>
              </element>
            </element>
            <element name ='ode' required ='0'>
              <description>ODE friction parameters</description>
              <element name ='mu' required ='0' type ='double' default ='1'>
                <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
              </element>
              <element name ='mu2' required ='0' type ='double' default ='1'>
                <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
              </element>
              <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the ODE Collide callback function will align the friction pyramid directions with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
              </element>
              <element name ='slip1' required ='0' type ='double' default ='0'>
                <description>Force dependent slip in first friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
              </element>
              <element name ='slip2' required ='0' type ='double' default ='0'>
                <description>Force dependent slip in second friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
              </element>
            </element>
            <element name ='bullet' required ='0'>
              <description></description>
              <element name ='friction' required ='0' type ='double' default ='1'>
                <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
              </element>
              <element name ='friction2' required ='0' type ='double' default ='1'>
                <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
              </element>
              <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the friction pyramid directions will be aligned with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
              </element>
              <element name ='rolling_friction' required ='0' type ='double' default ='1'>
                <description>Coefficient of rolling friction</description>
              </element>
            </element>
          </element>
          <element name ='contact' required ='0'>
            <description></description>
            <element name ='collide_without_contact' required ='0' type ='bool' default ='0'>
              <description>Flag to disable contact force generation, while still allowing collision checks and contact visualization to occur.</description>
            </element>
            <element name ='collide_without_contact_bitmask' required ='0' type ='unsigned int' default ='1'>
              <description>Bitmask for collision filtering when collide_without_contact is on</description>
            </element>
            <element name ='collide_bitmask' required ='0' type ='unsigned int' default ='65535'>
              <description>Bitmask for collision filtering. This will override collide_without_contact</description>
            </element>
            <element name ='category_bitmask' required ='0' type ='unsigned int' default ='65535'>
              <description>Bitmask for category of collision filtering. Collision happens if ((category1 & collision2) | (category2 & collision1)) is not zero. If not specified, the category_bitmask should be interpreted as being the same as collide_bitmask.</description>
            </element>
            <element name ='poissons_ratio' required ='0' type ='double' default ='0.3'>
              <description>Poisson's ratio is the unitless ratio between transverse and axial strain. This value must lie between (-1, 0.5). Defaults to 0.3 for typical steel. Note typical silicone elastomers have Poisson's ratio near 0.49 ~ 0.50. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
            </element>
            <element name ='elastic_modulus' required ='0' type ='double' default ='-1'>
              <description>Young's Modulus in SI derived unit Pascal. Defaults to -1. If value is less or equal to zero, contact using elastic modulus (with Poisson's Ratio) is disabled. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
            </element>
            <element name ='ode' required ='0'>
              <description>ODE contact parameters</description>
              <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                <description>Soft constraint force mixing.</description>
              </element>
              <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                <description>Soft error reduction parameter</description>
              </element>
              <element name ='kp' required ='0' type ='double' default ='1e+12'>
                <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
              </element>
              <element name ='kd' required ='0' type ='double' default ='1'>
                <description>dynamically "damping"-equivalent coefficient for contact joints</description>
              </element>
              <element name ='max_vel' required ='0' type ='double' default ='0.01'>
                <description>maximum contact correction velocity truncation term.</description>
              </element>
              <element name ='min_depth' required ='0' type ='double' default ='0'>
                <description>minimum allowable depth before contact correction impulse is applied</description>
              </element>
            </element>
            <element name ='bullet' required ='0'>
              <description>Bullet contact parameters</description>
              <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                <description>Soft constraint force mixing.</description>
              </element>
              <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                <description>Soft error reduction parameter</description>
              </element>
              <element name ='kp' required ='0' type ='double' default ='1e+12'>
                <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
              </element>
              <element name ='kd' required ='0' type ='double' default ='1'>
                <description>dynamically "damping"-equivalent coefficient for contact joints</description>
              </element>
              <element name ='split_impulse' required ='1' type ='bool' default ='1'>
                <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
              </element>
              <element name ='split_impulse_penetration_threshold' required ='1' type ='double' default ='-0.01'>
                <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
              </element>
            </element>
          </element>
          <element name ='soft_contact' required ='0'>
            <description></description>
            <element name ='dart' required ='0'>
              <description>soft contact pamameters based on paper: http://www.cc.gatech.edu/graphics/projects/Sumit/homepage/papers/sigasia11/jain_softcontacts_siga11.pdf</description>
              <element name ='bone_attachment' required ='1' type ='double' default ='100'>
                <description>This is variable k_v in the soft contacts paper. Its unit is N/m.</description>
              </element>
              <element name ='stiffness' required ='1' type ='double' default ='100'>
                <description>This is variable k_e in the soft contacts paper. Its unit is N/m.</description>
              </element>
              <element name ='damping' required ='1' type ='double' default ='10'>
                <description>Viscous damping of point velocity in body frame. Its unit is N/m/s.</description>
              </element>
              <element name ='flesh_mass_fraction' required ='1' type ='double' default ='0.05'>
                <description>Fraction of mass to be distributed among deformable nodes.</description>
              </element>
            </element>
          </element>
        </element>
      </element>
      <element name ='visual' required ='*'>
        <description>The visual properties of the link. This element specifies the shape of the object (box, cylinder, etc.) for visualization purposes.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Unique name for the visual element within the scope of the parent link.</description>
        </attribute>
        <element name ='cast_shadows' required ='0' type ='bool' default ='1'>
          <description>If true the visual will cast shadows.</description>
        </element>
        <element name ='laser_retro' required ='0' type ='double' default ='0'>
          <description>will be implemented in the future release.</description>
        </element>
        <element name ='transparency' required ='0' type ='double' default ='0'>
          <description>The amount of transparency( 0=opaque, 1 = fully transparent)</description>
        </element>
        <element name ='meta' required ='0'>
          <description>Optional meta information for the visual. The information contained within this element should be used to provide additional feedback to an end user.</description>
          <element name ='layer' required ='0' type ='int' default ='0'>
            <description>The layer in which this visual is displayed. The layer number is useful for programs, such as Gazebo, that put visuals in different layers for enhanced visualization.</description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='material' required ='0'>
          <description>The material of the visual element.</description>
          <element name ='script' required ='0'>
            <description>Name of material from an installed script file. This will override the color element if the script exists.</description>
            <element name ='uri' required ='+' type ='string' default ='__default__'>
              <description>URI of the material script file</description>
            </element>
            <element name ='name' required ='1' type ='string' default ='__default__'>
              <description>Name of the script within the script file</description>
            </element>
          </element>
          <element name ='shader' required ='0'>
            <description></description>
            <attribute name ='type' type ='string' default ='pixel' required ='1'>
              <description>vertex, pixel, normal_map_objectspace, normal_map_tangentspace</description>
            </attribute>
            <element name ='normal_map' required ='0' type ='string' default ='__default__'>
              <description>filename of the normal map</description>
            </element>
          </element>
          <element name ='lighting' required ='0' type ='bool' default ='1'>
            <description>If false, dynamic lighting will be disabled</description>
          </element>
          <element name ='ambient' required ='0' type ='color' default ='0 0 0 1'>
            <description>The ambient color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
          </element>
          <element name ='diffuse' required ='0' type ='color' default ='0 0 0 1'>
            <description>The diffuse color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
          </element>
          <element name ='specular' required ='0' type ='color' default ='0 0 0 1'>
            <description>The specular color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
          </element>
          <element name ='emissive' required ='0' type ='color' default ='0 0 0 1'>
            <description>The emissive color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
          </element>
        </element>
        <element name ='geometry' required ='1'>
          <description>The shape of the visual or collision object.</description>
          <element name ='empty' required ='0'>
            <description>You can use the empty tag to make empty geometries.</description>
          </element>
          <element name ='box' required ='0'>
            <description>Box shape</description>
            <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
              <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
            </element>
          </element>
          <element name ='cylinder' required ='0'>
            <description>Cylinder shape</description>
            <element name ='radius' required ='1' type ='double' default ='1'>
              <description>Radius of the cylinder</description>
            </element>
            <element name ='length' required ='1' type ='double' default ='1'>
              <description>Length of the cylinder</description>
            </element>
          </element>
          <element name ='heightmap' required ='0'>
            <description>A heightmap based on a 2d grayscale image.</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>URI to a grayscale image file</description>
            </element>
            <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
              <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
            </element>
            <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
              <description>A position offset.</description>
            </element>
            <element name ='texture' required ='*'>
              <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
              <element name ='size' required ='1' type ='double' default ='10'>
                <description>Size of the applied texture in meters.</description>
              </element>
              <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                <description>Diffuse texture image filename</description>
              </element>
              <element name ='normal' required ='1' type ='string' default ='__default__'>
                <description>Normalmap texture image filename</description>
              </element>
            </element>
            <element name ='blend' required ='*'>
              <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
              <element name ='min_height' required ='1' type ='double' default ='0'>
                <description>Min height of a blend layer</description>
              </element>
              <element name ='fade_dist' required ='1' type ='double' default ='0'>
                <description>Distance over which the blend occurs</description>
              </element>
            </element>
            <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
              <description>Set if the rendering engine will use terrain paging</description>
            </element>
            <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
              <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
            </element>
          </element>
          <element name ='image' required ='0'>
            <description>Extrude a set of boxes from a grayscale image.</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>URI of the grayscale image file</description>
            </element>
            <element name ='scale' required ='1' type ='double' default ='1'>
              <description>Scaling factor applied to the image</description>
            </element>
            <element name ='threshold' required ='1' type ='int' default ='200'>
              <description>Grayscale threshold</description>
            </element>
            <element name ='height' required ='1' type ='double' default ='1'>
              <description>Height of the extruded boxes</description>
            </element>
            <element name ='granularity' required ='1' type ='int' default ='1'>
              <description>The amount of error in the model</description>
            </element>
          </element>
          <element name ='mesh' required ='0'>
            <description>Mesh shape</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>Mesh uri</description>
            </element>
            <element name ='submesh' required ='0'>
              <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
              <element name ='name' required ='1' type ='string' default ='__default__'>
                <description>Name of the submesh within the parent mesh</description>
              </element>
              <element name ='center' required ='0' type ='bool' default ='0'>
                <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
              </element>
            </element>
            <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
              <description>Scaling factor applied to the mesh</description>
            </element>
          </element>
          <element name ='plane' required ='0'>
            <description>Plane shape</description>
            <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
              <description>Normal direction for the plane</description>
            </element>
            <element name ='size' required ='1' type ='vector2d' default ='1 1'>
              <description>Length of each side of the plane</description>
            </element>
          </element>
          <element name ='polyline' required ='0'>
            <description>Defines an extruded polyline shape</description>
            <element name ='point' required ='+' type ='vector2d' default ='0 0'>
              <description>A series of points that define the path of the polyline.</description>
            </element>
            <element name ='height' required ='1' type ='double' default ='1'>
              <description>Height of the polyline</description>
            </element>
          </element>
          <element name ='sphere' required ='0'>
            <description>Sphere shape</description>
            <element name ='radius' required ='1' type ='double' default ='1'>
              <description>radius of the sphere</description>
            </element>
          </element>
        </element>
        <element name ='plugin' required ='*'>
          <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the plugin, scoped to its parent.</description>
          </attribute>
          <attribute name ='filename' type ='string' default ='__default__' required ='1'>
            <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
          </attribute>
          <element copy_data ='true' required ='*'/>
        </element>
      </element>
      <element name ='sensor' required ='0'>
        <description>The sensor tag describes the type and properties of a sensor.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the sensor. This name must not match another model in the model.</description>
        </attribute>
        <attribute name ='type' type ='string' default ='__default__' required ='1'>
          <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
        </attribute>
        <element name ='always_on' required ='0' type ='bool' default ='0'>
          <description>If true the sensor will always be updated according to the update rate.</description>
        </element>
        <element name ='update_rate' required ='0' type ='double' default ='0'>
          <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
        </element>
        <element name ='visualize' required ='0' type ='bool' default ='0'>
          <description>If true, the sensor is visualized in the GUI</description>
        </element>
        <element name ='topic' required ='0' type ='string' default ='__default__'>
          <description>Name of the topic on which data is published. This is necessary for visualization</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='plugin' required ='*'>
          <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the plugin, scoped to its parent.</description>
          </attribute>
          <attribute name ='filename' type ='string' default ='__default__' required ='1'>
            <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
          </attribute>
          <element copy_data ='true' required ='*'/>
        </element>
        <element name ='altimeter' required ='0'>
          <description>These elements are specific to an altimeter sensor.</description>
          <element name ='vertical_position' required ='0'>
            <description>Noise parameters for vertical position</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='vertical_velocity' required ='0'>
            <description>Noise parameters for vertical velocity</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='camera' required ='0'>
          <description>These elements are specific to camera sensors.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='0'>
            <description>An optional name for the camera.</description>
          </attribute>
          <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
            <description>Horizontal field of view</description>
          </element>
          <element name ='image' required ='1'>
            <description>The image size in pixels and format.</description>
            <element name ='width' required ='1' type ='int' default ='320'>
              <description>Width in pixels</description>
            </element>
            <element name ='height' required ='1' type ='int' default ='240'>
              <description>Height in pixels</description>
            </element>
            <element name ='format' required ='0' type ='string' default ='R8G8B8'>
              <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
            </element>
          </element>
          <element name ='clip' required ='1'>
            <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
            <element name ='near' required ='1' type ='double' default ='0.1'>
              <description>Near clipping plane</description>
            </element>
            <element name ='far' required ='1' type ='double' default ='100'>
              <description>Far clipping plane</description>
            </element>
          </element>
          <element name ='save' required ='0'>
            <description>Enable or disable saving of camera frames.</description>
            <attribute name ='enabled' type ='bool' default ='0' required ='1'>
              <description>True = saving enabled</description>
            </attribute>
            <element name ='path' required ='1' type ='string' default ='__default__'>
              <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
            </element>
          </element>
          <element name ='depth_camera' required ='0'>
            <description>Depth camera parameters</description>
            <element name ='output' required ='1' type ='string' default ='depths'>
              <description>Type of output</description>
            </element>
          </element>
          <element name ='noise' required ='0'>
            <description>The properties of the noise model that should be applied to generated images</description>
            <element name ='type' required ='1' type ='string' default ='gaussian'>
              <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
            </element>
            <element name ='mean' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
            </element>
            <element name ='stddev' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
            </element>
          </element>
          <element name ='distortion' required ='0'>
            <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
            <element name ='k1' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k1</description>
            </element>
            <element name ='k2' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k2</description>
            </element>
            <element name ='k3' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k3</description>
            </element>
            <element name ='p1' required ='0' type ='double' default ='0'>
              <description>The tangential distortion coefficient p1</description>
            </element>
            <element name ='p2' required ='0' type ='double' default ='0'>
              <description>The tangential distortion coefficient p2</description>
            </element>
            <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
              <description>The distortion center or principal point</description>
            </element>
          </element>
          <element name ='lens' required ='0'>
            <description>Lens projection description</description>
            <element name ='type' required ='1' type ='string' default ='stereographic'>
              <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
            </element>
            <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
              <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
            </element>
            <element name ='custom_function' required ='0'>
              <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
              <element name ='c1' required ='0' type ='double' default ='1'>
                <description>Linear scaling constant</description>
              </element>
              <element name ='c2' required ='0' type ='double' default ='1'>
                <description>Angle scaling constant</description>
              </element>
              <element name ='c3' required ='0' type ='double' default ='0'>
                <description>Angle offset constant</description>
              </element>
              <element name ='f' required ='0' type ='double' default ='1'>
                <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
              </element>
              <element name ='fun' required ='1' type ='string' default ='tan'>
                <description>Possible values are 'sin', 'tan' and 'id'</description>
              </element>
            </element>
            <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
              <description>Everything outside of the specified angle will be hidden, 90° by default</description>
            </element>
            <element name ='env_texture_size' required ='0' type ='int' default ='256'>
              <description>Resolution of the environment cube map used to draw the world</description>
            </element>
            <element name ='intrinsics' required ='0'>
              <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
              <element name ='fx' required ='1' type ='double' default ='277'>
                <description>X focal length (in pixels, overrides horizontal_fov)</description>
              </element>
              <element name ='fy' required ='1' type ='double' default ='277'>
                <description>Y focal length (in pixels, overrides horizontal_fov)</description>
              </element>
              <element name ='cx' required ='1' type ='double' default ='160'>
                <description>X principal point (in pixels)</description>
              </element>
              <element name ='cy' required ='1' type ='double' default ='120'>
                <description>Y principal point (in pixels)</description>
              </element>
              <element name ='s' required ='1' type ='double' default ='1'>
                <description>XY axis skew</description>
              </element>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='contact' required ='0'>
          <description>These elements are specific to the contact sensor.</description>
          <element name ='collision' required ='1' type ='string' default ='__default__'>
            <description>name of the collision element within a link that acts as the contact sensor.</description>
          </element>
          <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
            <description>Topic on which contact data is published.</description>
          </element>
        </element>
        <element name ='gps' required ='0'>
          <description>These elements are specific to the GPS sensor.</description>
          <element name ='position_sensing' required ='0'>
            <description>Parameters related to GPS position measurement.</description>
            <element name ='horizontal' required ='0'>
              <description>Noise parameters for horizontal position measurement, in units of meters.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description>Noise parameters for vertical position measurement, in units of meters.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='velocity_sensing' required ='0'>
            <description>Parameters related to GPS position measurement.</description>
            <element name ='horizontal' required ='0'>
              <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='imu' required ='0'>
          <description>These elements are specific to the IMU sensor.</description>
          <element name ='orientation_reference_frame' required ='0'>
            <description></description>
            <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
              <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
            </element>
            <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
              <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
              <element name ='parent_frame' required ='0' type ='string' default =''>
                <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
              </element>
            </element>
            <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
              <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
              <element name ='parent_frame' required ='0' type ='string' default =''>
                <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
              </element>
            </element>
          </element>
          <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
            <description>Topic on which data is published.</description>
          </element>
          <element name ='angular_velocity' required ='0'>
            <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
            <element name ='x' required ='0'>
              <description>Angular velocity about the X axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Angular velocity about the Y axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Angular velocity about the Z axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='linear_acceleration' required ='0'>
            <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
            <element name ='x' required ='0'>
              <description>Linear acceleration about the X axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Linear acceleration about the Y axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Linear acceleration about the Z axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='logical_camera' required ='0'>
          <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
          <element name ='near' required ='1' type ='double' default ='0'>
            <description>Near clipping distance of the view frustum</description>
          </element>
          <element name ='far' required ='1' type ='double' default ='1'>
            <description>Far clipping distance of the view frustum</description>
          </element>
          <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
            <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
          </element>
          <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
            <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
          </element>
        </element>
        <element name ='magnetometer' required ='0'>
          <description>These elements are specific to a Magnetometer sensor.</description>
          <element name ='x' required ='0'>
            <description>Parameters related to the body-frame X axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='y' required ='0'>
            <description>Parameters related to the body-frame Y axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='z' required ='0'>
            <description>Parameters related to the body-frame Z axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='ray' required ='0'>
          <description>These elements are specific to the ray (laser) sensor.</description>
          <element name ='scan' required ='1'>
            <description></description>
            <element name ='horizontal' required ='1'>
              <description></description>
              <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
              </element>
              <element name ='resolution' required ='1' type ='double' default ='1'>
                <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
              </element>
              <element name ='min_angle' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='max_angle' required ='1' type ='double' default ='0'>
                <description>Must be greater or equal to min_angle</description>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description></description>
              <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
              </element>
              <element name ='resolution' required ='0' type ='double' default ='1'>
                <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
              </element>
              <element name ='min_angle' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='max_angle' required ='1' type ='double' default ='0'>
                <description>Must be greater or equal to min_angle</description>
              </element>
            </element>
          </element>
          <element name ='range' required ='1'>
            <description>specifies range properties of each simulated ray</description>
            <element name ='min' required ='1' type ='double' default ='0'>
              <description>The minimum distance for each ray.</description>
            </element>
            <element name ='max' required ='1' type ='double' default ='0'>
              <description>The maximum distance for each ray.</description>
            </element>
            <element name ='resolution' required ='0' type ='double' default ='0'>
              <description>Linear resolution of each ray.</description>
            </element>
          </element>
          <element name ='noise' required ='0'>
            <description>The properties of the noise model that should be applied to generated scans</description>
            <element name ='type' required ='1' type ='string' default ='gaussian'>
              <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
            </element>
            <element name ='mean' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
            </element>
            <element name ='stddev' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
            </element>
          </element>
        </element>
        <element name ='rfidtag' required ='0'>
          <description></description>
        </element>
        <element name ='rfid' required ='0'>
          <description></description>
        </element>
        <element name ='sonar' required ='0'>
          <description>These elements are specific to the sonar sensor.</description>
          <element name ='geometry' required ='0' type ='string' default ='cone'>
            <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
          </element>
          <element name ='min' required ='1' type ='double' default ='0'>
            <description>Minimum range</description>
          </element>
          <element name ='max' required ='1' type ='double' default ='1'>
            <description>Max range</description>
          </element>
          <element name ='radius' required ='0' type ='double' default ='0.5'>
            <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
          </element>
        </element>
        <element name ='transceiver' required ='0'>
          <description>These elements are specific to a wireless transceiver.</description>
          <element name ='essid' required ='0' type ='string' default ='wireless'>
            <description>Service set identifier (network name)</description>
          </element>
          <element name ='frequency' required ='0' type ='double' default ='2442'>
            <description>Specifies the frequency of transmission in MHz</description>
          </element>
          <element name ='min_frequency' required ='0' type ='double' default ='2412'>
            <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
          </element>
          <element name ='max_frequency' required ='0' type ='double' default ='2484'>
            <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
          </element>
          <element name ='gain' required ='1' type ='double' default ='2.5'>
            <description>Specifies the antenna gain in dBi</description>
          </element>
          <element name ='power' required ='1' type ='double' default ='14.5'>
            <description>Specifies the transmission power in dBm</description>
          </element>
          <element name ='sensitivity' required ='0' type ='double' default ='-90'>
            <description>Mininum received signal power in dBm</description>
          </element>
        </element>
        <element name ='force_torque' required ='0'>
          <description>These elements are specific to the force torque sensor.</description>
          <element name ='frame' required ='0' type ='string' default ='child'>
            <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
          </element>
          <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
            <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
          </element>
        </element>
      </element>
      <element name ='projector' required ='0'>
        <description></description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Name of the projector</description>
        </attribute>
        <element name ='texture' required ='1' type ='string' default ='__default__'>
          <description>Texture name</description>
        </element>
        <element name ='fov' required ='0' type ='double' default ='0.785'>
          <description>Field of view</description>
        </element>
        <element name ='near_clip' required ='0' type ='double' default ='0.1'>
          <description>Near clip distance</description>
        </element>
        <element name ='far_clip' required ='0' type ='double' default ='10'>
          <description>far clip distance</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='plugin' required ='*'>
          <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the plugin, scoped to its parent.</description>
          </attribute>
          <attribute name ='filename' type ='string' default ='__default__' required ='1'>
            <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
          </attribute>
          <element copy_data ='true' required ='*'/>
        </element>
      </element>
      <element name ='audio_sink' required ='*'>
        <description>An audio sink.</description>
      </element>
      <element name ='audio_source' required ='*'>
        <description>An audio source.</description>
        <element name ='uri' required ='1' type ='string' default ='__default__'>
          <description>URI of the audio media.</description>
        </element>
        <element name ='pitch' required ='0' type ='double' default ='1'>
          <description>Pitch for the audio media, in Hz</description>
        </element>
        <element name ='gain' required ='0' type ='double' default ='1'>
          <description>Gain for the audio media, in dB.</description>
        </element>
        <element name ='contact' required ='0'>
          <description>List of collision objects that will trigger audio playback.</description>
          <element name ='collision' required ='+' type ='string' default ='__default__'>
            <description>Name of child collision element that will trigger audio playback.</description>
          </element>
        </element>
        <element name ='loop' required ='0' type ='bool' default ='0'>
          <description>True to make the audio source loop playback.</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='battery' required ='*'>
        <description>Description of a battery.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Unique name for the battery.</description>
        </attribute>
        <element name ='voltage' required ='1' type ='double' default ='0'>
          <description>Initial voltage in volts.</description>
        </element>
      </element>
      <element name ='light' required ='*'>
        <description>The light element describes a light source.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='0'>
          <description>A unique name for the light.</description>
        </attribute>
        <attribute name ='type' type ='string' default ='point' required ='1'>
          <description>The light type: point, directional, spot.</description>
        </attribute>
        <element name ='cast_shadows' required ='0' type ='bool' default ='0'>
          <description>When true, the light will cast shadows.</description>
        </element>
        <element name ='diffuse' required ='1' type ='color' default ='1 1 1 1'>
          <description>Diffuse light color</description>
        </element>
        <element name ='specular' required ='1' type ='color' default ='0.1 0.1 0.1 1'>
          <description>Specular light color</description>
        </element>
        <element name ='attenuation' required ='0'>
          <description>Light attenuation</description>
          <element name ='range' required ='1' type ='double' default ='10'>
            <description>Range of the light</description>
          </element>
          <element name ='linear' required ='0' type ='double' default ='1'>
            <description>The linear attenuation factor: 1 means attenuate evenly over the distance.</description>
          </element>
          <element name ='constant' required ='0' type ='double' default ='1'>
            <description>The constant attenuation factor: 1.0 means never attenuate, 0.0 is complete attenutation.</description>
          </element>
          <element name ='quadratic' required ='0' type ='double' default ='0'>
            <description>The quadratic attenuation factor: adds a curvature to the attenuation.</description>
          </element>
        </element>
        <element name ='direction' required ='1' type ='vector3' default ='0 0 -1'>
          <description>Direction of the light, only applicable for spot and directional lights.</description>
        </element>
        <element name ='spot' required ='0'>
          <description>Spot light parameters</description>
          <element name ='inner_angle' required ='1' type ='double' default ='0'>
            <description>Angle covered by the bright inner cone</description>
          </element>
          <element name ='outer_angle' required ='1' type ='double' default ='0'>
            <description>Angle covered by the outer cone</description>
          </element>
          <element name ='falloff' required ='1' type ='double' default ='0'>
            <description>The rate of falloff between the inner and outer cones. 1.0 means a linear falloff, less means slower falloff, higher means faster falloff.</description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
    </element>
    <element name ='joint' required ='*'>
      <description>A joint connections two links with kinematic and dynamic properties.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the joint within the scope of the model.</description>
      </attribute>
      <attribute name ='type' type ='string' default ='__default__' required ='1'>
        <description>The type of joint, which must be one of the following: (revolute) a hinge joint that rotates on a single axis with either a fixed or continuous range of motion, (gearbox) geared revolute joints, (revolute2) same as two revolute joints connected in series, (prismatic) a sliding joint that slides along an axis with a limited range specified by upper and lower limits, (ball) a ball and socket joint, (screw) a single degree of freedom joint with coupled sliding and rotational motion, (universal) like a ball joint, but constrains one degree of freedom, (fixed) a joint with zero degrees of freedom that rigidly connects two links.</description>
      </attribute>
      <element name ='parent' required ='1' type ='string' default ='__default__'>
        <description>Name of the parent link</description>
      </element>
      <element name ='child' required ='1' type ='string' default ='__default__'>
        <description>Name of the child link</description>
      </element>
      <element name ='gearbox_ratio' required ='0' type ='double' default ='1'>
        <description>Parameter for gearbox joints. Given theta_1 and theta_2 defined in description for gearbox_reference_body, theta_2 = -gearbox_ratio * theta_1.</description>
      </element>
      <element name ='gearbox_reference_body' required ='0' type ='string' default ='__default__'>
        <description>Parameter for gearbox joints. Gearbox ratio is enforced over two joint angles. First joint angle (theta_1) is the angle from the gearbox_reference_body to the parent link in the direction of the axis element and the second joint angle (theta_2) is the angle from the gearbox_reference_body to the child link in the direction of the axis2 element.</description>
      </element>
      <element name ='thread_pitch' required ='0' type ='double' default ='1'>
        <description>Parameter for screw joints.</description>
      </element>
      <element name ='axis' required ='0'>
        <description>Parameters related to the axis of rotation for revolute joints, the axis of translation for prismatic joints.</description>
        <element name ='initial_position' required ='0' type ='double' default ='0'>
          <description>Default joint position for this joint axis.</description>
        </element>
        <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
          <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
        </element>
        <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
          <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
        </element>
        <element name ='dynamics' required ='0'>
          <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
          <element name ='damping' required ='0' type ='double' default ='0'>
            <description>The physical velocity dependent viscous damping coefficient of the joint.</description>
          </element>
          <element name ='friction' required ='0' type ='double' default ='0'>
            <description>The physical static friction value of the joint.</description>
          </element>
          <element name ='spring_reference' required ='1' type ='double' default ='0'>
            <description>The spring reference position for this joint axis.</description>
          </element>
          <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
            <description>The spring stiffness for this joint axis.</description>
          </element>
        </element>
        <element name ='limit' required ='1'>
          <description>specifies the limits of this joint</description>
          <element name ='lower' required ='1' type ='double' default ='-1e+16'>
            <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='upper' required ='1' type ='double' default ='1e+16'>
            <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='effort' required ='0' type ='double' default ='-1'>
            <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
          </element>
          <element name ='velocity' required ='0' type ='double' default ='-1'>
            <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
          </element>
          <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
            <description>Joint stop stiffness. Support physics engines: SimBody.</description>
          </element>
          <element name ='dissipation' required ='0' type ='double' default ='1'>
            <description>Joint stop dissipation.</description>
          </element>
        </element>
      </element>
      <element name ='axis2' required ='0'>
        <description>Parameters related to the second axis of rotation for revolute2 joints and universal joints.</description>
        <element name ='initial_position' required ='0' type ='double' default ='0'>
          <description>Default joint position for this joint axis.</description>
        </element>
        <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
          <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
        </element>
        <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
          <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
        </element>
        <element name ='dynamics' required ='0'>
          <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
          <element name ='damping' required ='0' type ='double' default ='0'>
            <description>The physical velocity dependent viscous damping coefficient of the joint. EXPERIMENTAL: if damping coefficient is negative and implicit_spring_damper is true, adaptive damping is used.</description>
          </element>
          <element name ='friction' required ='0' type ='double' default ='0'>
            <description>The physical static friction value of the joint.</description>
          </element>
          <element name ='spring_reference' required ='1' type ='double' default ='0'>
            <description>The spring reference position for this joint axis.</description>
          </element>
          <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
            <description>The spring stiffness for this joint axis.</description>
          </element>
        </element>
        <element name ='limit' required ='0'>
          <description></description>
          <element name ='lower' required ='0' type ='double' default ='-1e+16'>
            <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='upper' required ='0' type ='double' default ='1e+16'>
            <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='effort' required ='0' type ='double' default ='-1'>
            <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
          </element>
          <element name ='velocity' required ='0' type ='double' default ='-1'>
            <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
          </element>
          <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
            <description>Joint stop stiffness. Supported physics engines: SimBody.</description>
          </element>
          <element name ='dissipation' required ='0' type ='double' default ='1'>
            <description>Joint stop dissipation. Supported physics engines: SimBody.</description>
          </element>
        </element>
      </element>
      <element name ='physics' required ='0'>
        <description>Parameters that are specific to a certain physics engine.</description>
        <element name ='simbody' required ='0'>
          <description>Simbody specific parameters</description>
          <element name ='must_be_loop_joint' required ='0' type ='bool' default ='0'>
            <description>Force cut in the multibody graph at this joint.</description>
          </element>
        </element>
        <element name ='ode' required ='0'>
          <description>ODE specific parameters</description>
          <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
            <description>(DEPRECATION WARNING: In SDF 1.5 this tag will be replaced by the same tag directly under the physics-block. For now, this tag overrides the one outside of ode-block, but in SDF 1.5 this tag will be removed completely.) If provide feedback is set to true, ODE will compute the constraint forces at this joint.</description>
          </element>
          <element name ='cfm_damping' required ='0' type ='bool' default ='0'>
            <description>If cfm damping is set to true, ODE will use CFM to simulate damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active.</description>
          </element>
          <element name ='implicit_spring_damper' required ='0' type ='bool' default ='0'>
            <description>If implicit_spring_damper is set to true, ODE will use CFM, ERP to simulate stiffness and damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active. This replaces cfm_damping parameter in sdf 1.4.</description>
          </element>
          <element name ='fudge_factor' required ='0' type ='double' default ='0'>
            <description>Scale the excess for in a joint motor at joint limits. Should be between zero and one.</description>
          </element>
          <element name ='cfm' required ='0' type ='double' default ='0'>
            <description>Constraint force mixing for constrained directions</description>
          </element>
          <element name ='erp' required ='0' type ='double' default ='0.2'>
            <description>Error reduction parameter for constrained directions</description>
          </element>
          <element name ='bounce' required ='0' type ='double' default ='0'>
            <description>Bounciness of the limits</description>
          </element>
          <element name ='max_force' required ='0' type ='double' default ='0'>
            <description>Maximum force or torque used to reach the desired velocity.</description>
          </element>
          <element name ='velocity' required ='0' type ='double' default ='0'>
            <description>The desired velocity of the joint. Should only be set if you want the joint to move on load.</description>
          </element>
          <element name ='limit' required ='0'>
            <description></description>
            <element name ='cfm' required ='1' type ='double' default ='0'>
              <description>Constraint force mixing parameter used by the joint stop</description>
            </element>
            <element name ='erp' required ='1' type ='double' default ='0.2'>
              <description>Error reduction parameter used by the joint stop</description>
            </element>
          </element>
          <element name ='suspension' required ='0'>
            <description></description>
            <element name ='cfm' required ='1' type ='double' default ='0'>
              <description>Suspension constraint force mixing parameter</description>
            </element>
            <element name ='erp' required ='1' type ='double' default ='0.2'>
              <description>Suspension error reduction parameter</description>
            </element>
          </element>
        </element>
        <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
          <description>If provide feedback is set to true, physics engine will compute the constraint forces at this joint. For now, provide_feedback under ode block will override this tag and given user warning about the migration. provide_feedback under ode is scheduled to be removed in SDF 1.5.</description>
        </element>
      </element>
      <element name ='frame' required ='*'>
        <description>A frame of reference to which a pose is relative.</description>
        <attribute name ='name' type ='string' default ='' required ='1'>
          <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
        </attribute>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
      <element name ='sensor' required ='0'>
        <description>The sensor tag describes the type and properties of a sensor.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the sensor. This name must not match another model in the model.</description>
        </attribute>
        <attribute name ='type' type ='string' default ='__default__' required ='1'>
          <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
        </attribute>
        <element name ='always_on' required ='0' type ='bool' default ='0'>
          <description>If true the sensor will always be updated according to the update rate.</description>
        </element>
        <element name ='update_rate' required ='0' type ='double' default ='0'>
          <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
        </element>
        <element name ='visualize' required ='0' type ='bool' default ='0'>
          <description>If true, the sensor is visualized in the GUI</description>
        </element>
        <element name ='topic' required ='0' type ='string' default ='__default__'>
          <description>Name of the topic on which data is published. This is necessary for visualization</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='plugin' required ='*'>
          <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the plugin, scoped to its parent.</description>
          </attribute>
          <attribute name ='filename' type ='string' default ='__default__' required ='1'>
            <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
          </attribute>
          <element copy_data ='true' required ='*'/>
        </element>
        <element name ='altimeter' required ='0'>
          <description>These elements are specific to an altimeter sensor.</description>
          <element name ='vertical_position' required ='0'>
            <description>Noise parameters for vertical position</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='vertical_velocity' required ='0'>
            <description>Noise parameters for vertical velocity</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='camera' required ='0'>
          <description>These elements are specific to camera sensors.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='0'>
            <description>An optional name for the camera.</description>
          </attribute>
          <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
            <description>Horizontal field of view</description>
          </element>
          <element name ='image' required ='1'>
            <description>The image size in pixels and format.</description>
            <element name ='width' required ='1' type ='int' default ='320'>
              <description>Width in pixels</description>
            </element>
            <element name ='height' required ='1' type ='int' default ='240'>
              <description>Height in pixels</description>
            </element>
            <element name ='format' required ='0' type ='string' default ='R8G8B8'>
              <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
            </element>
          </element>
          <element name ='clip' required ='1'>
            <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
            <element name ='near' required ='1' type ='double' default ='0.1'>
              <description>Near clipping plane</description>
            </element>
            <element name ='far' required ='1' type ='double' default ='100'>
              <description>Far clipping plane</description>
            </element>
          </element>
          <element name ='save' required ='0'>
            <description>Enable or disable saving of camera frames.</description>
            <attribute name ='enabled' type ='bool' default ='0' required ='1'>
              <description>True = saving enabled</description>
            </attribute>
            <element name ='path' required ='1' type ='string' default ='__default__'>
              <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
            </element>
          </element>
          <element name ='depth_camera' required ='0'>
            <description>Depth camera parameters</description>
            <element name ='output' required ='1' type ='string' default ='depths'>
              <description>Type of output</description>
            </element>
          </element>
          <element name ='noise' required ='0'>
            <description>The properties of the noise model that should be applied to generated images</description>
            <element name ='type' required ='1' type ='string' default ='gaussian'>
              <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
            </element>
            <element name ='mean' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
            </element>
            <element name ='stddev' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
            </element>
          </element>
          <element name ='distortion' required ='0'>
            <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
            <element name ='k1' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k1</description>
            </element>
            <element name ='k2' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k2</description>
            </element>
            <element name ='k3' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k3</description>
            </element>
            <element name ='p1' required ='0' type ='double' default ='0'>
              <description>The tangential distortion coefficient p1</description>
            </element>
            <element name ='p2' required ='0' type ='double' default ='0'>
              <description>The tangential distortion coefficient p2</description>
            </element>
            <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
              <description>The distortion center or principal point</description>
            </element>
          </element>
          <element name ='lens' required ='0'>
            <description>Lens projection description</description>
            <element name ='type' required ='1' type ='string' default ='stereographic'>
              <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
            </element>
            <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
              <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
            </element>
            <element name ='custom_function' required ='0'>
              <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
              <element name ='c1' required ='0' type ='double' default ='1'>
                <description>Linear scaling constant</description>
              </element>
              <element name ='c2' required ='0' type ='double' default ='1'>
                <description>Angle scaling constant</description>
              </element>
              <element name ='c3' required ='0' type ='double' default ='0'>
                <description>Angle offset constant</description>
              </element>
              <element name ='f' required ='0' type ='double' default ='1'>
                <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
              </element>
              <element name ='fun' required ='1' type ='string' default ='tan'>
                <description>Possible values are 'sin', 'tan' and 'id'</description>
              </element>
            </element>
            <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
              <description>Everything outside of the specified angle will be hidden, 90° by default</description>
            </element>
            <element name ='env_texture_size' required ='0' type ='int' default ='256'>
              <description>Resolution of the environment cube map used to draw the world</description>
            </element>
            <element name ='intrinsics' required ='0'>
              <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
              <element name ='fx' required ='1' type ='double' default ='277'>
                <description>X focal length (in pixels, overrides horizontal_fov)</description>
              </element>
              <element name ='fy' required ='1' type ='double' default ='277'>
                <description>Y focal length (in pixels, overrides horizontal_fov)</description>
              </element>
              <element name ='cx' required ='1' type ='double' default ='160'>
                <description>X principal point (in pixels)</description>
              </element>
              <element name ='cy' required ='1' type ='double' default ='120'>
                <description>Y principal point (in pixels)</description>
              </element>
              <element name ='s' required ='1' type ='double' default ='1'>
                <description>XY axis skew</description>
              </element>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='contact' required ='0'>
          <description>These elements are specific to the contact sensor.</description>
          <element name ='collision' required ='1' type ='string' default ='__default__'>
            <description>name of the collision element within a link that acts as the contact sensor.</description>
          </element>
          <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
            <description>Topic on which contact data is published.</description>
          </element>
        </element>
        <element name ='gps' required ='0'>
          <description>These elements are specific to the GPS sensor.</description>
          <element name ='position_sensing' required ='0'>
            <description>Parameters related to GPS position measurement.</description>
            <element name ='horizontal' required ='0'>
              <description>Noise parameters for horizontal position measurement, in units of meters.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description>Noise parameters for vertical position measurement, in units of meters.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='velocity_sensing' required ='0'>
            <description>Parameters related to GPS position measurement.</description>
            <element name ='horizontal' required ='0'>
              <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='imu' required ='0'>
          <description>These elements are specific to the IMU sensor.</description>
          <element name ='orientation_reference_frame' required ='0'>
            <description></description>
            <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
              <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
            </element>
            <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
              <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
              <element name ='parent_frame' required ='0' type ='string' default =''>
                <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
              </element>
            </element>
            <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
              <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
              <element name ='parent_frame' required ='0' type ='string' default =''>
                <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
              </element>
            </element>
          </element>
          <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
            <description>Topic on which data is published.</description>
          </element>
          <element name ='angular_velocity' required ='0'>
            <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
            <element name ='x' required ='0'>
              <description>Angular velocity about the X axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Angular velocity about the Y axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Angular velocity about the Z axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='linear_acceleration' required ='0'>
            <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
            <element name ='x' required ='0'>
              <description>Linear acceleration about the X axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Linear acceleration about the Y axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Linear acceleration about the Z axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='logical_camera' required ='0'>
          <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
          <element name ='near' required ='1' type ='double' default ='0'>
            <description>Near clipping distance of the view frustum</description>
          </element>
          <element name ='far' required ='1' type ='double' default ='1'>
            <description>Far clipping distance of the view frustum</description>
          </element>
          <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
            <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
          </element>
          <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
            <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
          </element>
        </element>
        <element name ='magnetometer' required ='0'>
          <description>These elements are specific to a Magnetometer sensor.</description>
          <element name ='x' required ='0'>
            <description>Parameters related to the body-frame X axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='y' required ='0'>
            <description>Parameters related to the body-frame Y axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='z' required ='0'>
            <description>Parameters related to the body-frame Z axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='ray' required ='0'>
          <description>These elements are specific to the ray (laser) sensor.</description>
          <element name ='scan' required ='1'>
            <description></description>
            <element name ='horizontal' required ='1'>
              <description></description>
              <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
              </element>
              <element name ='resolution' required ='1' type ='double' default ='1'>
                <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
              </element>
              <element name ='min_angle' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='max_angle' required ='1' type ='double' default ='0'>
                <description>Must be greater or equal to min_angle</description>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description></description>
              <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
              </element>
              <element name ='resolution' required ='0' type ='double' default ='1'>
                <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
              </element>
              <element name ='min_angle' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='max_angle' required ='1' type ='double' default ='0'>
                <description>Must be greater or equal to min_angle</description>
              </element>
            </element>
          </element>
          <element name ='range' required ='1'>
            <description>specifies range properties of each simulated ray</description>
            <element name ='min' required ='1' type ='double' default ='0'>
              <description>The minimum distance for each ray.</description>
            </element>
            <element name ='max' required ='1' type ='double' default ='0'>
              <description>The maximum distance for each ray.</description>
            </element>
            <element name ='resolution' required ='0' type ='double' default ='0'>
              <description>Linear resolution of each ray.</description>
            </element>
          </element>
          <element name ='noise' required ='0'>
            <description>The properties of the noise model that should be applied to generated scans</description>
            <element name ='type' required ='1' type ='string' default ='gaussian'>
              <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
            </element>
            <element name ='mean' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
            </element>
            <element name ='stddev' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
            </element>
          </element>
        </element>
        <element name ='rfidtag' required ='0'>
          <description></description>
        </element>
        <element name ='rfid' required ='0'>
          <description></description>
        </element>
        <element name ='sonar' required ='0'>
          <description>These elements are specific to the sonar sensor.</description>
          <element name ='geometry' required ='0' type ='string' default ='cone'>
            <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
          </element>
          <element name ='min' required ='1' type ='double' default ='0'>
            <description>Minimum range</description>
          </element>
          <element name ='max' required ='1' type ='double' default ='1'>
            <description>Max range</description>
          </element>
          <element name ='radius' required ='0' type ='double' default ='0.5'>
            <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
          </element>
        </element>
        <element name ='transceiver' required ='0'>
          <description>These elements are specific to a wireless transceiver.</description>
          <element name ='essid' required ='0' type ='string' default ='wireless'>
            <description>Service set identifier (network name)</description>
          </element>
          <element name ='frequency' required ='0' type ='double' default ='2442'>
            <description>Specifies the frequency of transmission in MHz</description>
          </element>
          <element name ='min_frequency' required ='0' type ='double' default ='2412'>
            <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
          </element>
          <element name ='max_frequency' required ='0' type ='double' default ='2484'>
            <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
          </element>
          <element name ='gain' required ='1' type ='double' default ='2.5'>
            <description>Specifies the antenna gain in dBi</description>
          </element>
          <element name ='power' required ='1' type ='double' default ='14.5'>
            <description>Specifies the transmission power in dBm</description>
          </element>
          <element name ='sensitivity' required ='0' type ='double' default ='-90'>
            <description>Mininum received signal power in dBm</description>
          </element>
        </element>
        <element name ='force_torque' required ='0'>
          <description>These elements are specific to the force torque sensor.</description>
          <element name ='frame' required ='0' type ='string' default ='child'>
            <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
          </element>
          <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
            <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
          </element>
        </element>
      </element>
    </element>
    <element name ='plugin' required ='*'>
      <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the plugin, scoped to its parent.</description>
      </attribute>
      <attribute name ='filename' type ='string' default ='__default__' required ='1'>
        <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
      </attribute>
      <element copy_data ='true' required ='*'/>
    </element>
    <element name ='gripper' required ='*'>
      <description></description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description></description>
      </attribute>
      <element name ='grasp_check' required ='0'>
        <description></description>
        <element name ='detach_steps' required ='0' type ='int' default ='40'>
          <description></description>
        </element>
        <element name ='attach_steps' required ='0' type ='int' default ='20'>
          <description></description>
        </element>
        <element name ='min_contact_count' required ='0' type ='unsigned int' default ='2'>
          <description></description>
        </element>
      </element>
      <element name ='gripper_link' required ='+' type ='string' default ='__default__'>
        <description></description>
      </element>
      <element name ='palm_link' required ='1' type ='string' default ='__default__'>
        <description></description>
      </element>
    </element>
  </element>
  <element name ='actor' required ='*'>
    <description>A special kind of model which can have a scripted motion. This includes both global waypoint type animations and skeleton animations.</description>
    <attribute name ='name' type ='string' default ='__default__' required ='1'>
      <description>A unique name for the actor.</description>
    </attribute>
    <element name ='static' required ='0' type ='bool' default ='1'>
      <description>(DEPRECATION WARNING: This is deprecated in 1.6 and removed in 1.7. Actors should be static, so this is always true.</description>
    </element>
    <element name ='skin' required ='0'>
      <description>Skin file which defines a visual and the underlying skeleton which moves it.</description>
      <element name ='filename' required ='1' type ='string' default ='__default__'>
        <description>Path to skin file, accepted formats: COLLADA, BVH.</description>
      </element>
      <element name ='scale' required ='0' type ='double' default ='1'>
        <description>Scale the skin's size.</description>
      </element>
    </element>
    <element name ='animation' required ='*'>
      <description>Animation file defines an animation for the skeleton in the skin. The skeleton must be compatible with the skin skeleton.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>Unique name for animation.</description>
      </attribute>
      <element name ='filename' required ='1' type ='string' default ='__default__'>
        <description>Path to animation file. Accepted formats: COLLADA, BVH.</description>
      </element>
      <element name ='scale' required ='0' type ='double' default ='1'>
        <description>Scale for the animation skeleton.</description>
      </element>
      <element name ='interpolate_x' required ='0' type ='bool' default ='0'>
        <description>Set to true so the animation is interpolated on X.</description>
      </element>
    </element>
    <element name ='script' required ='1'>
      <description>Adds scripted trajectories to the actor.</description>
      <element name ='loop' required ='0' type ='bool' default ='1'>
        <description>Set this to true for the script to be repeated in a loop. For a fluid continuous motion, make sure the last waypoint matches the first one.</description>
      </element>
      <element name ='delay_start' required ='0' type ='double' default ='0'>
        <description>This is the time to wait before starting the script. If running in a loop, this time will be waited before starting each cycle.</description>
      </element>
      <element name ='auto_start' required ='0' type ='bool' default ='1'>
        <description>Set to true if the animation should start as soon as the simulation starts playing. It is useful to set this to false if the animation should only start playing only when triggered by a plugin, for example.</description>
      </element>
      <element name ='trajectory' required ='*'>
        <description>The trajectory contains a series of keyframes to be followed.</description>
        <attribute name ='id' type ='int' default ='0' required ='1'>
          <description>Unique id for a trajectory.</description>
        </attribute>
        <attribute name ='type' type ='string' default ='__default__' required ='1'>
          <description>If it matches the type of an animation, they will be played at the same time.</description>
        </attribute>
        <attribute name ='tension' type ='double' default ='0' required ='0'>
          <description>The tension of the trajectory spline. The default value of zero equates to a Catmull-Rom spline, which may also cause the animation to overshoot keyframes. A value of one will cause the animation to stick to the keyframes.</description>
        </attribute>
        <element name ='waypoint' required ='*'>
          <description>Each point in the trajectory.</description>
          <element name ='time' required ='1' type ='double' default ='0'>
            <description>The time in seconds, counted from the beginning of the script, when the pose should be reached.</description>
          </element>
          <element name ='pose' required ='1' type ='pose' default ='0 0 0 0 -0 0'>
            <description>The pose which should be reached at the given time.</description>
          </element>
        </element>
      </element>
    </element>
    <element name ='frame' required ='*'>
      <description>A frame of reference to which a pose is relative.</description>
      <attribute name ='name' type ='string' default ='' required ='1'>
        <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
      </attribute>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
    </element>
    <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
      <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
      <attribute name ='frame' type ='string' default ='' required ='0'>
        <description>Name of frame which the pose is defined relative to.</description>
      </attribute>
    </element>
    <element name ='link' required ='*'>
      <description>A physical link with inertia, collision, and visual properties. A link must be a child of a model, and any number of links may exist in a model.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the link within the scope of the model.</description>
      </attribute>
      <element name ='gravity' required ='0' type ='bool' default ='1'>
        <description>If true, the link is affected by gravity.</description>
      </element>
      <element name ='enable_wind' required ='0' type ='bool' default ='0'>
        <description>If true, the link is affected by the wind.</description>
      </element>
      <element name ='self_collide' required ='0' type ='bool' default ='0'>
        <description>If true, the link can collide with other links in the model. Two links within a model will collide if link1.self_collide OR link2.self_collide. Links connected by a joint will never collide.</description>
      </element>
      <element name ='kinematic' required ='0' type ='bool' default ='0'>
        <description>If true, the link is kinematic only</description>
      </element>
      <element name ='must_be_base_link' required ='0' type ='bool' default ='0'>
        <description>If true, the link will have 6DOF and be a direct child of world.</description>
      </element>
      <element name ='velocity_decay' required ='0'>
        <description>Exponential damping of the link's velocity.</description>
        <element name ='linear' required ='0' type ='double' default ='0'>
          <description>Linear damping</description>
        </element>
        <element name ='angular' required ='0' type ='double' default ='0'>
          <description>Angular damping</description>
        </element>
      </element>
      <element name ='frame' required ='*'>
        <description>A frame of reference to which a pose is relative.</description>
        <attribute name ='name' type ='string' default ='' required ='1'>
          <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
        </attribute>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
      <element name ='inertial' required ='0'>
        <description>The inertial properties of the link.</description>
        <element name ='mass' required ='0' type ='double' default ='1'>
          <description>The mass of the link.</description>
        </element>
        <element name ='inertia' required ='0'>
          <description>The 3x3 rotational inertia matrix. Because the rotational inertia matrix is symmetric, only 6 above-diagonal elements of this matrix are specified here, using the attributes ixx, ixy, ixz, iyy, iyz, izz.</description>
          <element name ='ixx' required ='1' type ='double' default ='1'>
            <description></description>
          </element>
          <element name ='ixy' required ='1' type ='double' default ='0'>
            <description></description>
          </element>
          <element name ='ixz' required ='1' type ='double' default ='0'>
            <description></description>
          </element>
          <element name ='iyy' required ='1' type ='double' default ='1'>
            <description></description>
          </element>
          <element name ='iyz' required ='1' type ='double' default ='0'>
            <description></description>
          </element>
          <element name ='izz' required ='1' type ='double' default ='1'>
            <description></description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>This is the pose of the inertial reference frame, relative to the specified reference frame. The origin of the inertial reference frame needs to be at the center of gravity. The axes of the inertial reference frame do not need to be aligned with the principal axes of the inertia.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='collision' required ='*'>
        <description>The collision properties of a link. Note that this can be different from the visual properties of a link, for example, simpler collision models are often used to reduce computation time.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Unique name for the collision element within the scope of the parent link.</description>
        </attribute>
        <element name ='laser_retro' required ='0' type ='double' default ='0'>
          <description>intensity value returned by laser sensor.</description>
        </element>
        <element name ='max_contacts' required ='0' type ='int' default ='10'>
          <description>Maximum number of contacts allowed between two entities. This value overrides the max_contacts element defined in physics.</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='geometry' required ='1'>
          <description>The shape of the visual or collision object.</description>
          <element name ='empty' required ='0'>
            <description>You can use the empty tag to make empty geometries.</description>
          </element>
          <element name ='box' required ='0'>
            <description>Box shape</description>
            <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
              <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
            </element>
          </element>
          <element name ='cylinder' required ='0'>
            <description>Cylinder shape</description>
            <element name ='radius' required ='1' type ='double' default ='1'>
              <description>Radius of the cylinder</description>
            </element>
            <element name ='length' required ='1' type ='double' default ='1'>
              <description>Length of the cylinder</description>
            </element>
          </element>
          <element name ='heightmap' required ='0'>
            <description>A heightmap based on a 2d grayscale image.</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>URI to a grayscale image file</description>
            </element>
            <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
              <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
            </element>
            <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
              <description>A position offset.</description>
            </element>
            <element name ='texture' required ='*'>
              <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
              <element name ='size' required ='1' type ='double' default ='10'>
                <description>Size of the applied texture in meters.</description>
              </element>
              <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                <description>Diffuse texture image filename</description>
              </element>
              <element name ='normal' required ='1' type ='string' default ='__default__'>
                <description>Normalmap texture image filename</description>
              </element>
            </element>
            <element name ='blend' required ='*'>
              <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
              <element name ='min_height' required ='1' type ='double' default ='0'>
                <description>Min height of a blend layer</description>
              </element>
              <element name ='fade_dist' required ='1' type ='double' default ='0'>
                <description>Distance over which the blend occurs</description>
              </element>
            </element>
            <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
              <description>Set if the rendering engine will use terrain paging</description>
            </element>
            <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
              <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
            </element>
          </element>
          <element name ='image' required ='0'>
            <description>Extrude a set of boxes from a grayscale image.</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>URI of the grayscale image file</description>
            </element>
            <element name ='scale' required ='1' type ='double' default ='1'>
              <description>Scaling factor applied to the image</description>
            </element>
            <element name ='threshold' required ='1' type ='int' default ='200'>
              <description>Grayscale threshold</description>
            </element>
            <element name ='height' required ='1' type ='double' default ='1'>
              <description>Height of the extruded boxes</description>
            </element>
            <element name ='granularity' required ='1' type ='int' default ='1'>
              <description>The amount of error in the model</description>
            </element>
          </element>
          <element name ='mesh' required ='0'>
            <description>Mesh shape</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>Mesh uri</description>
            </element>
            <element name ='submesh' required ='0'>
              <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
              <element name ='name' required ='1' type ='string' default ='__default__'>
                <description>Name of the submesh within the parent mesh</description>
              </element>
              <element name ='center' required ='0' type ='bool' default ='0'>
                <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
              </element>
            </element>
            <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
              <description>Scaling factor applied to the mesh</description>
            </element>
          </element>
          <element name ='plane' required ='0'>
            <description>Plane shape</description>
            <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
              <description>Normal direction for the plane</description>
            </element>
            <element name ='size' required ='1' type ='vector2d' default ='1 1'>
              <description>Length of each side of the plane</description>
            </element>
          </element>
          <element name ='polyline' required ='0'>
            <description>Defines an extruded polyline shape</description>
            <element name ='point' required ='+' type ='vector2d' default ='0 0'>
              <description>A series of points that define the path of the polyline.</description>
            </element>
            <element name ='height' required ='1' type ='double' default ='1'>
              <description>Height of the polyline</description>
            </element>
          </element>
          <element name ='sphere' required ='0'>
            <description>Sphere shape</description>
            <element name ='radius' required ='1' type ='double' default ='1'>
              <description>radius of the sphere</description>
            </element>
          </element>
        </element>
        <element name ='surface' required ='0'>
          <description>The surface parameters</description>
          <element name ='bounce' required ='0'>
            <description></description>
            <element name ='restitution_coefficient' required ='0' type ='double' default ='0'>
              <description>Bounciness coefficient of restitution, from [0...1], where 0=no bounciness.</description>
            </element>
            <element name ='threshold' required ='0' type ='double' default ='100000'>
              <description>Bounce capture velocity, below which effective coefficient of restitution is 0.</description>
            </element>
          </element>
          <element name ='friction' required ='0'>
            <description></description>
            <element name ='torsional' required ='0'>
              <description>Parameters for torsional friction</description>
              <element name ='coefficient' required ='0' type ='double' default ='1'>
                <description>Torsional friction coefficient, unitless maximum ratio of tangential stress to normal stress.</description>
              </element>
              <element name ='use_patch_radius' required ='0' type ='bool' default ='1'>
                <description>If this flag is true, torsional friction is calculated using the "patch_radius" parameter. If this flag is set to false, "surface_radius" (R) and contact depth (d) are used to compute the patch radius as sqrt(R*d).</description>
              </element>
              <element name ='patch_radius' required ='0' type ='double' default ='0'>
                <description>Radius of contact patch surface.</description>
              </element>
              <element name ='surface_radius' required ='0' type ='double' default ='0'>
                <description>Surface radius on the point of contact.</description>
              </element>
              <element name ='ode' required ='0'>
                <description>Torsional friction parameters for ODE</description>
                <element name ='slip' required ='0' type ='double' default ='0'>
                  <description>Force dependent slip for torsional friction, equivalent to inverse of viscous damping coefficient with units of rad/s/(Nm). A slip value of 0 is infinitely viscous.</description>
                </element>
              </element>
            </element>
            <element name ='ode' required ='0'>
              <description>ODE friction parameters</description>
              <element name ='mu' required ='0' type ='double' default ='1'>
                <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
              </element>
              <element name ='mu2' required ='0' type ='double' default ='1'>
                <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
              </element>
              <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the ODE Collide callback function will align the friction pyramid directions with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
              </element>
              <element name ='slip1' required ='0' type ='double' default ='0'>
                <description>Force dependent slip in first friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
              </element>
              <element name ='slip2' required ='0' type ='double' default ='0'>
                <description>Force dependent slip in second friction pyramid direction, equivalent to inverse of viscous damping coefficient with units of m/s/N. A slip value of 0 is infinitely viscous.</description>
              </element>
            </element>
            <element name ='bullet' required ='0'>
              <description></description>
              <element name ='friction' required ='0' type ='double' default ='1'>
                <description>Coefficient of friction in first friction pyramid direction, the unitless maximum ratio of force in first friction pyramid direction to normal force.</description>
              </element>
              <element name ='friction2' required ='0' type ='double' default ='1'>
                <description>Coefficient of friction in second friction pyramid direction, the unitless maximum ratio of force in second friction pyramid direction to normal force.</description>
              </element>
              <element name ='fdir1' required ='0' type ='vector3' default ='0 0 0'>
                <description>Unit vector specifying first friction pyramid direction in collision-fixed reference frame. If the friction pyramid model is in use, and this value is set to a unit vector for one of the colliding surfaces, the friction pyramid directions will be aligned with a reference frame fixed to that collision surface. If both surfaces have this value set to a vector of zeros, the friction pyramid directions will be aligned with the world frame. If this value is set for both surfaces, the behavior is undefined.</description>
              </element>
              <element name ='rolling_friction' required ='0' type ='double' default ='1'>
                <description>Coefficient of rolling friction</description>
              </element>
            </element>
          </element>
          <element name ='contact' required ='0'>
            <description></description>
            <element name ='collide_without_contact' required ='0' type ='bool' default ='0'>
              <description>Flag to disable contact force generation, while still allowing collision checks and contact visualization to occur.</description>
            </element>
            <element name ='collide_without_contact_bitmask' required ='0' type ='unsigned int' default ='1'>
              <description>Bitmask for collision filtering when collide_without_contact is on</description>
            </element>
            <element name ='collide_bitmask' required ='0' type ='unsigned int' default ='65535'>
              <description>Bitmask for collision filtering. This will override collide_without_contact</description>
            </element>
            <element name ='category_bitmask' required ='0' type ='unsigned int' default ='65535'>
              <description>Bitmask for category of collision filtering. Collision happens if ((category1 & collision2) | (category2 & collision1)) is not zero. If not specified, the category_bitmask should be interpreted as being the same as collide_bitmask.</description>
            </element>
            <element name ='poissons_ratio' required ='0' type ='double' default ='0.3'>
              <description>Poisson's ratio is the unitless ratio between transverse and axial strain. This value must lie between (-1, 0.5). Defaults to 0.3 for typical steel. Note typical silicone elastomers have Poisson's ratio near 0.49 ~ 0.50. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
            </element>
            <element name ='elastic_modulus' required ='0' type ='double' default ='-1'>
              <description>Young's Modulus in SI derived unit Pascal. Defaults to -1. If value is less or equal to zero, contact using elastic modulus (with Poisson's Ratio) is disabled. For reference, approximate values for Material:(Young's Modulus, Poisson's Ratio) for some of the typical materials are: Plastic: (1e8 ~ 3e9 Pa, 0.35 ~ 0.41), Wood: (4e9 ~ 1e10 Pa, 0.22 ~ 0.50), Aluminum: (7e10 Pa, 0.32 ~ 0.35), Steel: (2e11 Pa, 0.26 ~ 0.31).</description>
            </element>
            <element name ='ode' required ='0'>
              <description>ODE contact parameters</description>
              <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                <description>Soft constraint force mixing.</description>
              </element>
              <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                <description>Soft error reduction parameter</description>
              </element>
              <element name ='kp' required ='0' type ='double' default ='1e+12'>
                <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
              </element>
              <element name ='kd' required ='0' type ='double' default ='1'>
                <description>dynamically "damping"-equivalent coefficient for contact joints</description>
              </element>
              <element name ='max_vel' required ='0' type ='double' default ='0.01'>
                <description>maximum contact correction velocity truncation term.</description>
              </element>
              <element name ='min_depth' required ='0' type ='double' default ='0'>
                <description>minimum allowable depth before contact correction impulse is applied</description>
              </element>
            </element>
            <element name ='bullet' required ='0'>
              <description>Bullet contact parameters</description>
              <element name ='soft_cfm' required ='0' type ='double' default ='0'>
                <description>Soft constraint force mixing.</description>
              </element>
              <element name ='soft_erp' required ='0' type ='double' default ='0.2'>
                <description>Soft error reduction parameter</description>
              </element>
              <element name ='kp' required ='0' type ='double' default ='1e+12'>
                <description>dynamically "stiffness"-equivalent coefficient for contact joints</description>
              </element>
              <element name ='kd' required ='0' type ='double' default ='1'>
                <description>dynamically "damping"-equivalent coefficient for contact joints</description>
              </element>
              <element name ='split_impulse' required ='1' type ='bool' default ='1'>
                <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
              </element>
              <element name ='split_impulse_penetration_threshold' required ='1' type ='double' default ='-0.01'>
                <description>Similar to ODE's max_vel implementation. See http://bulletphysics.org/mediawiki-1.5.8/index.php/BtContactSolverInfo#Split_Impulse for more information.</description>
              </element>
            </element>
          </element>
          <element name ='soft_contact' required ='0'>
            <description></description>
            <element name ='dart' required ='0'>
              <description>soft contact pamameters based on paper: http://www.cc.gatech.edu/graphics/projects/Sumit/homepage/papers/sigasia11/jain_softcontacts_siga11.pdf</description>
              <element name ='bone_attachment' required ='1' type ='double' default ='100'>
                <description>This is variable k_v in the soft contacts paper. Its unit is N/m.</description>
              </element>
              <element name ='stiffness' required ='1' type ='double' default ='100'>
                <description>This is variable k_e in the soft contacts paper. Its unit is N/m.</description>
              </element>
              <element name ='damping' required ='1' type ='double' default ='10'>
                <description>Viscous damping of point velocity in body frame. Its unit is N/m/s.</description>
              </element>
              <element name ='flesh_mass_fraction' required ='1' type ='double' default ='0.05'>
                <description>Fraction of mass to be distributed among deformable nodes.</description>
              </element>
            </element>
          </element>
        </element>
      </element>
      <element name ='visual' required ='*'>
        <description>The visual properties of the link. This element specifies the shape of the object (box, cylinder, etc.) for visualization purposes.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Unique name for the visual element within the scope of the parent link.</description>
        </attribute>
        <element name ='cast_shadows' required ='0' type ='bool' default ='1'>
          <description>If true the visual will cast shadows.</description>
        </element>
        <element name ='laser_retro' required ='0' type ='double' default ='0'>
          <description>will be implemented in the future release.</description>
        </element>
        <element name ='transparency' required ='0' type ='double' default ='0'>
          <description>The amount of transparency( 0=opaque, 1 = fully transparent)</description>
        </element>
        <element name ='meta' required ='0'>
          <description>Optional meta information for the visual. The information contained within this element should be used to provide additional feedback to an end user.</description>
          <element name ='layer' required ='0' type ='int' default ='0'>
            <description>The layer in which this visual is displayed. The layer number is useful for programs, such as Gazebo, that put visuals in different layers for enhanced visualization.</description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='material' required ='0'>
          <description>The material of the visual element.</description>
          <element name ='script' required ='0'>
            <description>Name of material from an installed script file. This will override the color element if the script exists.</description>
            <element name ='uri' required ='+' type ='string' default ='__default__'>
              <description>URI of the material script file</description>
            </element>
            <element name ='name' required ='1' type ='string' default ='__default__'>
              <description>Name of the script within the script file</description>
            </element>
          </element>
          <element name ='shader' required ='0'>
            <description></description>
            <attribute name ='type' type ='string' default ='pixel' required ='1'>
              <description>vertex, pixel, normal_map_objectspace, normal_map_tangentspace</description>
            </attribute>
            <element name ='normal_map' required ='0' type ='string' default ='__default__'>
              <description>filename of the normal map</description>
            </element>
          </element>
          <element name ='lighting' required ='0' type ='bool' default ='1'>
            <description>If false, dynamic lighting will be disabled</description>
          </element>
          <element name ='ambient' required ='0' type ='color' default ='0 0 0 1'>
            <description>The ambient color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
          </element>
          <element name ='diffuse' required ='0' type ='color' default ='0 0 0 1'>
            <description>The diffuse color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
          </element>
          <element name ='specular' required ='0' type ='color' default ='0 0 0 1'>
            <description>The specular color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1].</description>
          </element>
          <element name ='emissive' required ='0' type ='color' default ='0 0 0 1'>
            <description>The emissive color of a material specified by set of four numbers representing red/green/blue, each in the range of [0,1].</description>
          </element>
        </element>
        <element name ='geometry' required ='1'>
          <description>The shape of the visual or collision object.</description>
          <element name ='empty' required ='0'>
            <description>You can use the empty tag to make empty geometries.</description>
          </element>
          <element name ='box' required ='0'>
            <description>Box shape</description>
            <element name ='size' required ='1' type ='vector3' default ='1 1 1'>
              <description>The three side lengths of the box. The origin of the box is in its geometric center (inside the center of the box).</description>
            </element>
          </element>
          <element name ='cylinder' required ='0'>
            <description>Cylinder shape</description>
            <element name ='radius' required ='1' type ='double' default ='1'>
              <description>Radius of the cylinder</description>
            </element>
            <element name ='length' required ='1' type ='double' default ='1'>
              <description>Length of the cylinder</description>
            </element>
          </element>
          <element name ='heightmap' required ='0'>
            <description>A heightmap based on a 2d grayscale image.</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>URI to a grayscale image file</description>
            </element>
            <element name ='size' required ='0' type ='vector3' default ='1 1 1'>
              <description>The size of the heightmap in world units. When loading an image: "size" is used if present, otherwise defaults to 1x1x1. When loading a DEM: "size" is used if present, otherwise defaults to true size of DEM.</description>
            </element>
            <element name ='pos' required ='0' type ='vector3' default ='0 0 0'>
              <description>A position offset.</description>
            </element>
            <element name ='texture' required ='*'>
              <description>The heightmap can contain multiple textures. The order of the texture matters. The first texture will appear at the lowest height, and the last texture at the highest height. Use blend to control the height thresholds and fade between textures.</description>
              <element name ='size' required ='1' type ='double' default ='10'>
                <description>Size of the applied texture in meters.</description>
              </element>
              <element name ='diffuse' required ='1' type ='string' default ='__default__'>
                <description>Diffuse texture image filename</description>
              </element>
              <element name ='normal' required ='1' type ='string' default ='__default__'>
                <description>Normalmap texture image filename</description>
              </element>
            </element>
            <element name ='blend' required ='*'>
              <description>The blend tag controls how two adjacent textures are mixed. The number of blend elements should equal one less than the number of textures.</description>
              <element name ='min_height' required ='1' type ='double' default ='0'>
                <description>Min height of a blend layer</description>
              </element>
              <element name ='fade_dist' required ='1' type ='double' default ='0'>
                <description>Distance over which the blend occurs</description>
              </element>
            </element>
            <element name ='use_terrain_paging' required ='0' type ='bool' default ='0'>
              <description>Set if the rendering engine will use terrain paging</description>
            </element>
            <element name ='sampling' required ='0' type ='unsigned int' default ='2'>
              <description>Samples per heightmap datum. For rasterized heightmaps, this indicates the number of samples to take per pixel. Using a lower value, e.g. 1, will generally improve the performance of the heightmap but lower the heightmap quality.</description>
            </element>
          </element>
          <element name ='image' required ='0'>
            <description>Extrude a set of boxes from a grayscale image.</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>URI of the grayscale image file</description>
            </element>
            <element name ='scale' required ='1' type ='double' default ='1'>
              <description>Scaling factor applied to the image</description>
            </element>
            <element name ='threshold' required ='1' type ='int' default ='200'>
              <description>Grayscale threshold</description>
            </element>
            <element name ='height' required ='1' type ='double' default ='1'>
              <description>Height of the extruded boxes</description>
            </element>
            <element name ='granularity' required ='1' type ='int' default ='1'>
              <description>The amount of error in the model</description>
            </element>
          </element>
          <element name ='mesh' required ='0'>
            <description>Mesh shape</description>
            <element name ='uri' required ='1' type ='string' default ='__default__'>
              <description>Mesh uri</description>
            </element>
            <element name ='submesh' required ='0'>
              <description>Use a named submesh. The submesh must exist in the mesh specified by the uri</description>
              <element name ='name' required ='1' type ='string' default ='__default__'>
                <description>Name of the submesh within the parent mesh</description>
              </element>
              <element name ='center' required ='0' type ='bool' default ='0'>
                <description>Set to true to center the vertices of the submesh at 0,0,0. This will effectively remove any transformations on the submesh before the poses from parent links and models are applied.</description>
              </element>
            </element>
            <element name ='scale' required ='0' type ='vector3' default ='1 1 1'>
              <description>Scaling factor applied to the mesh</description>
            </element>
          </element>
          <element name ='plane' required ='0'>
            <description>Plane shape</description>
            <element name ='normal' required ='1' type ='vector3' default ='0 0 1'>
              <description>Normal direction for the plane</description>
            </element>
            <element name ='size' required ='1' type ='vector2d' default ='1 1'>
              <description>Length of each side of the plane</description>
            </element>
          </element>
          <element name ='polyline' required ='0'>
            <description>Defines an extruded polyline shape</description>
            <element name ='point' required ='+' type ='vector2d' default ='0 0'>
              <description>A series of points that define the path of the polyline.</description>
            </element>
            <element name ='height' required ='1' type ='double' default ='1'>
              <description>Height of the polyline</description>
            </element>
          </element>
          <element name ='sphere' required ='0'>
            <description>Sphere shape</description>
            <element name ='radius' required ='1' type ='double' default ='1'>
              <description>radius of the sphere</description>
            </element>
          </element>
        </element>
        <element name ='plugin' required ='*'>
          <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the plugin, scoped to its parent.</description>
          </attribute>
          <attribute name ='filename' type ='string' default ='__default__' required ='1'>
            <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
          </attribute>
          <element copy_data ='true' required ='*'/>
        </element>
      </element>
      <element name ='sensor' required ='0'>
        <description>The sensor tag describes the type and properties of a sensor.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the sensor. This name must not match another model in the model.</description>
        </attribute>
        <attribute name ='type' type ='string' default ='__default__' required ='1'>
          <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
        </attribute>
        <element name ='always_on' required ='0' type ='bool' default ='0'>
          <description>If true the sensor will always be updated according to the update rate.</description>
        </element>
        <element name ='update_rate' required ='0' type ='double' default ='0'>
          <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
        </element>
        <element name ='visualize' required ='0' type ='bool' default ='0'>
          <description>If true, the sensor is visualized in the GUI</description>
        </element>
        <element name ='topic' required ='0' type ='string' default ='__default__'>
          <description>Name of the topic on which data is published. This is necessary for visualization</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='plugin' required ='*'>
          <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the plugin, scoped to its parent.</description>
          </attribute>
          <attribute name ='filename' type ='string' default ='__default__' required ='1'>
            <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
          </attribute>
          <element copy_data ='true' required ='*'/>
        </element>
        <element name ='altimeter' required ='0'>
          <description>These elements are specific to an altimeter sensor.</description>
          <element name ='vertical_position' required ='0'>
            <description>Noise parameters for vertical position</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='vertical_velocity' required ='0'>
            <description>Noise parameters for vertical velocity</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='camera' required ='0'>
          <description>These elements are specific to camera sensors.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='0'>
            <description>An optional name for the camera.</description>
          </attribute>
          <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
            <description>Horizontal field of view</description>
          </element>
          <element name ='image' required ='1'>
            <description>The image size in pixels and format.</description>
            <element name ='width' required ='1' type ='int' default ='320'>
              <description>Width in pixels</description>
            </element>
            <element name ='height' required ='1' type ='int' default ='240'>
              <description>Height in pixels</description>
            </element>
            <element name ='format' required ='0' type ='string' default ='R8G8B8'>
              <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
            </element>
          </element>
          <element name ='clip' required ='1'>
            <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
            <element name ='near' required ='1' type ='double' default ='0.1'>
              <description>Near clipping plane</description>
            </element>
            <element name ='far' required ='1' type ='double' default ='100'>
              <description>Far clipping plane</description>
            </element>
          </element>
          <element name ='save' required ='0'>
            <description>Enable or disable saving of camera frames.</description>
            <attribute name ='enabled' type ='bool' default ='0' required ='1'>
              <description>True = saving enabled</description>
            </attribute>
            <element name ='path' required ='1' type ='string' default ='__default__'>
              <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
            </element>
          </element>
          <element name ='depth_camera' required ='0'>
            <description>Depth camera parameters</description>
            <element name ='output' required ='1' type ='string' default ='depths'>
              <description>Type of output</description>
            </element>
          </element>
          <element name ='noise' required ='0'>
            <description>The properties of the noise model that should be applied to generated images</description>
            <element name ='type' required ='1' type ='string' default ='gaussian'>
              <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
            </element>
            <element name ='mean' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
            </element>
            <element name ='stddev' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
            </element>
          </element>
          <element name ='distortion' required ='0'>
            <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
            <element name ='k1' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k1</description>
            </element>
            <element name ='k2' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k2</description>
            </element>
            <element name ='k3' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k3</description>
            </element>
            <element name ='p1' required ='0' type ='double' default ='0'>
              <description>The tangential distortion coefficient p1</description>
            </element>
            <element name ='p2' required ='0' type ='double' default ='0'>
              <description>The tangential distortion coefficient p2</description>
            </element>
            <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
              <description>The distortion center or principal point</description>
            </element>
          </element>
          <element name ='lens' required ='0'>
            <description>Lens projection description</description>
            <element name ='type' required ='1' type ='string' default ='stereographic'>
              <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
            </element>
            <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
              <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
            </element>
            <element name ='custom_function' required ='0'>
              <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
              <element name ='c1' required ='0' type ='double' default ='1'>
                <description>Linear scaling constant</description>
              </element>
              <element name ='c2' required ='0' type ='double' default ='1'>
                <description>Angle scaling constant</description>
              </element>
              <element name ='c3' required ='0' type ='double' default ='0'>
                <description>Angle offset constant</description>
              </element>
              <element name ='f' required ='0' type ='double' default ='1'>
                <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
              </element>
              <element name ='fun' required ='1' type ='string' default ='tan'>
                <description>Possible values are 'sin', 'tan' and 'id'</description>
              </element>
            </element>
            <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
              <description>Everything outside of the specified angle will be hidden, 90° by default</description>
            </element>
            <element name ='env_texture_size' required ='0' type ='int' default ='256'>
              <description>Resolution of the environment cube map used to draw the world</description>
            </element>
            <element name ='intrinsics' required ='0'>
              <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
              <element name ='fx' required ='1' type ='double' default ='277'>
                <description>X focal length (in pixels, overrides horizontal_fov)</description>
              </element>
              <element name ='fy' required ='1' type ='double' default ='277'>
                <description>Y focal length (in pixels, overrides horizontal_fov)</description>
              </element>
              <element name ='cx' required ='1' type ='double' default ='160'>
                <description>X principal point (in pixels)</description>
              </element>
              <element name ='cy' required ='1' type ='double' default ='120'>
                <description>Y principal point (in pixels)</description>
              </element>
              <element name ='s' required ='1' type ='double' default ='1'>
                <description>XY axis skew</description>
              </element>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='contact' required ='0'>
          <description>These elements are specific to the contact sensor.</description>
          <element name ='collision' required ='1' type ='string' default ='__default__'>
            <description>name of the collision element within a link that acts as the contact sensor.</description>
          </element>
          <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
            <description>Topic on which contact data is published.</description>
          </element>
        </element>
        <element name ='gps' required ='0'>
          <description>These elements are specific to the GPS sensor.</description>
          <element name ='position_sensing' required ='0'>
            <description>Parameters related to GPS position measurement.</description>
            <element name ='horizontal' required ='0'>
              <description>Noise parameters for horizontal position measurement, in units of meters.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description>Noise parameters for vertical position measurement, in units of meters.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='velocity_sensing' required ='0'>
            <description>Parameters related to GPS position measurement.</description>
            <element name ='horizontal' required ='0'>
              <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='imu' required ='0'>
          <description>These elements are specific to the IMU sensor.</description>
          <element name ='orientation_reference_frame' required ='0'>
            <description></description>
            <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
              <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
            </element>
            <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
              <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
              <element name ='parent_frame' required ='0' type ='string' default =''>
                <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
              </element>
            </element>
            <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
              <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
              <element name ='parent_frame' required ='0' type ='string' default =''>
                <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
              </element>
            </element>
          </element>
          <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
            <description>Topic on which data is published.</description>
          </element>
          <element name ='angular_velocity' required ='0'>
            <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
            <element name ='x' required ='0'>
              <description>Angular velocity about the X axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Angular velocity about the Y axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Angular velocity about the Z axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='linear_acceleration' required ='0'>
            <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
            <element name ='x' required ='0'>
              <description>Linear acceleration about the X axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Linear acceleration about the Y axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Linear acceleration about the Z axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='logical_camera' required ='0'>
          <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
          <element name ='near' required ='1' type ='double' default ='0'>
            <description>Near clipping distance of the view frustum</description>
          </element>
          <element name ='far' required ='1' type ='double' default ='1'>
            <description>Far clipping distance of the view frustum</description>
          </element>
          <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
            <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
          </element>
          <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
            <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
          </element>
        </element>
        <element name ='magnetometer' required ='0'>
          <description>These elements are specific to a Magnetometer sensor.</description>
          <element name ='x' required ='0'>
            <description>Parameters related to the body-frame X axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='y' required ='0'>
            <description>Parameters related to the body-frame Y axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='z' required ='0'>
            <description>Parameters related to the body-frame Z axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='ray' required ='0'>
          <description>These elements are specific to the ray (laser) sensor.</description>
          <element name ='scan' required ='1'>
            <description></description>
            <element name ='horizontal' required ='1'>
              <description></description>
              <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
              </element>
              <element name ='resolution' required ='1' type ='double' default ='1'>
                <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
              </element>
              <element name ='min_angle' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='max_angle' required ='1' type ='double' default ='0'>
                <description>Must be greater or equal to min_angle</description>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description></description>
              <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
              </element>
              <element name ='resolution' required ='0' type ='double' default ='1'>
                <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
              </element>
              <element name ='min_angle' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='max_angle' required ='1' type ='double' default ='0'>
                <description>Must be greater or equal to min_angle</description>
              </element>
            </element>
          </element>
          <element name ='range' required ='1'>
            <description>specifies range properties of each simulated ray</description>
            <element name ='min' required ='1' type ='double' default ='0'>
              <description>The minimum distance for each ray.</description>
            </element>
            <element name ='max' required ='1' type ='double' default ='0'>
              <description>The maximum distance for each ray.</description>
            </element>
            <element name ='resolution' required ='0' type ='double' default ='0'>
              <description>Linear resolution of each ray.</description>
            </element>
          </element>
          <element name ='noise' required ='0'>
            <description>The properties of the noise model that should be applied to generated scans</description>
            <element name ='type' required ='1' type ='string' default ='gaussian'>
              <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
            </element>
            <element name ='mean' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
            </element>
            <element name ='stddev' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
            </element>
          </element>
        </element>
        <element name ='rfidtag' required ='0'>
          <description></description>
        </element>
        <element name ='rfid' required ='0'>
          <description></description>
        </element>
        <element name ='sonar' required ='0'>
          <description>These elements are specific to the sonar sensor.</description>
          <element name ='geometry' required ='0' type ='string' default ='cone'>
            <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
          </element>
          <element name ='min' required ='1' type ='double' default ='0'>
            <description>Minimum range</description>
          </element>
          <element name ='max' required ='1' type ='double' default ='1'>
            <description>Max range</description>
          </element>
          <element name ='radius' required ='0' type ='double' default ='0.5'>
            <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
          </element>
        </element>
        <element name ='transceiver' required ='0'>
          <description>These elements are specific to a wireless transceiver.</description>
          <element name ='essid' required ='0' type ='string' default ='wireless'>
            <description>Service set identifier (network name)</description>
          </element>
          <element name ='frequency' required ='0' type ='double' default ='2442'>
            <description>Specifies the frequency of transmission in MHz</description>
          </element>
          <element name ='min_frequency' required ='0' type ='double' default ='2412'>
            <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
          </element>
          <element name ='max_frequency' required ='0' type ='double' default ='2484'>
            <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
          </element>
          <element name ='gain' required ='1' type ='double' default ='2.5'>
            <description>Specifies the antenna gain in dBi</description>
          </element>
          <element name ='power' required ='1' type ='double' default ='14.5'>
            <description>Specifies the transmission power in dBm</description>
          </element>
          <element name ='sensitivity' required ='0' type ='double' default ='-90'>
            <description>Mininum received signal power in dBm</description>
          </element>
        </element>
        <element name ='force_torque' required ='0'>
          <description>These elements are specific to the force torque sensor.</description>
          <element name ='frame' required ='0' type ='string' default ='child'>
            <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
          </element>
          <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
            <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
          </element>
        </element>
      </element>
      <element name ='projector' required ='0'>
        <description></description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Name of the projector</description>
        </attribute>
        <element name ='texture' required ='1' type ='string' default ='__default__'>
          <description>Texture name</description>
        </element>
        <element name ='fov' required ='0' type ='double' default ='0.785'>
          <description>Field of view</description>
        </element>
        <element name ='near_clip' required ='0' type ='double' default ='0.1'>
          <description>Near clip distance</description>
        </element>
        <element name ='far_clip' required ='0' type ='double' default ='10'>
          <description>far clip distance</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='plugin' required ='*'>
          <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the plugin, scoped to its parent.</description>
          </attribute>
          <attribute name ='filename' type ='string' default ='__default__' required ='1'>
            <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
          </attribute>
          <element copy_data ='true' required ='*'/>
        </element>
      </element>
      <element name ='audio_sink' required ='*'>
        <description>An audio sink.</description>
      </element>
      <element name ='audio_source' required ='*'>
        <description>An audio source.</description>
        <element name ='uri' required ='1' type ='string' default ='__default__'>
          <description>URI of the audio media.</description>
        </element>
        <element name ='pitch' required ='0' type ='double' default ='1'>
          <description>Pitch for the audio media, in Hz</description>
        </element>
        <element name ='gain' required ='0' type ='double' default ='1'>
          <description>Gain for the audio media, in dB.</description>
        </element>
        <element name ='contact' required ='0'>
          <description>List of collision objects that will trigger audio playback.</description>
          <element name ='collision' required ='+' type ='string' default ='__default__'>
            <description>Name of child collision element that will trigger audio playback.</description>
          </element>
        </element>
        <element name ='loop' required ='0' type ='bool' default ='0'>
          <description>True to make the audio source loop playback.</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='battery' required ='*'>
        <description>Description of a battery.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>Unique name for the battery.</description>
        </attribute>
        <element name ='voltage' required ='1' type ='double' default ='0'>
          <description>Initial voltage in volts.</description>
        </element>
      </element>
      <element name ='light' required ='*'>
        <description>The light element describes a light source.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='0'>
          <description>A unique name for the light.</description>
        </attribute>
        <attribute name ='type' type ='string' default ='point' required ='1'>
          <description>The light type: point, directional, spot.</description>
        </attribute>
        <element name ='cast_shadows' required ='0' type ='bool' default ='0'>
          <description>When true, the light will cast shadows.</description>
        </element>
        <element name ='diffuse' required ='1' type ='color' default ='1 1 1 1'>
          <description>Diffuse light color</description>
        </element>
        <element name ='specular' required ='1' type ='color' default ='0.1 0.1 0.1 1'>
          <description>Specular light color</description>
        </element>
        <element name ='attenuation' required ='0'>
          <description>Light attenuation</description>
          <element name ='range' required ='1' type ='double' default ='10'>
            <description>Range of the light</description>
          </element>
          <element name ='linear' required ='0' type ='double' default ='1'>
            <description>The linear attenuation factor: 1 means attenuate evenly over the distance.</description>
          </element>
          <element name ='constant' required ='0' type ='double' default ='1'>
            <description>The constant attenuation factor: 1.0 means never attenuate, 0.0 is complete attenutation.</description>
          </element>
          <element name ='quadratic' required ='0' type ='double' default ='0'>
            <description>The quadratic attenuation factor: adds a curvature to the attenuation.</description>
          </element>
        </element>
        <element name ='direction' required ='1' type ='vector3' default ='0 0 -1'>
          <description>Direction of the light, only applicable for spot and directional lights.</description>
        </element>
        <element name ='spot' required ='0'>
          <description>Spot light parameters</description>
          <element name ='inner_angle' required ='1' type ='double' default ='0'>
            <description>Angle covered by the bright inner cone</description>
          </element>
          <element name ='outer_angle' required ='1' type ='double' default ='0'>
            <description>Angle covered by the outer cone</description>
          </element>
          <element name ='falloff' required ='1' type ='double' default ='0'>
            <description>The rate of falloff between the inner and outer cones. 1.0 means a linear falloff, less means slower falloff, higher means faster falloff.</description>
          </element>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
    </element>
    <element name ='joint' required ='*'>
      <description>A joint connections two links with kinematic and dynamic properties.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the joint within the scope of the model.</description>
      </attribute>
      <attribute name ='type' type ='string' default ='__default__' required ='1'>
        <description>The type of joint, which must be one of the following: (revolute) a hinge joint that rotates on a single axis with either a fixed or continuous range of motion, (gearbox) geared revolute joints, (revolute2) same as two revolute joints connected in series, (prismatic) a sliding joint that slides along an axis with a limited range specified by upper and lower limits, (ball) a ball and socket joint, (screw) a single degree of freedom joint with coupled sliding and rotational motion, (universal) like a ball joint, but constrains one degree of freedom, (fixed) a joint with zero degrees of freedom that rigidly connects two links.</description>
      </attribute>
      <element name ='parent' required ='1' type ='string' default ='__default__'>
        <description>Name of the parent link</description>
      </element>
      <element name ='child' required ='1' type ='string' default ='__default__'>
        <description>Name of the child link</description>
      </element>
      <element name ='gearbox_ratio' required ='0' type ='double' default ='1'>
        <description>Parameter for gearbox joints. Given theta_1 and theta_2 defined in description for gearbox_reference_body, theta_2 = -gearbox_ratio * theta_1.</description>
      </element>
      <element name ='gearbox_reference_body' required ='0' type ='string' default ='__default__'>
        <description>Parameter for gearbox joints. Gearbox ratio is enforced over two joint angles. First joint angle (theta_1) is the angle from the gearbox_reference_body to the parent link in the direction of the axis element and the second joint angle (theta_2) is the angle from the gearbox_reference_body to the child link in the direction of the axis2 element.</description>
      </element>
      <element name ='thread_pitch' required ='0' type ='double' default ='1'>
        <description>Parameter for screw joints.</description>
      </element>
      <element name ='axis' required ='0'>
        <description>Parameters related to the axis of rotation for revolute joints, the axis of translation for prismatic joints.</description>
        <element name ='initial_position' required ='0' type ='double' default ='0'>
          <description>Default joint position for this joint axis.</description>
        </element>
        <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
          <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
        </element>
        <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
          <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
        </element>
        <element name ='dynamics' required ='0'>
          <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
          <element name ='damping' required ='0' type ='double' default ='0'>
            <description>The physical velocity dependent viscous damping coefficient of the joint.</description>
          </element>
          <element name ='friction' required ='0' type ='double' default ='0'>
            <description>The physical static friction value of the joint.</description>
          </element>
          <element name ='spring_reference' required ='1' type ='double' default ='0'>
            <description>The spring reference position for this joint axis.</description>
          </element>
          <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
            <description>The spring stiffness for this joint axis.</description>
          </element>
        </element>
        <element name ='limit' required ='1'>
          <description>specifies the limits of this joint</description>
          <element name ='lower' required ='1' type ='double' default ='-1e+16'>
            <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='upper' required ='1' type ='double' default ='1e+16'>
            <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='effort' required ='0' type ='double' default ='-1'>
            <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
          </element>
          <element name ='velocity' required ='0' type ='double' default ='-1'>
            <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
          </element>
          <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
            <description>Joint stop stiffness. Support physics engines: SimBody.</description>
          </element>
          <element name ='dissipation' required ='0' type ='double' default ='1'>
            <description>Joint stop dissipation.</description>
          </element>
        </element>
      </element>
      <element name ='axis2' required ='0'>
        <description>Parameters related to the second axis of rotation for revolute2 joints and universal joints.</description>
        <element name ='initial_position' required ='0' type ='double' default ='0'>
          <description>Default joint position for this joint axis.</description>
        </element>
        <element name ='xyz' required ='1' type ='vector3' default ='0 0 1'>
          <description>Represents the x,y,z components of the axis unit vector. The axis is expressed in the joint frame unless the use_parent_model_frame flag is set to true. The vector should be normalized.</description>
        </element>
        <element name ='use_parent_model_frame' required ='1' type ='bool' default ='0'>
          <description>Flag to interpret the axis xyz element in the parent model frame instead of joint frame. Provided for Gazebo compatibility (see https://bitbucket.org/osrf/gazebo/issue/494 ).</description>
        </element>
        <element name ='dynamics' required ='0'>
          <description>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.</description>
          <element name ='damping' required ='0' type ='double' default ='0'>
            <description>The physical velocity dependent viscous damping coefficient of the joint. EXPERIMENTAL: if damping coefficient is negative and implicit_spring_damper is true, adaptive damping is used.</description>
          </element>
          <element name ='friction' required ='0' type ='double' default ='0'>
            <description>The physical static friction value of the joint.</description>
          </element>
          <element name ='spring_reference' required ='1' type ='double' default ='0'>
            <description>The spring reference position for this joint axis.</description>
          </element>
          <element name ='spring_stiffness' required ='1' type ='double' default ='0'>
            <description>The spring stiffness for this joint axis.</description>
          </element>
        </element>
        <element name ='limit' required ='0'>
          <description></description>
          <element name ='lower' required ='0' type ='double' default ='-1e+16'>
            <description>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='upper' required ='0' type ='double' default ='1e+16'>
            <description>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</description>
          </element>
          <element name ='effort' required ='0' type ='double' default ='-1'>
            <description>An attribute for enforcing the maximum joint effort applied by Joint::SetForce. Limit is not enforced if value is negative.</description>
          </element>
          <element name ='velocity' required ='0' type ='double' default ='-1'>
            <description>(not implemented) An attribute for enforcing the maximum joint velocity.</description>
          </element>
          <element name ='stiffness' required ='0' type ='double' default ='1e+08'>
            <description>Joint stop stiffness. Supported physics engines: SimBody.</description>
          </element>
          <element name ='dissipation' required ='0' type ='double' default ='1'>
            <description>Joint stop dissipation. Supported physics engines: SimBody.</description>
          </element>
        </element>
      </element>
      <element name ='physics' required ='0'>
        <description>Parameters that are specific to a certain physics engine.</description>
        <element name ='simbody' required ='0'>
          <description>Simbody specific parameters</description>
          <element name ='must_be_loop_joint' required ='0' type ='bool' default ='0'>
            <description>Force cut in the multibody graph at this joint.</description>
          </element>
        </element>
        <element name ='ode' required ='0'>
          <description>ODE specific parameters</description>
          <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
            <description>(DEPRECATION WARNING: In SDF 1.5 this tag will be replaced by the same tag directly under the physics-block. For now, this tag overrides the one outside of ode-block, but in SDF 1.5 this tag will be removed completely.) If provide feedback is set to true, ODE will compute the constraint forces at this joint.</description>
          </element>
          <element name ='cfm_damping' required ='0' type ='bool' default ='0'>
            <description>If cfm damping is set to true, ODE will use CFM to simulate damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active.</description>
          </element>
          <element name ='implicit_spring_damper' required ='0' type ='bool' default ='0'>
            <description>If implicit_spring_damper is set to true, ODE will use CFM, ERP to simulate stiffness and damping, allows for infinite damping, and one additional constraint row (previously used for joint limit) is always active. This replaces cfm_damping parameter in sdf 1.4.</description>
          </element>
          <element name ='fudge_factor' required ='0' type ='double' default ='0'>
            <description>Scale the excess for in a joint motor at joint limits. Should be between zero and one.</description>
          </element>
          <element name ='cfm' required ='0' type ='double' default ='0'>
            <description>Constraint force mixing for constrained directions</description>
          </element>
          <element name ='erp' required ='0' type ='double' default ='0.2'>
            <description>Error reduction parameter for constrained directions</description>
          </element>
          <element name ='bounce' required ='0' type ='double' default ='0'>
            <description>Bounciness of the limits</description>
          </element>
          <element name ='max_force' required ='0' type ='double' default ='0'>
            <description>Maximum force or torque used to reach the desired velocity.</description>
          </element>
          <element name ='velocity' required ='0' type ='double' default ='0'>
            <description>The desired velocity of the joint. Should only be set if you want the joint to move on load.</description>
          </element>
          <element name ='limit' required ='0'>
            <description></description>
            <element name ='cfm' required ='1' type ='double' default ='0'>
              <description>Constraint force mixing parameter used by the joint stop</description>
            </element>
            <element name ='erp' required ='1' type ='double' default ='0.2'>
              <description>Error reduction parameter used by the joint stop</description>
            </element>
          </element>
          <element name ='suspension' required ='0'>
            <description></description>
            <element name ='cfm' required ='1' type ='double' default ='0'>
              <description>Suspension constraint force mixing parameter</description>
            </element>
            <element name ='erp' required ='1' type ='double' default ='0.2'>
              <description>Suspension error reduction parameter</description>
            </element>
          </element>
        </element>
        <element name ='provide_feedback' required ='0' type ='bool' default ='0'>
          <description>If provide feedback is set to true, physics engine will compute the constraint forces at this joint. For now, provide_feedback under ode block will override this tag and given user warning about the migration. provide_feedback under ode is scheduled to be removed in SDF 1.5.</description>
        </element>
      </element>
      <element name ='frame' required ='*'>
        <description>A frame of reference to which a pose is relative.</description>
        <attribute name ='name' type ='string' default ='' required ='1'>
          <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
        </attribute>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
      </element>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
      <element name ='sensor' required ='0'>
        <description>The sensor tag describes the type and properties of a sensor.</description>
        <attribute name ='name' type ='string' default ='__default__' required ='1'>
          <description>A unique name for the sensor. This name must not match another model in the model.</description>
        </attribute>
        <attribute name ='type' type ='string' default ='__default__' required ='1'>
          <description>The type name of the sensor. By default, SDF supports types altimeter, camera, contact, depth, force_torque, gps, gpu_ray, imu, logical_camera, magnetometer, multicamera, ray, rfid, rfidtag, sonar, wireless_receiver, and wireless_transmitter.</description>
        </attribute>
        <element name ='always_on' required ='0' type ='bool' default ='0'>
          <description>If true the sensor will always be updated according to the update rate.</description>
        </element>
        <element name ='update_rate' required ='0' type ='double' default ='0'>
          <description>The frequency at which the sensor data is generated. If left unspecified, the sensor will generate data every cycle.</description>
        </element>
        <element name ='visualize' required ='0' type ='bool' default ='0'>
          <description>If true, the sensor is visualized in the GUI</description>
        </element>
        <element name ='topic' required ='0' type ='string' default ='__default__'>
          <description>Name of the topic on which data is published. This is necessary for visualization</description>
        </element>
        <element name ='frame' required ='*'>
          <description>A frame of reference to which a pose is relative.</description>
          <attribute name ='name' type ='string' default ='' required ='1'>
            <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
          </attribute>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
          <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
          <attribute name ='frame' type ='string' default ='' required ='0'>
            <description>Name of frame which the pose is defined relative to.</description>
          </attribute>
        </element>
        <element name ='plugin' required ='*'>
          <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='1'>
            <description>A unique name for the plugin, scoped to its parent.</description>
          </attribute>
          <attribute name ='filename' type ='string' default ='__default__' required ='1'>
            <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
          </attribute>
          <element copy_data ='true' required ='*'/>
        </element>
        <element name ='altimeter' required ='0'>
          <description>These elements are specific to an altimeter sensor.</description>
          <element name ='vertical_position' required ='0'>
            <description>Noise parameters for vertical position</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='vertical_velocity' required ='0'>
            <description>Noise parameters for vertical velocity</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='camera' required ='0'>
          <description>These elements are specific to camera sensors.</description>
          <attribute name ='name' type ='string' default ='__default__' required ='0'>
            <description>An optional name for the camera.</description>
          </attribute>
          <element name ='horizontal_fov' required ='1' type ='double' default ='1.047'>
            <description>Horizontal field of view</description>
          </element>
          <element name ='image' required ='1'>
            <description>The image size in pixels and format.</description>
            <element name ='width' required ='1' type ='int' default ='320'>
              <description>Width in pixels</description>
            </element>
            <element name ='height' required ='1' type ='int' default ='240'>
              <description>Height in pixels</description>
            </element>
            <element name ='format' required ='0' type ='string' default ='R8G8B8'>
              <description>(L8|R8G8B8|B8G8R8|BAYER_RGGB8|BAYER_BGGR8|BAYER_GBRG8|BAYER_GRBG8)</description>
            </element>
          </element>
          <element name ='clip' required ='1'>
            <description>The near and far clip planes. Objects closer or farther than these planes are not rendered.</description>
            <element name ='near' required ='1' type ='double' default ='0.1'>
              <description>Near clipping plane</description>
            </element>
            <element name ='far' required ='1' type ='double' default ='100'>
              <description>Far clipping plane</description>
            </element>
          </element>
          <element name ='save' required ='0'>
            <description>Enable or disable saving of camera frames.</description>
            <attribute name ='enabled' type ='bool' default ='0' required ='1'>
              <description>True = saving enabled</description>
            </attribute>
            <element name ='path' required ='1' type ='string' default ='__default__'>
              <description>The path name which will hold the frame data. If path name is relative, then directory is relative to current working directory.</description>
            </element>
          </element>
          <element name ='depth_camera' required ='0'>
            <description>Depth camera parameters</description>
            <element name ='output' required ='1' type ='string' default ='depths'>
              <description>Type of output</description>
            </element>
          </element>
          <element name ='noise' required ='0'>
            <description>The properties of the noise model that should be applied to generated images</description>
            <element name ='type' required ='1' type ='string' default ='gaussian'>
              <description>The type of noise. Currently supported types are: "gaussian" (draw additive noise values independently for each pixel from a Gaussian distribution).</description>
            </element>
            <element name ='mean' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
            </element>
            <element name ='stddev' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
            </element>
          </element>
          <element name ='distortion' required ='0'>
            <description>Lens distortion to be applied to camera images. See http://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction</description>
            <element name ='k1' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k1</description>
            </element>
            <element name ='k2' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k2</description>
            </element>
            <element name ='k3' required ='0' type ='double' default ='0'>
              <description>The radial distortion coefficient k3</description>
            </element>
            <element name ='p1' required ='0' type ='double' default ='0'>
              <description>The tangential distortion coefficient p1</description>
            </element>
            <element name ='p2' required ='0' type ='double' default ='0'>
              <description>The tangential distortion coefficient p2</description>
            </element>
            <element name ='center' required ='0' type ='vector2d' default ='0.5 0.5'>
              <description>The distortion center or principal point</description>
            </element>
          </element>
          <element name ='lens' required ='0'>
            <description>Lens projection description</description>
            <element name ='type' required ='1' type ='string' default ='stereographic'>
              <description>Type of the lens mapping. Supported values are gnomonical, stereographic, equidistant, equisolid_angle, orthographic, custom. For gnomonical (perspective) projection, it is recommended to specify a horizontal_fov of less than or equal to 90°</description>
            </element>
            <element name ='scale_to_hfov' required ='1' type ='bool' default ='1'>
              <description>If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters</description>
            </element>
            <element name ='custom_function' required ='0'>
              <description>Definition of custom mapping function in a form of r=c1*f*fun(theta/c2 + c3). See https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function</description>
              <element name ='c1' required ='0' type ='double' default ='1'>
                <description>Linear scaling constant</description>
              </element>
              <element name ='c2' required ='0' type ='double' default ='1'>
                <description>Angle scaling constant</description>
              </element>
              <element name ='c3' required ='0' type ='double' default ='0'>
                <description>Angle offset constant</description>
              </element>
              <element name ='f' required ='0' type ='double' default ='1'>
                <description>Focal length of the optical system. Note: It's not a focal length of the lens in a common sense! This value is ignored if 'scale_to_fov' is set to true</description>
              </element>
              <element name ='fun' required ='1' type ='string' default ='tan'>
                <description>Possible values are 'sin', 'tan' and 'id'</description>
              </element>
            </element>
            <element name ='cutoff_angle' required ='0' type ='double' default ='1.5707'>
              <description>Everything outside of the specified angle will be hidden, 90° by default</description>
            </element>
            <element name ='env_texture_size' required ='0' type ='int' default ='256'>
              <description>Resolution of the environment cube map used to draw the world</description>
            </element>
            <element name ='intrinsics' required ='0'>
              <description>Camera intrinsic parameters for setting a custom perspective projection matrix (cannot be used with WideAngleCamera since this class uses image stitching from 6 different cameras for achieving a wide field of view). The focal lengths can be computed using focal_length_in_pixels = (image_width_in_pixels * 0.5) / tan(field_of_view_in_degrees * 0.5 * PI/180)</description>
              <element name ='fx' required ='1' type ='double' default ='277'>
                <description>X focal length (in pixels, overrides horizontal_fov)</description>
              </element>
              <element name ='fy' required ='1' type ='double' default ='277'>
                <description>Y focal length (in pixels, overrides horizontal_fov)</description>
              </element>
              <element name ='cx' required ='1' type ='double' default ='160'>
                <description>X principal point (in pixels)</description>
              </element>
              <element name ='cy' required ='1' type ='double' default ='120'>
                <description>Y principal point (in pixels)</description>
              </element>
              <element name ='s' required ='1' type ='double' default ='1'>
                <description>XY axis skew</description>
              </element>
            </element>
          </element>
          <element name ='frame' required ='*'>
            <description>A frame of reference to which a pose is relative.</description>
            <attribute name ='name' type ='string' default ='' required ='1'>
              <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
            </attribute>
            <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
              <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
              <attribute name ='frame' type ='string' default ='' required ='0'>
                <description>Name of frame which the pose is defined relative to.</description>
              </attribute>
            </element>
          </element>
          <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
            <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
            <attribute name ='frame' type ='string' default ='' required ='0'>
              <description>Name of frame which the pose is defined relative to.</description>
            </attribute>
          </element>
        </element>
        <element name ='contact' required ='0'>
          <description>These elements are specific to the contact sensor.</description>
          <element name ='collision' required ='1' type ='string' default ='__default__'>
            <description>name of the collision element within a link that acts as the contact sensor.</description>
          </element>
          <element name ='topic' required ='1' type ='string' default ='__default_topic__'>
            <description>Topic on which contact data is published.</description>
          </element>
        </element>
        <element name ='gps' required ='0'>
          <description>These elements are specific to the GPS sensor.</description>
          <element name ='position_sensing' required ='0'>
            <description>Parameters related to GPS position measurement.</description>
            <element name ='horizontal' required ='0'>
              <description>Noise parameters for horizontal position measurement, in units of meters.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description>Noise parameters for vertical position measurement, in units of meters.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='velocity_sensing' required ='0'>
            <description>Parameters related to GPS position measurement.</description>
            <element name ='horizontal' required ='0'>
              <description>Noise parameters for horizontal velocity measurement, in units of meters/second.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description>Noise parameters for vertical velocity measurement, in units of meters/second.</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='imu' required ='0'>
          <description>These elements are specific to the IMU sensor.</description>
          <element name ='orientation_reference_frame' required ='0'>
            <description></description>
            <element name ='localization' required ='1' type ='string' default ='CUSTOM'>
              <description>This string represents special hardcoded use cases that are commonly seen with typical robot IMU's: - CUSTOM: use Euler angle custom_rpy orientation specification. The orientation of the IMU's reference frame is defined by adding the custom_rpy rotation to the parent_frame. - NED: The IMU XYZ aligns with NED, where NED orientation relative to Gazebo world is defined by the SphericalCoordinates class. - ENU: The IMU XYZ aligns with ENU, where ENU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - NWU: The IMU XYZ aligns with NWU, where NWU orientation relative to Gazebo world is defined by the SphericalCoordinates class. - GRAV_UP: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the opposite direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule. - GRAV_DOWN: where direction of gravity maps to IMU reference frame Z-axis with Z-axis pointing in the direction of gravity. IMU reference frame X-axis direction is defined by grav_dir_x. Note if grav_dir_x is parallel to gravity direction, this configuration fails. Otherwise, IMU reference frame X-axis is defined by projection of grav_dir_x onto a plane normal to the gravity vector. IMU reference frame Y-axis is a vector orthogonal to both X and Z axis following the right hand rule.</description>
            </element>
            <element name ='custom_rpy' required ='0' type ='vector3' default ='0 0 0'>
              <description>This field and parent_frame are used when localization is set to CUSTOM. Orientation (fixed axis roll, pitch yaw) transform from parent_frame to this IMU's reference frame. Some common examples are: - IMU reports in its local frame on boot. IMU sensor frame is the reference frame. Example: parent_frame="", custom_rpy="0 0 0" - IMU reports in Gazebo world frame. Example sdf: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NWU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-West-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 0" - IMU reports in NED frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between North-East-Down and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="M_PI 0 0" - IMU reports in ENU frame. Uses SphericalCoordinates class to determine world frame in relation to magnetic north and gravity; i.e. rotation between East-North-Up and world (+X,+Y,+Z) frame is defined by SphericalCoordinates class. Example sdf given world is NWU: parent_frame="world", custom_rpy="0 0 -0.5*M_PI" - IMU reports in ROS optical frame as described in http://www.ros.org/reps/rep-0103.html#suffix-frames, which is (z-forward, x-left to right when facing +z, y-top to bottom when facing +z). (default gazebo camera is +x:view direction, +y:left, +z:up). Example sdf: parent_frame="local", custom_rpy="-0.5*M_PI 0 -0.5*M_PI"</description>
              <element name ='parent_frame' required ='0' type ='string' default =''>
                <description>Name of parent frame which the custom_rpy transform is defined relative to. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
              </element>
            </element>
            <element name ='grav_dir_x' required ='0' type ='vector3' default ='1 0 0'>
              <description>Used when localization is set to GRAV_UP or GRAV_DOWN, a projection of this vector into a plane that is orthogonal to the gravity vector defines the direction of the IMU reference frame's X-axis. grav_dir_x is defined in the coordinate frame as defined by the parent_frame element.</description>
              <element name ='parent_frame' required ='0' type ='string' default =''>
                <description>Name of parent frame in which the grav_dir_x vector is defined. It can be any valid fully scoped Gazebo Link name or the special reserved "world" frame. If left empty, use the sensor's own local frame.</description>
              </element>
            </element>
          </element>
          <element name ='topic' required ='0' type ='string' default ='__default_topic__'>
            <description>Topic on which data is published.</description>
          </element>
          <element name ='angular_velocity' required ='0'>
            <description>These elements are specific to body-frame angular velocity, which is expressed in radians per second</description>
            <element name ='x' required ='0'>
              <description>Angular velocity about the X axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Angular velocity about the Y axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Angular velocity about the Z axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
          <element name ='linear_acceleration' required ='0'>
            <description>These elements are specific to body-frame linear acceleration, which is expressed in meters per second squared</description>
            <element name ='x' required ='0'>
              <description>Linear acceleration about the X axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='y' required ='0'>
              <description>Linear acceleration about the Y axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
            <element name ='z' required ='0'>
              <description>Linear acceleration about the Z axis</description>
              <element name ='noise' required ='1'>
                <description>The properties of a sensor noise model.</description>
                <attribute name ='type' type ='string' default ='none' required ='1'>
                  <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
                </attribute>
                <element name ='mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
                </element>
                <element name ='bias_mean' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
                </element>
                <element name ='precision' required ='0' type ='double' default ='0'>
                  <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
                </element>
              </element>
            </element>
          </element>
        </element>
        <element name ='logical_camera' required ='0'>
          <description>These elements are specific to logical camera sensors. A logical camera reports objects that fall within a frustum. Computation should be performed on the CPU.</description>
          <element name ='near' required ='1' type ='double' default ='0'>
            <description>Near clipping distance of the view frustum</description>
          </element>
          <element name ='far' required ='1' type ='double' default ='1'>
            <description>Far clipping distance of the view frustum</description>
          </element>
          <element name ='aspect_ratio' required ='1' type ='double' default ='1'>
            <description>Aspect ratio of the near and far planes. This is the width divided by the height of the near or far planes.</description>
          </element>
          <element name ='horizontal_fov' required ='1' type ='double' default ='1'>
            <description>Horizontal field of view of the frustum, in radians. This is the angle between the frustum's vertex and the edges of the near or far plane.</description>
          </element>
        </element>
        <element name ='magnetometer' required ='0'>
          <description>These elements are specific to a Magnetometer sensor.</description>
          <element name ='x' required ='0'>
            <description>Parameters related to the body-frame X axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='y' required ='0'>
            <description>Parameters related to the body-frame Y axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
          <element name ='z' required ='0'>
            <description>Parameters related to the body-frame Z axis of the magnetometer</description>
            <element name ='noise' required ='1'>
              <description>The properties of a sensor noise model.</description>
              <attribute name ='type' type ='string' default ='none' required ='1'>
                <description>The type of noise. Currently supported types are: "none" (no noise). "gaussian" (draw noise values independently for each measurement from a Gaussian distribution). "gaussian_quantized" ("gaussian" plus quantization of outputs (ie. rounding))</description>
              </attribute>
              <element name ='mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
              </element>
              <element name ='bias_mean' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the mean of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='bias_stddev' required ='0' type ='double' default ='0'>
                <description>For type "gaussian*", the standard deviation of the Gaussian distribution from which bias values are drawn.</description>
              </element>
              <element name ='precision' required ='0' type ='double' default ='0'>
                <description>For type "gaussian_quantized", the precision of output signals. A value of zero implies infinite precision / no quantization.</description>
              </element>
            </element>
          </element>
        </element>
        <element name ='ray' required ='0'>
          <description>These elements are specific to the ray (laser) sensor.</description>
          <element name ='scan' required ='1'>
            <description></description>
            <element name ='horizontal' required ='1'>
              <description></description>
              <element name ='samples' required ='1' type ='unsigned int' default ='640'>
                <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
              </element>
              <element name ='resolution' required ='1' type ='double' default ='1'>
                <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
              </element>
              <element name ='min_angle' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='max_angle' required ='1' type ='double' default ='0'>
                <description>Must be greater or equal to min_angle</description>
              </element>
            </element>
            <element name ='vertical' required ='0'>
              <description></description>
              <element name ='samples' required ='1' type ='unsigned int' default ='1'>
                <description>The number of simulated rays to generate per complete laser sweep cycle.</description>
              </element>
              <element name ='resolution' required ='0' type ='double' default ='1'>
                <description>This number is multiplied by samples to determine the number of range data points returned. If resolution is less than one, range data is interpolated. If resolution is greater than one, range data is averaged.</description>
              </element>
              <element name ='min_angle' required ='1' type ='double' default ='0'>
                <description></description>
              </element>
              <element name ='max_angle' required ='1' type ='double' default ='0'>
                <description>Must be greater or equal to min_angle</description>
              </element>
            </element>
          </element>
          <element name ='range' required ='1'>
            <description>specifies range properties of each simulated ray</description>
            <element name ='min' required ='1' type ='double' default ='0'>
              <description>The minimum distance for each ray.</description>
            </element>
            <element name ='max' required ='1' type ='double' default ='0'>
              <description>The maximum distance for each ray.</description>
            </element>
            <element name ='resolution' required ='0' type ='double' default ='0'>
              <description>Linear resolution of each ray.</description>
            </element>
          </element>
          <element name ='noise' required ='0'>
            <description>The properties of the noise model that should be applied to generated scans</description>
            <element name ='type' required ='1' type ='string' default ='gaussian'>
              <description>The type of noise. Currently supported types are: "gaussian" (draw noise values independently for each beam from a Gaussian distribution).</description>
            </element>
            <element name ='mean' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the mean of the Gaussian distribution from which noise values are drawn.</description>
            </element>
            <element name ='stddev' required ='0' type ='double' default ='0'>
              <description>For type "gaussian," the standard deviation of the Gaussian distribution from which noise values are drawn.</description>
            </element>
          </element>
        </element>
        <element name ='rfidtag' required ='0'>
          <description></description>
        </element>
        <element name ='rfid' required ='0'>
          <description></description>
        </element>
        <element name ='sonar' required ='0'>
          <description>These elements are specific to the sonar sensor.</description>
          <element name ='geometry' required ='0' type ='string' default ='cone'>
            <description>The sonar collision shape. Currently supported geometries are: "cone" and "sphere".</description>
          </element>
          <element name ='min' required ='1' type ='double' default ='0'>
            <description>Minimum range</description>
          </element>
          <element name ='max' required ='1' type ='double' default ='1'>
            <description>Max range</description>
          </element>
          <element name ='radius' required ='0' type ='double' default ='0.5'>
            <description>Radius of the sonar cone at max range. This parameter is only used if geometry is "cone".</description>
          </element>
        </element>
        <element name ='transceiver' required ='0'>
          <description>These elements are specific to a wireless transceiver.</description>
          <element name ='essid' required ='0' type ='string' default ='wireless'>
            <description>Service set identifier (network name)</description>
          </element>
          <element name ='frequency' required ='0' type ='double' default ='2442'>
            <description>Specifies the frequency of transmission in MHz</description>
          </element>
          <element name ='min_frequency' required ='0' type ='double' default ='2412'>
            <description>Only a frequency range is filtered. Here we set the lower bound (MHz).</description>
          </element>
          <element name ='max_frequency' required ='0' type ='double' default ='2484'>
            <description>Only a frequency range is filtered. Here we set the upper bound (MHz).</description>
          </element>
          <element name ='gain' required ='1' type ='double' default ='2.5'>
            <description>Specifies the antenna gain in dBi</description>
          </element>
          <element name ='power' required ='1' type ='double' default ='14.5'>
            <description>Specifies the transmission power in dBm</description>
          </element>
          <element name ='sensitivity' required ='0' type ='double' default ='-90'>
            <description>Mininum received signal power in dBm</description>
          </element>
        </element>
        <element name ='force_torque' required ='0'>
          <description>These elements are specific to the force torque sensor.</description>
          <element name ='frame' required ='0' type ='string' default ='child'>
            <description>Frame in which to report the wrench values. Currently supported frames are: "parent" report the wrench expressed in the orientation of the parent link frame, "child" report the wrench expressed in the orientation of the child link frame, "sensor" report the wrench expressed in the orientation of the joint sensor frame. Note that for each option the point with respect to which the torque component of the wrench is expressed is the joint origin.</description>
          </element>
          <element name ='measure_direction' required ='0' type ='string' default ='child_to_parent'>
            <description>Direction of the wrench measured by the sensor. The supported options are: "parent_to_child" if the measured wrench is the one applied by parent link on the child link, "child_to_parent" if the measured wrench is the one applied by the child link on the parent link.</description>
          </element>
        </element>
      </element>
    </element>
    <element name ='plugin' required ='*'>
      <description>A plugin is a dynamically loaded chunk of code. It can exist as a child of world, model, and sensor.</description>
      <attribute name ='name' type ='string' default ='__default__' required ='1'>
        <description>A unique name for the plugin, scoped to its parent.</description>
      </attribute>
      <attribute name ='filename' type ='string' default ='__default__' required ='1'>
        <description>Name of the shared library to load. If the filename is not a full path name, the file will be searched for in the configuration paths.</description>
      </attribute>
      <element copy_data ='true' required ='*'/>
    </element>
  </element>
  <element name ='light' required ='*'>
    <description>The light element describes a light source.</description>
    <attribute name ='name' type ='string' default ='__default__' required ='0'>
      <description>A unique name for the light.</description>
    </attribute>
    <attribute name ='type' type ='string' default ='point' required ='1'>
      <description>The light type: point, directional, spot.</description>
    </attribute>
    <element name ='cast_shadows' required ='0' type ='bool' default ='0'>
      <description>When true, the light will cast shadows.</description>
    </element>
    <element name ='diffuse' required ='1' type ='color' default ='1 1 1 1'>
      <description>Diffuse light color</description>
    </element>
    <element name ='specular' required ='1' type ='color' default ='0.1 0.1 0.1 1'>
      <description>Specular light color</description>
    </element>
    <element name ='attenuation' required ='0'>
      <description>Light attenuation</description>
      <element name ='range' required ='1' type ='double' default ='10'>
        <description>Range of the light</description>
      </element>
      <element name ='linear' required ='0' type ='double' default ='1'>
        <description>The linear attenuation factor: 1 means attenuate evenly over the distance.</description>
      </element>
      <element name ='constant' required ='0' type ='double' default ='1'>
        <description>The constant attenuation factor: 1.0 means never attenuate, 0.0 is complete attenutation.</description>
      </element>
      <element name ='quadratic' required ='0' type ='double' default ='0'>
        <description>The quadratic attenuation factor: adds a curvature to the attenuation.</description>
      </element>
    </element>
    <element name ='direction' required ='1' type ='vector3' default ='0 0 -1'>
      <description>Direction of the light, only applicable for spot and directional lights.</description>
    </element>
    <element name ='spot' required ='0'>
      <description>Spot light parameters</description>
      <element name ='inner_angle' required ='1' type ='double' default ='0'>
        <description>Angle covered by the bright inner cone</description>
      </element>
      <element name ='outer_angle' required ='1' type ='double' default ='0'>
        <description>Angle covered by the outer cone</description>
      </element>
      <element name ='falloff' required ='1' type ='double' default ='0'>
        <description>The rate of falloff between the inner and outer cones. 1.0 means a linear falloff, less means slower falloff, higher means faster falloff.</description>
      </element>
    </element>
    <element name ='frame' required ='*'>
      <description>A frame of reference to which a pose is relative.</description>
      <attribute name ='name' type ='string' default ='' required ='1'>
        <description>Name of the frame. This name must not match another frame defined inside the parent that this frame is attached to.</description>
      </attribute>
      <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
        <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
        <attribute name ='frame' type ='string' default ='' required ='0'>
          <description>Name of frame which the pose is defined relative to.</description>
        </attribute>
      </element>
    </element>
    <element name ='pose' required ='0' type ='pose' default ='0 0 0 0 -0 0'>
      <description>A position(x,y,z) and orientation(roll, pitch yaw) with respect to the specified frame.</description>
      <attribute name ='frame' type ='string' default ='' required ='0'>
        <description>Name of frame which the pose is defined relative to.</description>
      </attribute>
    </element>
  </element>
</element>
